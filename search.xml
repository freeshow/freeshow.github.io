<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MapReduce之去重计数类应用]]></title>
      <url>http://freeshow.github.io/2017/03/27/MapReduce%E4%B9%8B%E5%8E%BB%E9%87%8D%E8%AE%A1%E6%95%B0%E7%B1%BB%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h2><p>在大数据文件中包含了大量的记录，每条记录记载了某事物的一些属性，需要根据某几个属性的组合，去除相同的重复组合，并统计其中某属性的统计值。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在此类应用中，将计算过程分为两个步骤。<br>第一步，map 函数将每条记录中需要关注的属性组合作为关键字，将空字符串作为值，生成的&lt;键-值&gt;对作为中间值输出。<br>第二步，reduce 函数则将输入的中间结果的 key 作为新的 key,value仍然取空字符串，输出结果。<br>因为所有相同的 key 都被送到同一个 reducer，而 reducer 只输出了一个 key，这一过程实际上就是去重的过程。</p>
<h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>以下两个文件，文件中表示某天，某IP访问了系统这样一个日志。当时间和IP相同时，将这种相同的数据去掉，只留一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">log1.txt:</div><div class="line">2014-10-3	10.3.5.19</div><div class="line">2014-10-3	10.3.3.19</div><div class="line">2014-10-3	10.3.5.18</div><div class="line">2014-10-3	10.3.51.19</div><div class="line">2014-10-3	10.3.2.19</div><div class="line">2014-10-4	10.3.2.5</div><div class="line">2014-10-4	10.3.2.18</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">log2.txt</div><div class="line">2014-10-3	10.3.5.19</div><div class="line">2014-10-4	10.3.5.19</div><div class="line">2014-10-3	10.3.5.18</div><div class="line">2014-10-5	10.3.51.19</div><div class="line">2014-10-4	10.3.2.5</div><div class="line">2014-10-5	10.3.2.19</div></pre></td></tr></table></figure>
<h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><h3 id="UniqMapper"><a href="#UniqMapper" class="headerlink" title="UniqMapper"></a>UniqMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.uniq;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		context.write(value, <span class="keyword">new</span> Text(<span class="string">""</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UniqReducer"><a href="#UniqReducer" class="headerlink" title="UniqReducer"></a>UniqReducer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.uniq;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		context.write(key, <span class="keyword">new</span> Text(<span class="string">""</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UniqRunner"><a href="#UniqRunner" class="headerlink" title="UniqRunner"></a>UniqRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.uniq;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqRunner</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job = Job.getInstance(conf);</div><div class="line">		job.setJarByClass(UniqRunner.class);</div><div class="line">		</div><div class="line">		job.setMapperClass(UniqMapper.class);</div><div class="line">		job.setReducerClass(UniqReducer.class);</div><div class="line">		</div><div class="line">		job.setMapOutputKeyClass(Text.class);</div><div class="line">		job.setMapOutputValueClass(Text.class);</div><div class="line">		job.setOutputKeyClass(Text.class);</div><div class="line">		job.setOutputValueClass(Text.class);</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span>:<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> res = ToolRunner.run(<span class="keyword">new</span> Configuration(),<span class="keyword">new</span> UniqRunner(), args);</div><div class="line">		System.exit(res);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">2014-10-3	10.3.2.19	</div><div class="line">2014-10-3	10.3.3.19	</div><div class="line">2014-10-3	10.3.5.18	</div><div class="line">2014-10-3	10.3.5.19	</div><div class="line">2014-10-3	10.3.51.19	</div><div class="line">2014-10-4	10.3.2.18	</div><div class="line">2014-10-4	10.3.2.5	</div><div class="line">2014-10-4	10.3.5.19	</div><div class="line">2014-10-5	10.3.2.19	</div><div class="line">2014-10-5	10.3.51.19</div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MapReduce之计数类应用]]></title>
      <url>http://freeshow.github.io/2017/03/27/MapReduce%E4%B9%8B%E8%AE%A1%E6%95%B0%E7%B1%BB%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h2><p>在数据文件中包含大量的记录，每条记录中包含某类事物的若干属性，在实际应用中需要根据这类事物的某个属性进行数值计算，如求和、平均值等。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>针对这类应用，在 Map 函数中提取每条记录中这类事物的特定属性值，在 Reduce 函数中对所有相同事物属性值按照函数表达式进行计算。</p>
<h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>WordCount 就是经典的计数类应用中求和案例，下面通过另一案例讲解求平均值的方法。现在一个班级有 Rose、Andy、Tom、John、Michelle、Amy、Kim等同学，学习了 English、Math、Chinese 三门课程，一门课程是一个文本文件，通过运算求每个同学的平均成绩。文件内容如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">English.txt:		</div><div class="line">Rose		91	</div><div class="line">Andy		87</div><div class="line">Tom		 78</div><div class="line">John		94</div><div class="line">Michelle	74</div><div class="line">Amy		 67</div><div class="line">Kim		 71</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Math.txt:		</div><div class="line">Rose		83	</div><div class="line">Andy		93</div><div class="line">Tom		 67</div><div class="line">John		92</div><div class="line">Michelle	82</div><div class="line">Amy		 85</div><div class="line">Kim		 80</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Chinese.txt:		</div><div class="line">Rose		85	</div><div class="line">Andy		84</div><div class="line">Tom		 85</div><div class="line">John		77</div><div class="line">Michelle	93</div><div class="line">Amy		 94</div><div class="line">Kim		 83</div></pre></td></tr></table></figure>
<h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><h3 id="AverageMapper"><a href="#AverageMapper" class="headerlink" title="AverageMapper"></a>AverageMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.score;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Text name = <span class="keyword">new</span> Text();</div><div class="line">	<span class="keyword">private</span> IntWritable score = <span class="keyword">new</span> IntWritable();</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		String line = value.toString();</div><div class="line">		StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(line);</div><div class="line">		<span class="keyword">while</span>(itr.hasMoreTokens())&#123;</div><div class="line">			name.set(itr.nextToken());</div><div class="line">			score.set(Integer.parseInt(itr.nextToken()));</div><div class="line">			context.write(name, score);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AverageReducer"><a href="#AverageReducer" class="headerlink" title="AverageReducer"></a>AverageReducer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.score;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,Context context)</span></span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (IntWritable val : values) &#123;</div><div class="line">			sum += val.get();</div><div class="line">			++count;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> avg = sum / count;</div><div class="line">		context.write(key, <span class="keyword">new</span> IntWritable(avg));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AverageRunner"><a href="#AverageRunner" class="headerlink" title="AverageRunner"></a>AverageRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.score;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AverageRunner</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job = Job.getInstance(conf);</div><div class="line">		job.setJarByClass(AverageRunner.class);</div><div class="line">		</div><div class="line">		job.setMapperClass(AverageMapper.class);</div><div class="line">		job.setReducerClass(AverageReducer.class);</div><div class="line">		</div><div class="line">		job.setMapOutputKeyClass(Text.class);</div><div class="line">		job.setMapOutputValueClass(IntWritable.class);</div><div class="line">		job.setOutputKeyClass(Text.class);</div><div class="line">		job.setOutputValueClass(IntWritable.class);</div><div class="line">		</div><div class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span>:<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> res = ToolRunner.run(<span class="keyword">new</span> Configuration(), <span class="keyword">new</span> AverageRunner(), args);</div><div class="line">		System.exit(res);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Amy	82</div><div class="line">Andy	88</div><div class="line">John	87</div><div class="line">Kim	78</div><div class="line">Michelle	83</div><div class="line">Rose	86</div><div class="line">Tom	76</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDFS Java API]]></title>
      <url>http://freeshow.github.io/2017/03/27/HDFS%20Java%20API/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<ul>
<li>通常MapReduce会把一个文件数据块处理成一个Map任务。</li>
<li>HDFS默认工作目录为/user/${USER},${USER}是当前的登录用户名。</li>
</ul>
<h2 id="HDFS中的-Java-API-的使用"><a href="#HDFS中的-Java-API-的使用" class="headerlink" title="HDFS中的 Java API 的使用"></a>HDFS中的 Java API 的使用</h2><ul>
<li>文件在 Hadoop 中表示一个Path对象，通常封装一个URI，如HDFS上有个test文件，URI表示成hdfs://master:9000/test。</li>
<li>Hadoop 中关于文件操作类基本上全部是在”org.apache.hadoop.fs”包中，这些 API 能够支持的操作包含打开文件、读写文件、删除文件等。</li>
</ul>
<p>Hadoop 类库中最终面向用户提供的接口类是 FileSystem，该类是个抽象类，只能通过类的 get 方法得到具体的类。get 方法存在几个重载版本，常用的是 static FileSystem get(Configuration conf); 该类封装了几乎所有的文件操作，如 mkdir、delete等。综上基本上可以得出操作文件的程序库框架：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">operator()</div><div class="line">&#123;</div><div class="line">	得到Configuration对象</div><div class="line">	得到FileSystem对象</div><div class="line">	进行文件操作</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>通过 “FileSystem.copyFromLocalFile(Path src,Path dst)” 可将本地文件上传到HDFS指定的位置上，其中 src 和 dst 均为文件完整路径，具体示例如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="comment">//文件上传至HDFS</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PutFile</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Configuration con = <span class="keyword">new</span> Configuration();</div><div class="line">		</div><div class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>);</div><div class="line">		FileSystem fs = FileSystem.get(uri, con);</div><div class="line"></div><div class="line">		<span class="comment">//本地文件</span></div><div class="line">		Path src = <span class="keyword">new</span> Path(<span class="string">"D:\\test.txt"</span>);</div><div class="line">		<span class="comment">//HDFS存放文件</span></div><div class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">"/"</span>);</div><div class="line">		<span class="comment">//上传文件</span></div><div class="line">		fs.copyFromLocalFile(src, dst);</div><div class="line">		System.out.println(<span class="string">"Upload to "</span>+con.get(<span class="string">"fs.defaultFS"</span>));</div><div class="line">                                   </div><div class="line">		<span class="comment">//以下相当于执行hdfs dfs -ls /</span></div><div class="line">		FileStatus[] files = fs.listStatus(dst);</div><div class="line">		<span class="keyword">for</span> (FileStatus file : files) &#123;</div><div class="line">			System.out.println(file.getPath());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><p>通过 “FileSystem.create(Path f, Boolean b)” 可在 HDFS 上创建文件，其中 f 为文件的完整路径， b 为判断是否覆盖，具体实现如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>);</div><div class="line">		FileSystem fs = FileSystem.get(uri, conf);</div><div class="line">		</div><div class="line">		<span class="comment">//定义新文件</span></div><div class="line">		Path dfs = <span class="keyword">new</span> Path(<span class="string">"/hdfsfile"</span>);</div><div class="line">		<span class="comment">//创建新文件，如果有则覆盖（true）</span></div><div class="line">		FSDataOutputStream create = fs.create(dfs, <span class="keyword">true</span>);</div><div class="line">		<span class="comment">//创建目录为：fs.mkdirs()</span></div><div class="line"></div><div class="line">		<span class="comment">//向新创建的文件中写入数据</span></div><div class="line">		create.writeBytes(<span class="string">"Hello,HDFS!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查看文件详细信息"><a href="#查看文件详细信息" class="headerlink" title="查看文件详细信息"></a>查看文件详细信息</h3><p>通过 “Class FileStatus” 可查找指定文件在 HDFS 集群上的具体信息，包括文件路径、访问时间、修改时间、文件长度、所占块大小、文件拥有者、文件用户组和文件复制数等信息，具体实现如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.BlockLocation;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLocation</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>);</div><div class="line">		FileSystem fs = FileSystem.get(uri, conf);</div><div class="line">		</div><div class="line">		Path fPath = <span class="keyword">new</span> Path(<span class="string">"/hdfsfile"</span>);</div><div class="line">		FileStatus fileStatus = fs.getFileStatus(fPath);</div><div class="line">		</div><div class="line">		<span class="comment">/*获取文件在  HDFS 集群位置</span></div><div class="line">		 *FileSystem.getFileBlockLocations(FileStatus file, long start, long len)</div><div class="line">		 *可查找指定文件在 HDFS 集群上的位置 ，其中 file 为文件的完整路径， start 和 len 来标识查找文件的路径</div><div class="line">		 * */</div><div class="line">		BlockLocation[] blockLocations = fs.getFileBlockLocations(fileStatus, <span class="number">0</span>, </div><div class="line">				fileStatus.getLen());</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blockLocations.length; i++) &#123;</div><div class="line">			String[] hosts = blockLocations[i].getHosts();</div><div class="line">			System.out.println(<span class="string">"block_"</span>+i+<span class="string">"_location:"</span>+hosts[<span class="number">0</span>]);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//格式化日期输出</span></div><div class="line">		SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件访问时间，返回long</span></div><div class="line">		<span class="keyword">long</span> accessTime = fileStatus.getAccessTime();</div><div class="line">		System.out.println(<span class="string">"access:"</span>+formatter.format(<span class="keyword">new</span> Date(accessTime)));</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件修改时间，返回long</span></div><div class="line">		<span class="keyword">long</span> modificationTime = fileStatus.getModificationTime();</div><div class="line">		System.out.println(<span class="string">"modification:"</span>+formatter.format(<span class="keyword">new</span> Date(modificationTime)));</div><div class="line">		</div><div class="line">		<span class="comment">//获取块大小，单位B</span></div><div class="line">		<span class="keyword">long</span> blockSize = fileStatus.getBlockSize();</div><div class="line">		System.out.println(<span class="string">"blockSize:"</span>+blockSize);</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件大小，单位B</span></div><div class="line">		<span class="keyword">long</span> len = fileStatus.getLen();</div><div class="line">		System.out.println(<span class="string">"length:"</span>+len);</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件拥有者</span></div><div class="line">		String ower = fileStatus.getOwner();</div><div class="line">		System.out.println(<span class="string">"owner:"</span>+ower);</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件所在用户组</span></div><div class="line">		String group = fileStatus.getGroup();</div><div class="line">		System.out.println(<span class="string">"group:"</span>+group);</div><div class="line">		</div><div class="line">		<span class="comment">//获取文件拷贝数</span></div><div class="line">		<span class="keyword">short</span> replication = fileStatus.getReplication();</div><div class="line">		System.out.println(<span class="string">"replication:"</span>+replication);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>从 HDFS 下载文件到本地非常简单，直接调用 FileSystem.copyToLocalFile(Path src, Path dst)即可。其中 src 为 HDFS 上的文件， dst 为要下载到本地的文件名，示例如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetFile</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>);</div><div class="line">		FileSystem fs = FileSystem.get(uri, conf);</div><div class="line">		</div><div class="line">		<span class="comment">//hdfs上的文件</span></div><div class="line">		Path src = <span class="keyword">new</span> Path(<span class="string">"/file"</span>);</div><div class="line">		<span class="comment">//下载到本地的文件名</span></div><div class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">"F:/newfile"</span>);</div><div class="line">		<span class="comment">//下载文件</span></div><div class="line">		fs.copyToLocalFile(src, dst);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果中会出现一个crc文件，里面保存了对 file 文件的循环校验信息，如下图所示。</p>
<center><img src="http://i.imgur.com/SzawpvH.png" alt=""></center>


<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>从　HDFS 上删除文件非常简单，直接调用 FileSystem.delete(Path path, Boolean b)即可。其中 path 为要删除的文件，示例如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteFile</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>);</div><div class="line">		FileSystem fs = FileSystem.get(uri, conf);</div><div class="line">		</div><div class="line">		<span class="comment">//HDFS上删除的文件</span></div><div class="line">		Path delPath = <span class="keyword">new</span> Path(<span class="string">"/file"</span>);</div><div class="line">		<span class="keyword">if</span> (fs.exists(delPath)) &#123;</div><div class="line">			fs.delete(delPath);</div><div class="line">			System.out.println(delPath+<span class="string">" has been deleted sucessfully."</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(delPath + <span class="string">" deleted failed."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="java-net-URL"><a href="#java-net-URL" class="headerlink" title="java.net.URL"></a>java.net.URL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.MalformedURLException;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FsUrlStreamHandlerFactory;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="comment">/*该程序是从HDSF中读取文件最简单的方式，</span></div><div class="line"> * 即用java.net.URL对象打开数据流。</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DescURL</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//让Java程序识别Hadoop的HDFS url</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		URL.setURLStreamHandlerFactory(</div><div class="line">				<span class="keyword">new</span> FsUrlStreamHandlerFactory());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">			<span class="keyword">throws</span> MalformedURLException, IOException &#123;</div><div class="line">		InputStream in = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			in = <span class="keyword">new</span> URL(args[<span class="number">0</span>]).openStream();</div><div class="line">			IOUtils.copyBytes(in, System.out, <span class="number">4096</span>,<span class="keyword">false</span>);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			IOUtils.closeStream(in);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.itcast.hadoop.hdfs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.LocatedFileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.RemoteIterator;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsUtil</span> </span>&#123;</div><div class="line">	</div><div class="line">	FileSystem fs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//读取classpath下的xxx-site.xml 配置文件，并解析其内容，封装到conf对象中</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		</div><div class="line">		<span class="comment">//也可以在代码中对conf中的配置信息进行手动设置，会覆盖掉配置文件中的读取的值</span></div><div class="line">		conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://weekend110:9000/"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//根据配置信息，去获取一个具体文件系统的客户端操作实例对象</span></div><div class="line">		fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://weekend110:9000/"</span>),conf,<span class="string">"hadoop"</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 上传文件，比较底层的写法</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://weekend110:9000/"</span>);</div><div class="line">		</div><div class="line">		FileSystem fs = FileSystem.get(conf);</div><div class="line">		</div><div class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">"hdfs://weekend110:9000/aa/qingshu.txt"</span>);</div><div class="line">		</div><div class="line">		FSDataOutputStream os = fs.create(dst);</div><div class="line">		</div><div class="line">		FileInputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/qingshu.txt"</span>);</div><div class="line">		</div><div class="line">		IOUtils.copy(is, os);</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 上传文件，封装好的写法</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload2</span><span class="params">()</span> <span class="keyword">throws</span> Exception, IOException</span>&#123;</div><div class="line">		</div><div class="line">		fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"c:/qingshu.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"hdfs://weekend110:9000/aaa/bbb/ccc/qingshu2.txt"</span>));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 下载文件</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException </div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"hdfs://weekend110:9000/aa/qingshu2.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"c:/qingshu2.txt"</span>));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查看文件信息</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException </div><div class="line">	 * <span class="doctag">@throws</span> FileNotFoundException </div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IllegalArgumentException, IOException </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// listFiles列出的是文件信息，而且提供递归遍历</span></div><div class="line">		RemoteIterator&lt;LocatedFileStatus&gt; files = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">"/"</span>), <span class="keyword">true</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(files.hasNext())&#123;</div><div class="line">			</div><div class="line">			LocatedFileStatus file = files.next();</div><div class="line">			Path filePath = file.getPath();</div><div class="line">			String fileName = filePath.getName();</div><div class="line">			System.out.println(fileName);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"---------------------------------"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//listStatus 可以列出文件和文件夹的信息，但是不提供自带的递归遍历</span></div><div class="line">		FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"/"</span>));</div><div class="line">		<span class="keyword">for</span>(FileStatus status: listStatus)&#123;</div><div class="line">			</div><div class="line">			String name = status.getPath().getName();</div><div class="line">			System.out.println(name + (status.isDirectory()?<span class="string">" is dir"</span>:<span class="string">" is file"</span>));</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建文件夹</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException </div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, Exception </span>&#123;</div><div class="line"></div><div class="line">		fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/aaa/bbb/ccc"</span>));</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除文件或文件夹</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException </div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rm</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</div><div class="line"></div><div class="line">		fs.delete(<span class="keyword">new</span> Path(<span class="string">"/aa"</span>), <span class="keyword">true</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://weekend110:9000/"</span>);</div><div class="line">		</div><div class="line">		FileSystem fs = FileSystem.get(conf);</div><div class="line">		</div><div class="line">		FSDataInputStream is = fs.open(<span class="keyword">new</span> Path(<span class="string">"/jdk-7u65-linux-i586.tar.gz"</span>));</div><div class="line">		</div><div class="line">		FileOutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/jdk7.tgz"</span>);</div><div class="line">		</div><div class="line">		IOUtils.copy(is, os);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub Pages + Hexo搭建个人博客]]></title>
      <url>http://freeshow.github.io/2017/03/27/GitHub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>参考自：<a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">GitHub Pages + Hexo搭建博客</a></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>这是一篇使用GitHub Pages和Hexo搭建免费独立博客的总结。</p>
<p>如果你厌恶了第三方博客系统的广告的繁琐的事情或想搭建自己的个性博客，我想这是一个不错的选择。</p>
<p>如果你是一个小小白，可以先花时间了解下以下内容：</p>
<ul>
<li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li>
<li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li>
</ul>
<h1 id="二、必要配置"><a href="#二、必要配置" class="headerlink" title="二、必要配置"></a>二、必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。<br>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p>
<p>简单来说，User Pages 与 Project Pages的区别是：</p>
<ol>
<li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li>
<li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li>
<li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li>
<li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li>
</ol>
<h3 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li>
</ul>
<h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装Git"><a href="#2-2-1-安装Git" class="headerlink" title="2.2.1 安装Git"></a>2.2.1 安装Git</h3><p>在windows下安装git比较常用的有两种方式：</p>
<ol>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本的安装</a></li>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></li>
</ol>
<h3 id="2-2-2-配置Git"><a href="#2-2-2-配置Git" class="headerlink" title="2.2.2 配置Git"></a>2.2.2 配置Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p>
<ol>
<li>在GitHub右上方点击你的头像，选择”Settings”；</li>
<li>在右边的”Personal settings”侧边栏选择”Emails”；</li>
<li>选择”Keep my email address private”。</li>
</ol>
<p>这样，你就可以使用如下格式的email进行配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.email &quot;username@users.noreply.github.com&quot;</div></pre></td></tr></table></figure>
<h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li>
<li><a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">Setting your email in Git</a></li>
<li><a href="https://help.github.com/articles/keeping-your-email-address-private/" target="_blank" rel="external">Keeping your email address private</a></li>
</ul>
<h2 id="2-3-Git与GitHub"><a href="#2-3-Git与GitHub" class="headerlink" title="2.3 Git与GitHub"></a>2.3 Git与GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。<br>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p>
<h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p>
<p>(1) 检查电脑是否已经有SSH keys。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div><div class="line"># Lists the files in your .ssh directory, if they exist</div></pre></td></tr></table></figure></p>
<p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p>
<p>(2) 如果没有SSH key，则生成新的SSH key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line"># Creates a new ssh key, using the provided email as a label</div></pre></td></tr></table></figure>
<p>之后一路回车即可。</p>
<p>(3) 在GitHub添加SSH key。</p>
<p>首先，拷贝key到粘贴板：即将<code>~/.ssh/id_rsa.pub</code>中的内容拷贝到粘贴板。<br>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。</p>
<p>(4)相关资料</p>
<ul>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li>
</ul>
<h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如F：\Hexo），点击鼠标右键选择Git bash，输入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p>
<p>该命令会在目标文件夹内建立网站所需要的所有文件。完成后，文件夹目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json	#所需依赖包文件</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   └── _posts</div><div class="line">└── themes</div><div class="line">|   └── landscape</div></pre></td></tr></table></figure></p>
<p>接下来是安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>会安装<code>package.json</code>中的默认依赖包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># package.json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;hexo&quot;: &#123;</div><div class="line">    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class="line">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g	#hexo generate</div><div class="line">$ hexo s	#hexo server</div></pre></td></tr></table></figure></p>
<h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
</ul>
<h1 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h1><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p>
<p>3.1 使用默认theme</p>
<p>我们继续使用上面的文件夹F:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p>
<p>默认生成的_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure></p>
<p>修改后的_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</div><div class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</div></pre></td></tr></table></figure></p>
<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>然后，执行下列指令即可完成部署：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p>
<h2 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h2><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。<br>详细步骤可以参考网上的指南。</p>
<p>landscape主题是Hexo自带的主题，不需要自己下载。</p>
<p>推荐两款比较好用的主题，NexT和Yelee</p>
<h1 id="四、优化和部署"><a href="#四、优化和部署" class="headerlink" title="四、优化和部署"></a>四、优化和部署</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。<br>所以，我利用了分支！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<h2 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h2><p>下面以我的博客作为例子详细地讲述。</p>
<p>在本地电脑F盘下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#第1步：</div><div class="line">mkdir hexo	//创建hexo文件夹</div><div class="line">cd hexo</div><div class="line"></div><div class="line">#第2步：</div><div class="line">hexo init</div><div class="line"></div><div class="line">#第3步:</div><div class="line">git@github.com:MOxFIVE/hexo-theme-yelee.git theme/yelee		#使用yelee主题</div><div class="line">cd theme/yelee	</div><div class="line">git remote rm origin	#删除yelee本地仓库与远程仓库的关联</div><div class="line">rm -rf .git		#删除yelee本地仓库的`.git`文件夹，事情称为普通文件夹</div><div class="line"></div><div class="line">#第4步</div><div class="line">#配置主题文件等 上面已经讲了，或者参考其他资料</div><div class="line">......</div><div class="line"></div><div class="line">#第5步：</div><div class="line">#修改配置文件中的deploy属性</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</div><div class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</div><div class="line"></div><div class="line">#第6步：</div><div class="line">hexo d	#发布网站到GitHub中的master分支</div><div class="line">#现在就可以登录 `http:username.github.io访问自己的网站了。</div><div class="line"></div><div class="line">#第7步：使用backup分支备份博客文件，以便可以在其他电脑上写blog.</div><div class="line"></div><div class="line">#在F:\hexo目录下</div><div class="line">#将博客备份文件添加到git版本库中</div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;...&quot;</div><div class="line">#建立与远程仓库的连接</div><div class="line">git remote add origin git@github.com:freeshow/freeshow.github.io.git</div><div class="line"></div><div class="line">#这就是第3步中为什么将yelee仓库取消版本库的原因，因为要在它的父目录F:\hexo中创建版本库，</div><div class="line">如果不取消yelee主题的版本库，则提交hexo仓库时，没法将其下面的yelee仓库提交到远程仓库。</div><div class="line"></div><div class="line">#如果当yelee主题有更新时，在给yelee文件添加远程仓库连接，更新完yelee仓库时，在将yelee仓库的版本库删除即可。</div><div class="line"></div><div class="line">#将本地仓库推送到github下的backup分支。</div><div class="line">git push origin master:backup  #本地分支master到远程仓库backup</div></pre></td></tr></table></figure></p>
<p>注意：</p>
<blockquote>
<p>按上面步骤搭建完成后，需要将github中的backup分支设置成默认分支，<br>这样就可以在其他电脑上clone时，会默认把backup分支clone出来。</p>
</blockquote>
<h2 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h2><h3 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<p>依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;…&quot;</div><div class="line">git push origin master:backup</div></pre></td></tr></table></figure></p>
<p>将推送到GitHub（此时当前分支应为backup）.</p>
<p>然后才执行<code>hexo generate -d</code>发布网站到master分支上。</p>
<h3 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h3><p>当重装电脑之后，或者想在其他电脑上写博客，可以使用下列步骤：<br>1.使用git clone git@github.com:freeshow/freeshow.github.io.git拷贝仓库（默认分支为backup）；</p>
<p>2.在本地新拷贝的freeshow.github.io.git文件夹下通过Git bash依次执行下列指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div><div class="line">npm install</div><div class="line">#npm install hexo-deployer-git --save</div><div class="line">#在刚开始搭建博客时，已经执行了上面这条命令，则会将`hexo-deploy-get`依赖包，添加到`package.json`中去了，</div><div class="line">#故在上面执行`npm install`时，会安装`hexo-deploy-get`依赖包。</div><div class="line"></div><div class="line">#（记得，不需要hexo init这条指令）。hexo init会取消`freeshow.github.io.git`版本库</div><div class="line">#因为clone出的文件中已经包含建立网站所需要的所有文件。</div></pre></td></tr></table></figure></p>
<p>在其他电脑上clone出的backup分支，如果要日常修改，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;…&quot;</div><div class="line"></div><div class="line">#git push origin master:backup</div><div class="line">git push #本来就是从backup分支clone出来的，这样就相当于上面的提交到远程仓库。</div></pre></td></tr></table></figure></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>忙了一上午，才把上面的 <code>四、优化部署</code> 搞明白，现在想想主要是不太熟悉git操作导致的。</p>
<p>哎，祝大家能够搭建出自己个性的博客。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu Server 14.04 静态IP简单配置]]></title>
      <url>http://freeshow.github.io/2016/10/24/Ubuntu%20Server%2014.04%20%E9%9D%99%E6%80%81IP%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="一、配置静态IP地址"><a href="#一、配置静态IP地址" class="headerlink" title="一、配置静态IP地址"></a>一、配置静态IP地址</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/network/interfaces</div></pre></td></tr></table></figure>
<p>原内容有如下4行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto eth0</div><div class="line">iface eth0 inet dhcp</div></pre></td></tr></table></figure>
<p>以上表示默认使用DHCP分配IP，修改为如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line"># The primary network interface</div><div class="line">auto eth0</div><div class="line">#iface eth0 inet dhcp</div><div class="line"></div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.80.129</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.80.2</div></pre></td></tr></table></figure>
<p>保存退出。</p>
<blockquote>
<p>注意：只需要设置address（IP地址）、netmask（子网掩码）、gateway（网关）这三项就OK，network和broadcast这两项参数是可以不写的。</p>
<p>如果使用的是VMWare或Virtual Box虚拟机搭建的Ubuntu Server虚拟机，网关地址与本机电脑的网关相同即可。<br>IP跟本机电脑的IP在相同的地址段即可。</p>
</blockquote>
<center><img src="http://i.imgur.com/2eYCCJw.jpg" alt=""></center>

<h1 id="二、手动设置DNS服务器"><a href="#二、手动设置DNS服务器" class="headerlink" title="二、手动设置DNS服务器"></a>二、手动设置DNS服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/resolv.conf</div></pre></td></tr></table></figure>
<p>添加如下内容（这点所有Linux发行版都通用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 192.168.80.2</div><div class="line">nameserver 8.8.8.8</div></pre></td></tr></table></figure>
<p>保存退出。</p>
<p>注意：重启Ubuntu后发现又不能上网了，问题出在/etc/resolv.conf。重启后，此文件配置的dns又被自动修改为默认值。所以需要永久性修改DNS。方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/resolvconf/resolv.conf.d/base</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 192.168.80.2</div><div class="line">nameserver 8.8.8.8</div></pre></td></tr></table></figure>
<h1 id="三、重启networking服务使其生效"><a href="#三、重启networking服务使其生效" class="headerlink" title="三、重启networking服务使其生效"></a>三、重启networking服务使其生效</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/networking restart</div></pre></td></tr></table></figure>
<p>这样网络配置就永久生效。</p>
<p>然后重启电脑即可。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初步使用Scrapy]]></title>
      <url>http://freeshow.github.io/2016/10/21/%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8scrapy/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Scrapy-at-a-glance"><a href="#Scrapy-at-a-glance" class="headerlink" title="Scrapy at a glance"></a>Scrapy at a glance</h2><h3 id="爬取http-stackoverflow-com-questions-sort-votes页面的每个问题link-以及每个问题的第一答案的title-body-votes-tags"><a href="#爬取http-stackoverflow-com-questions-sort-votes页面的每个问题link-以及每个问题的第一答案的title-body-votes-tags" class="headerlink" title="爬取http://stackoverflow.com/questions?sort=votes页面的每个问题link,以及每个问题的第一答案的title,body,votes,tags."></a>爬取<a href="&#39;http://stackoverflow.com/questions?sort=votes&#39;">http://stackoverflow.com/questions?sort=votes</a>页面的每个问题link,以及每个问题的第一答案的title,body,votes,tags.</h3><h3 id="link对应的数据格式："><a href="#link对应的数据格式：" class="headerlink" title="link对应的数据格式："></a>link对应的数据格式：</h3><blockquote>
<p>response.css(‘.question-summary h3 a::attr(href)’)</p>
</blockquote>
<center><img src="http://i.imgur.com/Gnr3aKW.png" alt=""></center>

<h3 id="title对应的数据格式"><a href="#title对应的数据格式" class="headerlink" title="title对应的数据格式"></a>title对应的数据格式</h3><blockquote>
<p>response.css(‘h1 a::text’)</p>
</blockquote>
<center><img src="http://i.imgur.com/Nv6YohK.png" alt=""></center>

<h3 id="body对应的数据格式"><a href="#body对应的数据格式" class="headerlink" title="body对应的数据格式"></a>body对应的数据格式</h3><blockquote>
<p>response.css(‘.question .post-text’)</p>
</blockquote>
<center><img src="http://i.imgur.com/Wek8xhr.png" alt=""></center>

<h3 id="tags对应的数据格式"><a href="#tags对应的数据格式" class="headerlink" title="tags对应的数据格式"></a>tags对应的数据格式</h3><blockquote>
<p>response.css(‘.question .post-tag::text’)</p>
</blockquote>
<center><img src="http://i.imgur.com/tvGkwrv.png" alt=""></center>

<h3 id="votes对应的数据格式"><a href="#votes对应的数据格式" class="headerlink" title="votes对应的数据格式"></a>votes对应的数据格式</h3><blockquote>
<p>response.css(‘.question .vote-count-post::text’)</p>
</blockquote>
<center><img src="http://i.imgur.com/e3nPFYR.png" alt=""></center>


<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre><code># -*- coding: utf-8 -*-
import scrapy

class StackOverflowSpider(scrapy.Spider):
    # 爬虫名称
    name = &apos;stackoverflow&apos;
    #url入口
    #start_urls = [&apos;http://stackoverflow.com/questions?sort=votes&apos;]

    #解析start_urls页面的所有questions的url.
    def parse(self, response):
        #获取每个link
        for href in response.css(&apos;.question-summary h3 a::attr(href)&apos;):
            full_url = response.urljoin(href.extract())
            #使用回调函数callback=self.parse_question,
            # 解析questions中的每个question的url页面
            #将link页面的response传给parse_question()
               yield scrapy.Request(full_url, callback=self.parse_question)

    #解析每个link的response.
    def parse_question(self, response):
        #获取每个question页面中的title,votes,body,tags,link
        yield {
            #因为有好几个answer，因此只去第一个answer.
            &apos;title&apos;: response.css(&apos;h1 a::text&apos;).extract_first(),
            &apos;votes&apos;: response.css(&apos;.question .vote-count-post::text&apos;).extract_first(),
            &apos;body&apos;: response.css(&apos;.question .post-text&apos;).extract_first(),
            &apos;tags&apos;: response.css(&apos;.question .post-tag::text&apos;).extract(),
            &apos;link&apos;: response.url,
        }
</code></pre><h3 id="run-the-spider"><a href="#run-the-spider" class="headerlink" title="run the spider"></a>run the spider</h3><p>Put this in a file, name it to something like stackoverflow_spider.py and run the spider using the runspider command:</p>
<pre><code>scrapy runspider stackoverflow_spider.py -o top-stackoverflow-questions.json
</code></pre><p>When this finishes you will have in the top-stackoverflow-questions.json file a list of the most upvoted questions in StackOverflow in JSON format, containing the title, link, number of upvotes, a list of the tags and the question content in HTML, looking like this (reformatted for easier reading):</p>
<center><img src="http://i.imgur.com/xYwzioY.png" alt=""></center>


<h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p>scrapy runspider somefile.py -o xx.csv</p>
<ol>
<li>在somefile.py文件中找到已定义的爬虫，然后通过抓取引擎运行爬虫。</li>
<li>具体的抓取过程<ol>
<li>使用start_urls作为初始url生成Request，并默认把parse作为它的回调函数。</li>
<li>在parse中采用css选择器获得目标URL,并注册parser_question作为目标URL的回调函数。</li>
</ol>
</li>
</ol>
<p>背后的处理：</p>
<ol>
<li>请求被异步调度、处理</li>
<li>有一些参数可以控制过程，比如每个域名/ip的并发请求数、请求之间的下载延迟(或者自动调节)</li>
</ol>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><ol>
<li>内置的数据抽取器css/xpath/re</li>
<li>(scrapy shell)交互式控制台用于调试数据抽取方法</li>
<li>内置对结果输出的支持，可以保存为json,csv,xml等</li>
<li>自动处理编码</li>
<li>支持自定义扩展</li>
<li>丰富的内置扩展，可用于处理：<ol>
<li>cookies and session</li>
<li>Http features like comparession,authentication,caching</li>
<li>user-agent spoofing</li>
<li>robots.txt</li>
<li>craw depth restriction</li>
</ol>
</li>
<li>远程调试scrapy</li>
<li>更多的支持，比如可抓取xml,csv,可自动下载图片等等。 </li>
</ol>
<p><a href="http://www.cnblogs.com/python-life/articles/4511314.html" target="_blank" rel="external">http://www.cnblogs.com/python-life/articles/4511314.html</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬虫实例：从百度图片下载壁纸]]></title>
      <url>http://freeshow.github.io/2016/10/21/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%EF%BC%9A%E4%BB%8E%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%A3%81%E7%BA%B8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、数据分析"><a href="#一、数据分析" class="headerlink" title="一、数据分析"></a>一、数据分析</h2><p>百度图片壁纸网址：<a href="http://image.baidu.com/channel/wallpaper" target="_blank" rel="external">http://image.baidu.com/channel/wallpaper</a></p>
<h3 id="1-打开网址，点击国家地理-打开Chrom浏览器的开发者工具，选中图片图片元素。"><a href="#1-打开网址，点击国家地理-打开Chrom浏览器的开发者工具，选中图片图片元素。" class="headerlink" title="1.打开网址，点击国家地理,打开Chrom浏览器的开发者工具，选中图片图片元素。"></a>1.打开网址，点击<code>国家地理</code>,打开Chrom浏览器的开发者工具，选中图片图片元素。</h3><center><img src="http://i.imgur.com/8oPqY6E.png" alt=""></center>

<p>获得第一张图片的url为:<br><code>http://b.hiphotos.baidu.com/image/w%3D400/sign=937884d0d5ca7bcb7d7bc62f8e086b3f/64380cd7912397dd403225175b82b2b7d0a2875e.jpg</code></p>
<h3 id="2-右键–-gt-查看网页源代码，在网页源代码中查找第一张图片的url"><a href="#2-右键–-gt-查看网页源代码，在网页源代码中查找第一张图片的url" class="headerlink" title="2.右键–&gt;查看网页源代码，在网页源代码中查找第一张图片的url"></a>2.右键–&gt;查看网页源代码，在网页源代码中查找第一张图片的url</h3><center><img src="http://i.imgur.com/Pv4tcEz.png" alt=""></center>

<p>发现在网页源代码中没有找到第一张图片的url，说明图片的加载是通过Ajax实现的。即网页运行时加载的。故需要通过开发者工具的<code>Network</code>查找。</p>
<h3 id="3-打开开发者工具的Network-抓取网络请求。"><a href="#3-打开开发者工具的Network-抓取网络请求。" class="headerlink" title="3.打开开发者工具的Network,抓取网络请求。"></a>3.打开开发者工具的<code>Network</code>,抓取网络请求。</h3><p>找到一条网络请求的<code>Preview</code>，如下图：</p>
<center><img src="http://i.imgur.com/8Nof5qO.png" alt=""></center>

<p>里面的downloadUrl即为所要下载图片的url.<strong>即找到了请求图片的接口。</strong></p>
<p>查看其<code>Headers</code>,如下图：</p>
<center><img src="http://i.imgur.com/bAcfM1A.png" alt=""></center>

<p><strong>模仿其请求的url,params，返回的为json数据，里面包含图片的url.</strong></p>
<h2 id="二、爬虫实现"><a href="#二、爬虫实现" class="headerlink" title="二、爬虫实现"></a>二、爬虫实现</h2><pre><code># -*- coding: utf-8 -*-
import requests
import urllib
import os

#下载图片
def _download_image(url,floder=&apos;image&apos;):
    print(&apos;downloading %s&apos; % url)
    if not os.path.isdir(floder):
        os.mkdir(floder)

    #若url为http://b.hiphotos.baidu.com/image/pic/item/cefc1e178a82b90133597e20718da9773912ef29.jpg
    #返回为：cefc1e178a82b90133597e20718da9773912ef29.jpg
    def _fname(s):
        return os.path.join(floder,os.path.split(url)[1])

    fname = _fname(url)
    #下载图片
    urllib.urlretrieve(url,fname)

#获取所有图片的url,并下载图片。
def download_wallpaper():
    url = &apos;http://image.baidu.com/data/imgs&apos;
    params ={
        &apos;pn&apos;: 0,
        &apos;rn&apos;: 18,
        &apos;col&apos;: &apos;壁纸&apos;,
        &apos;tag&apos;: &apos;国家地理&apos;,
        &apos;tag3&apos;: &apos;&apos;,
        &apos;width&apos;:1440,
        &apos;height&apos;:900,
        &apos;ic&apos;:0,
        &apos;ie&apos;:&apos;utf8&apos;,
        &apos;oe&apos;:&apos;utf-8&apos;,
        &apos;image_id&apos;: &apos;&apos;,
        &apos;fr&apos;:&apos;channel&apos;,
        &apos;p&apos;:&apos;channel&apos;,
        &apos;from&apos;:1,
        &apos;app&apos;:&apos;img.browse.channel.wallpaper&apos;,
        &apos;t&apos;:0.884265049666543
    }
    r = requests.get(url,params=params)
    #print(r.json())
    imgs = r.json()[&apos;imgs&apos;]
    print(&apos;totally %d images.&apos; % len(imgs))
    for img in imgs:
        if &apos;downloadUrl&apos; in img:
            _download_image(img[&apos;downloadUrl&apos;])

if __name__ == &apos;__main__&apos;:
    download_wallpaper()
</code></pre><h2 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h2><pre><code># -*- coding: utf-8 -*-
import requests
import urllib
import os
import threading

#所有下载图片的url
gImageList = []
gCondition = threading.Condition()

#生产者从网站上获取图片url放进gImageList变量中
class Producer(threading.Thread):
    def run(self):
        global gImageList
        global gCondition

        print(&apos;%s: started.&apos; % threading.currentThread())

        imgs = download_wallpaper_list()
        gCondition.acquire()
        for img in imgs:
            if &apos;downloadUrl&apos; in img:
                gImageList.append(img[&apos;downloadUrl&apos;])
                print(&apos;%s: produce finished. Left: %s&apos; % (threading.currentThread(),len(gImageList)))

        gCondition.notify_all()
        gCondition.release()

#消费者从下载图片Url列表中下载图片。
class Consumer(threading.Thread):
    def run(self):
        print(&apos;%s: started.&apos; % threading.currentThread())
        while True:
            global gImageList
            global gCondition

            gCondition.acquire()
            print(&apos;%s: trying to download from pool,pool size is %s&apos; % \
              (threading.currentThread(),len(gImageList)))
            while len(gImageList) == 0:
                gCondition.wait()
            print(&apos;%s: waken up. pool size is %d.&apos; % \
                  (threading.currentThread(),len(gImageList)))
            url = gImageList.pop()
            gCondition.release()

            _download_image(url)


def _download_image(url,floder=&apos;image&apos;):
    print(&apos;downloading %s&apos; % url)
    if not os.path.isdir(floder):
        os.mkdir(floder)

    #若url为http://b.hiphotos.baidu.com/image/pic/item/cefc1e178a82b90133597e20718da9773912ef29.jpg
    #返回为：cefc1e178a82b90133597e20718da9773912ef29.jpg
    def _fname(s):
        return os.path.join(floder,os.path.split(url)[1])

    fname = _fname(url)
    #下载图片
    urllib.urlretrieve(url,fname)

#获取图片的url
def download_wallpaper_list():
    url = &apos;http://image.baidu.com/data/imgs&apos;
    params ={
        &apos;pn&apos;: 0,
        &apos;rn&apos;: 18,
        &apos;col&apos;: &apos;壁纸&apos;,
        &apos;tag&apos;: &apos;国家地理&apos;,
        &apos;tag3&apos;: &apos;&apos;,
        &apos;width&apos;:1440,
        &apos;height&apos;:900,
        &apos;ic&apos;:0,
        &apos;ie&apos;:&apos;utf8&apos;,
        &apos;oe&apos;:&apos;utf-8&apos;,
        &apos;image_id&apos;: &apos;&apos;,
        &apos;fr&apos;:&apos;channel&apos;,
        &apos;p&apos;:&apos;channel&apos;,
        &apos;from&apos;:1,
        &apos;app&apos;:&apos;img.browse.channel.wallpaper&apos;,
        &apos;t&apos;:0.884265049666543
    }
    r = requests.get(url,params=params)
    #print(r.json())
    imgs = r.json()[&apos;imgs&apos;]
    print(&apos;%s: totally %d images.&apos; % (threading.currentThread(),len(imgs)))
       return imgs

if __name__ == &apos;__main__&apos;:
    #1个生产者，即一个线程获取下载图片的url列表。
    Producer().start()

    #5个消费者：即5个线程下载图片。
    for i in range(5):
        Consumer().start()
</code></pre><h2 id="多线程爬虫的问题"><a href="#多线程爬虫的问题" class="headerlink" title="多线程爬虫的问题"></a>多线程爬虫的问题</h2><ul>
<li>python多线程的限制条件：python解析器的全局锁导致即使在多核CUP中，一个时间片内也只能有一个python程序在执行。</li>
<li>多线程只适合有IO等待的场景。如果是纯计算的场景，多线程无法优化性能。</li>
<li>使用多进程 multiprocessing</li>
<li>使用分布式</li>
<li>关于并发，有并发控制。关注twisted/gevent等基于事件的框架。</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫进阶]]></title>
      <url>http://freeshow.github.io/2016/10/21/%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Python爬虫架构选择"><a href="#Python爬虫架构选择" class="headerlink" title="Python爬虫架构选择"></a>Python爬虫架构选择</h2><h3 id="HTML解析器："><a href="#HTML解析器：" class="headerlink" title="HTML解析器："></a>HTML解析器：</h3><p>HTMLParser,BeautifulSoup4,XPath的lxml.<br>选择：XPath &gt; BeautifulSoup4 &gt; HTMLParser</p>
<h3 id="HTTP请求："><a href="#HTTP请求：" class="headerlink" title="HTTP请求："></a>HTTP请求：</h3><p>urllib,urllib2,requests<br>选择：requsets &gt;&gt; urllib2,urllib</p>
<h3 id="爬虫框架："><a href="#爬虫框架：" class="headerlink" title="爬虫框架："></a>爬虫框架：</h3><p>Scrapy</p>
<h2 id="Python爬虫进阶内容"><a href="#Python爬虫进阶内容" class="headerlink" title="Python爬虫进阶内容"></a>Python爬虫进阶内容</h2><ul>
<li>Scrapy爬虫框架</li>
<li>beautifulsoup解析器</li>
<li>Selector/XPath -&gt; Scrapy</li>
<li>并发<ul>
<li>twisted</li>
<li>gevent</li>
</ul>
</li>
<li>分布式爬虫<ul>
<li>任务队列：<a href="https://github.com/nvie/rq" target="_blank" rel="external">https://github.com/nvie/rq</a></li>
<li>任务队列与存储结合：<a href="https://github.com/rolando/scrapy-redis" target="_blank" rel="external">https://github.com/rolando/scrapy-redis</a></li>
</ul>
</li>
<li>数据处理：<a href="https://www.github.com/grangier/python-goose" target="_blank" rel="external">https://www.github.com/grangier/python-goose</a></li>
</ul>
<h2 id="不知道用爬虫来做什么？"><a href="#不知道用爬虫来做什么？" class="headerlink" title="不知道用爬虫来做什么？"></a>不知道用爬虫来做什么？</h2><p>知乎搜索一下：何明科</p>
<p><a href="https://www.zhihu.com/people/he-ming-ke" target="_blank" rel="external">https://www.zhihu.com/people/he-ming-ke</a></p>
<p>刷一下他的高票回答，你就可以知道原来用爬虫可以做这么酷的事情，顺便还把钱赚了。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬虫实例：唐诗三百首]]></title>
      <url>http://freeshow.github.io/2016/10/21/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%EF%BC%9A%E5%94%90%E8%AF%97%E4%B8%89%E7%99%BE%E9%A6%96/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>唐诗三百首网址：<a href="http://www.gushiwen.org/gushi/tangshi.aspx" target="_blank" rel="external">http://www.gushiwen.org/gushi/tangshi.aspx</a></p>
<ul>
<li>爬取诗词标题</li>
<li>爬取诗词作者</li>
<li>爬取诗词的网页地址</li>
<li>根据诗的网页地址爬取诗的正文。</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="分析数据格式"><a href="#分析数据格式" class="headerlink" title="分析数据格式"></a>分析数据格式</h3><p><strong>诗的标题，作者，url的数据格式如下</strong>：</p>
<center><img src="http://i.imgur.com/LQZ5D5l.png" alt=""></center>


<blockquote>
<p>如上图所示，所要提取的数据在<code>&lt;a&gt;</code>标签中，但是光靠<code>&lt;a&gt;</code>标签，不能确定这一行，</p>
<p>故需要借助<code>&lt;a&gt;</code>标签的父标签<code>&lt;div&gt;</code>来锁定<code>&lt;a&gt;</code>标签</p>
</blockquote>
<p><strong>诗的正文数据格式如下</strong>：</p>
<center><img src="http://i.imgur.com/FJlnhJu.png" alt=""></center>

<blockquote>
<p>根据<code>&lt;p&gt;</code>标签和其属性align即可确定诗的正文。</p>
</blockquote>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><pre><code># -*- coding: utf-8 -*-
import requests
from HTMLParser import HTMLParser
import re

def _attr(attrs,attrname):
    for attr in attrs:
        if attr[0] == attrname:
            return attr[1]
    return None

#解析诗的标题，作者，url
class PoemParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.tangshi_list = []
        self.in_div = False
        self.in_a = False
        #行宫(元稹)
        self.pattern = re.compile(r&apos;&apos;&apos;(.+) #匹配标题 group(1)
                                        \(  #匹配作者左边的括号
                                        (.+) #匹配作者 group(2)
                                        \) #匹配作者右边的括号
                                    &apos;&apos;&apos;,re.VERBOSE)
        self.current_poem = {}

    def handle_starttag(self, tag, attrs):
        #找到数据所在的&lt;div&gt;标签
        if tag == &apos;div&apos; and _attr(attrs,&apos;class&apos;) == &apos;guwencont2&apos;:
            self.in_div = True

        #找到&lt;div&gt;标签下的&lt;a&gt;标签
        if self.in_div and tag == &apos;a&apos;:
            self.in_a = True
            self.current_poem[&apos;url&apos;] = _attr(attrs,&apos;href&apos;)

    def handle_endtag(self, tag):
        if tag == &apos;div&apos;:
            self.in_div = False

        if tag == &apos;a&apos;:
            self.in_a = False

    def handle_data(self, data):
        #找到查找的数据
        if self.in_a:
            print data
            m = self.pattern.match(data)
            if m:
                self.current_poem[&apos;title&apos;] = m.group(1)
                self.current_poem[&apos;author&apos;] = m.group(2)
                self.tangshi_list.append(self.current_poem)
                self.current_poem = {}

#解析诗的正文
class PoemContentParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.content = []
        self.in_p = False

    def handle_starttag(self, tag, attrs):
        if tag == &apos;p&apos; and _attr(attrs,&apos;align&apos;) == &apos;center&apos;:
            self.in_p = True

    def handle_endtag(self, tag):
        if tag == &apos;p&apos;:
            self.in_p = False

    def handle_data(self, data):
        if self.in_p:
            self.content.append(data)


def retrive_tangshi_300():
    url = &apos;http://www.gushiwen.org/gushi/tangshi.aspx&apos;
    r = requests.get(url)
    p = PoemParser()
    p.feed(r.content)
    return p.tangshi_list

#根据poem的url并把诗的正文爬取出来
def down_poem(poem):
    url = poem[&apos;url&apos;]
    r = requests.get(url)
    p = PoemContentParser()
    p.feed(r.content)
    poem[&apos;content&apos;] = &apos;\n&apos;.join(p.content)

if __name__ == &apos;__main__&apos;:
    l = retrive_tangshi_300()
    print &apos;total %d poems.&apos; % len(l)
    for i in range(10):
    #print l[i]
    print (&apos;标题:%(title)s\t作者:%(author)s\tURL:%(url)s&apos; % (l[i]))

    #download all poem
    for i in range(len(l)):
        print &apos;%d downloading poem from: %s&apos; % (i,l[i][&apos;url&apos;])
        down_poem(l[i])
        print (&apos;标题:%(title)s\t作者:%(author)s\tURL:%(url)s\n%(content)s&apos; % (l[i]))
</code></pre></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用Eclipse插件运行自己的MapReduce程序]]></title>
      <url>http://freeshow.github.io/2016/10/21/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8eclipse%E6%8F%92%E4%BB%B6%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84MapReduce%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>在上一篇博客中：<a href="http://freeshow.github.io/2016/07/24/Windows下使用eclipse编译打包运行自己的MapReduce程序 Hadoop2.6.0/">Windows下使用eclipse编译打包运行自己的MapReduce程序</a> 中，开发完成的jar包需要上传到集群并使用相应的命令才能执行，这对不熟悉Linux的用户仍具有一定困难，而使用Hadoop Eclipse插件能很好的解决这一问题。</p>
<p>Hadoop Eclipse插件不仅能让用户直接在本地(Windows下)提交任务到Hadoop集群上，还能调试代码、查看出错信息和结果、使用图形化的方式管理HDFS文件。</p>
<p>Hadoop Eclipse插件需要单独从网上获取，获取后，可以自己重编译，也可直接使用编译好的release版本，经过测试，笔者发现从网上获取的插件可以直接使用，下面介绍如何获取和简单使用Eclipse插件。</p>
<h1 id="一、获取Hadoop-Eclipse插件"><a href="#一、获取Hadoop-Eclipse插件" class="headerlink" title="一、获取Hadoop Eclipse插件"></a>一、获取Hadoop Eclipse插件</h1><p>获取Hadoop Eclipse插件的地址是：<a href="https://github.com/winghc/hadoop2x-eclipse-plugin" target="_blank" rel="external">https://github.com/winghc/hadoop2x-eclipse-plugin</a></p>
<p>本文使用的是hadoop-2.6.4，所以使用的插件版本是<code>hadoop-eclipse-plugin-2.6.0.jar</code>。</p>
<h1 id="二、使用Hadoop-Eclipse插件"><a href="#二、使用Hadoop-Eclipse插件" class="headerlink" title="二、使用Hadoop Eclipse插件"></a>二、使用Hadoop Eclipse插件</h1><p>在Eclipse中使用插件非常简单，对于本文所使用的Eclipse Jee版本，只需要关闭Eclipse，把上述插件复制到 <code>Eclipse\dropins</code>目录下，在重新打开Eclipse即可。对于其他的Eclipse版本，可能需要复制到 <code>Eclipse\plugins</code> 目录下。</p>
<h2 id="1-查找Eclipse插件"><a href="#1-查找Eclipse插件" class="headerlink" title="1.查找Eclipse插件"></a>1.查找Eclipse插件</h2><p>启动Eclipse后，依次点击 Windows -&gt; Show View -&gt; Other。在新弹出的选项框中找到 <code>Map/Reduce Locations</code>， 选中后单击 OK 按钮。如下图所示：</p>
<center><img src="http://i.imgur.com/cIfR0k2.png" alt=""></center>

<p>单击 OK 后，在Eclipse下面的视图中会多出一栏 Map/Reduce Locations,如下图所示：</p>
<center><img src="http://i.imgur.com/Fue1psJ.png" alt=""></center>

<p>然后单击 Windows -&gt; Show View -&gt; Project Expore,在Eclipse左侧视图中会显示项目浏览器，项目浏览器中最上面会出现 DFS Locations,如下图所示：</p>
<center><img src="http://i.imgur.com/rSfDgLQ.png" alt=""></center>

<p>Map/Reduce Locations 用于建立连接到Hadoop 集群，当连接到Hadoop集群后，DFS Locations 则会显示相应集群 HDFS 中的文件。 Map/Reduce Locations 可以一次连接到多个Hadoop集群。</p>
<p>在 Map/Reduce Locations 下侧的空白处右击，在弹出的选项中选择 New Hadoop location,新建一个Hadoop连接，之后会弹出 Hadoop location 的详细设置窗口，如下图所示，各项解释如下。</p>
<ul>
<li>Location name: 当前建立的Hadoop location命名。</li>
<li>Map/Reduce Host: 为集群nomenode的IP地址。</li>
<li>Map/Reduce Port: MapReduce任务运行的通信端口号，客户端通过该地址向RM提交应用程序，杀死应用程序等。在yarn-site.xml中，默认值：${yarn.resourcemanager.hostname}:8032 </li>
<li>DFS Master Use M/R Master host: 选中表示采用和 Map/Reduce Host一样的主机。</li>
<li>DFS Naster Host： 为集群namenode的IP地址。</li>
<li>DFS Master Port: HDFS端口号，对应core-site.xml中定义的fs.defaultFS参数中的端口号，一般为9000;</li>
<li>User Name:设置访问集群的用户名，默认为本机的用户名。</li>
</ul>
<center><img src="http://i.imgur.com/okOUyOd.png" alt=""></center>

<p>配置完成后，单击Finish即可完成 Hadoop location的配置。在 Advanced parameters选项卡中还可以配置更多细节，但在实际使用中非常繁琐，<font color="red">相应的设置在代码中也可以进行，或者将Hadoop集群的配置文件放到Eclipse目录下，自动完整配置。</font> 这里只需要配置General选项卡的内容即可。这是，右侧Project Expore中的DFS locations中会多出一个子栏，名字为上面设置的Hadoop location名称。</p>
<h2 id="2-使用Eclipse插件管理HDFS"><a href="#2-使用Eclipse插件管理HDFS" class="headerlink" title="2.使用Eclipse插件管理HDFS"></a>2.使用Eclipse插件管理HDFS</h2><p>如果前面的配置参数没有问题，Hadoop集群也已经启动，那么Eclipse插件会自动连接Hadoop集群的HDFS，并获取HDFS的文件信息。变可以在上面操作HDFS。</p>
<p>需要注意的是，<code>Refresh</code>只对选中的项目有效，如果是文件，那么只刷新该文件的相关信息；如果是文件夹，则只刷新该文件夹下的内容。</p>
<p>还需要值的一提的是，为了安全，HDFS的权限检测机制默认是打开的，关闭之后，才能使用Eclipse插件上传文件到HDFS或者从HDFS中删除文件。</p>
<p>为了能在Windows上直接操作Hadoop集群中的HDFS:</p>
<p>第一步：<br>如果只在测试环境下，直接把Hadoop集群中的HDFS的权限检测关闭，可在hdfs-site.xml中添加如下变量，重启Hadoop集群即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二步：<br>修改Windows本地主机名</p>
<p>首先，“右击”桌面上图标“我的电脑”，选择“管理”，接着选择“本地用户和组”，展开“用户”，找到当前系统用户，修改其为“hadoop”。</p>
<p>最后，把电脑进行“注销”或者“重启电脑”，这样修改的用户名才有效。</p>
<p>选用上述任意一种方法以后（如果只是学习用，推荐第一种方法），就可以用Hadoop Eclipse插件提供的图像化界面操作Hadoop集群中的HDFS了。</p>
<center><img src="http://i.imgur.com/OhPtnF6.png" alt=""></center>



<h1 id="三、在Eclipse中提交任务到Hadoop"><a href="#三、在Eclipse中提交任务到Hadoop" class="headerlink" title="三、在Eclipse中提交任务到Hadoop"></a>三、在Eclipse中提交任务到Hadoop</h1><p>使用Eclipse插件可以直接在Eclipse环境下采用图形操作的方式提交任务，可以极大的简化了开发人员提交任务的步骤。</p>
<h2 id="1-配置本地Hadoop目录和输入输出目录"><a href="#1-配置本地Hadoop目录和输入输出目录" class="headerlink" title="1.配置本地Hadoop目录和输入输出目录"></a>1.配置本地Hadoop目录和输入输出目录</h2><p>首先，需要在Eclipse中设置本地Hadoop目录，假设安装hadoop的压缩包解压到本地 <code>F:\hadoop-2.6.4</code>下，在Eclipse界面单击 Windows -&gt; Preference 弹出设置界面，在设置界面找到 Hadoop Map/Reduce,在 Hadoop installation dierctory后面填上 <code>F:\hadoop-2.6.4</code></p>
<p>此处，需要注意，解压的 <code>F:\hadoop-2.6.4</code>源码包是在Linux环境下的源码包，与Windows不兼容。<br>在Windows下提交任务是会出现<code>Failed to lacation the winutils binary in hadoop binary path</code>,需要使用如下操作进行修复：<br>（1） 下载Window下的运行包<br> 将 <code>https://github.com/steveloughran/winutils/</code>项目下的 <code>hadoop-2.6.4/bin</code>目录下的所有文件覆盖掉<code>F:\hadoop-2.6.4\bin</code>下的所有文件。<br>（2） 复制<code>F:\hadoop-2.6.4\bin\hadoop.dll</code>文件到<code>C:\Windows\System32</code>中。<br>（3）配置环境变量 HADOOP_HOME为F:\hadoop-2.6.4,并将<code>$HADOOP_HOME\bin</code>添加到PATH环境变量中去。<br>（4）重启电脑。</p>
<p>在向Hadoop集群提交任务时，还需要指定输入/输出目录，在Eclipse中，可按如下操作进行设置：双击打开工程的某代码文件，在代码编辑区 右键 -&gt; Run As -&gt; Run Configurations. 在弹出的窗口中找到 Java Application -&gt; WordMain, 单击 WordMain 进入设置界面，单击 Arguments 切换选项卡，在 Program arguments 下的文本框中指定输入/输出目录。</p>
<p>第一行目录为输入目录，第二行目录为输出目录，格式为 <code>hdfs://[namenode_ip]:[端口号][路径]</code>。<br>注意，输出目录在HDFS中不能存在。如下图所示：</p>
<center><img src="http://i.imgur.com/4GjcRmn.png" alt=""></center>

<p>注意：上图中的master我已经在本地主机的hosts文件中映射为namenode的IP地址了。</p>
<h2 id="为WordCount添加配置信息。"><a href="#为WordCount添加配置信息。" class="headerlink" title="为WordCount添加配置信息。"></a>为WordCount添加配置信息。</h2><p>本次演示，使用 <a href="http://freeshow.github.io/2016/07/24/Windows下使用eclipse编译打包运行自己的MapReduce程序 Hadoop2.6.0/">Windows下使用eclipse编译打包运行自己的MapReduce程序 Hadoop2.6.0</a>中的例子。</p>
<p>添加配置信息有两种方法：<br>（1） 使用con.set()方法，设置配置信息。<br>（2） 将Hadoop集群中的修改过的配置文件，如<code>hdfs-site.xml</code>,<code>core-site.xml</code>,<code>mapred-site.xml</code>,<code>yarn-site.xml</code>,<code>log4j.properties</code>,复制到 WordCount 项目下的 src 文件夹下。</p>
<p>我比较喜欢用第二种方法。</p>
<font color="red"><strong>注意：</strong></font><br>配置信息完成后，在建立Job类对象后面也新增一行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">job.setJar(<span class="string">"wordcount.jar"</span>);</div></pre></td></tr></table></figure><br><br>用户告诉hadoop集群所要运行的Jar文件，所以需要先导出WordCount项目为jar文件，位置位于项目根目录下，因为上面代码<code>job.setJar(&quot;wordcount.jar&quot;);</code>查找目标的相对路径为WordCount项目根目录。<br><br><font color="red"><strong>运行时出现的一个问题:</strong></font>

<p>在通过Windows客户端向Linux服务器提交Hadoop应用时，会提示如下错误：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">org.apache.hadoop.util.Shell$ExitCodeException: /bin/bash: line <span class="number">0</span>: fg: no job control</div><div class="line"></div><div class="line">        at org.apache.hadoop.util.Shell.runCommand(Shell.java:<span class="number">505</span>)</div><div class="line">        at org.apache.hadoop.util.Shell.run(Shell.java:<span class="number">418</span>)</div><div class="line">        at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:<span class="number">650</span>)</div><div class="line">        at org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor.launchContainer(DefaultContainerExecutor.java:<span class="number">195</span>)</div><div class="line">        at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:<span class="number">300</span>)</div><div class="line">        at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:<span class="number">81</span>)</div><div class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">262</span>)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>)</div><div class="line">        at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure></p>
<p>解决方法是：<br>在向项目文件夹下的src目录下添加的配置文件<code>mapred-site.xml</code>中添加如下信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.app-submission.cross-platform<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>不需要向hadoop集群的<code>mapred-site.xml</code>配置文件中添加。</p>
<h2 id="3-提交任务"><a href="#3-提交任务" class="headerlink" title="3.提交任务"></a>3.提交任务</h2><p>提交任务非常简单，直接在代码编辑区 右键 -&gt; Run As -&gt; Run on Hadoop 即可。</p>
<h1 id="四、建立Map-Reduce项目"><a href="#四、建立Map-Reduce项目" class="headerlink" title="四、建立Map/Reduce项目"></a>四、建立Map/Reduce项目</h1><p>在应用Hadoop Eclipse插件后，可以直接在Eclipse中建立Map/Reduce项目，该项目会自动引用相应的jar包，路径为设置的本地<code>F:\hadoop-2.6.4</code>目录，所以在项目中不用再进行建立lib文件夹，复制jar包等操作。</p>
<p>在Eclipse中一次单击 File -&gt; New -&gt; Project,弹出项目类型选择对话框，选择 Map/Reduce Project,单击 Next ,在新弹出的对话框中填上项目名称：wordcount2 ，单击 Finish 即可。</p>
<p>之后再项目中建立一个<code>WordCount2</code>类，插入如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> wordcount2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount2</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</div><div class="line">		<span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></div><div class="line">				<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</div><div class="line">			<span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</div><div class="line">				word.set(itr.nextToken());</div><div class="line">				context.write(word, one);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line">		<span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,Context context)</span></span></div><div class="line">				<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(IntWritable val : values)&#123;</div><div class="line">				sum += val.get();</div><div class="line">			&#125;</div><div class="line">			result.set(sum);</div><div class="line">			context.write(key, result);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// Configuration 类: 读取hadoop的配置文件，如 site-core.xml...;</span></div><div class="line">				<span class="comment">//也可以用set方法重新设置(会覆盖): conf.set("fs.defaultFS","hdfs://master:9000")</span></div><div class="line">				Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">				</div><div class="line">				<span class="comment">//将命令行中的参数自动设置到变量conf中</span></div><div class="line">				String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf,args).getRemainingArgs();</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</div><div class="line">					System.err.println(<span class="string">"Usage: wordcount &lt;in&gt; &lt;out&gt;"</span>);</div><div class="line">					System.exit(<span class="number">2</span>);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			    Job job = <span class="keyword">new</span> Job(conf,<span class="string">"word count2"</span>);	<span class="comment">//新建一个job,传入配置信息</span></div><div class="line">				job.setJar(<span class="string">"wordcount2.jar"</span>);</div><div class="line">				job.setJarByClass(WordCount2.class);	<span class="comment">//设置主类</span></div><div class="line">				job.setMapperClass(TokenizerMapper.class);	<span class="comment">//设置Mapper类</span></div><div class="line">				job.setReducerClass(IntSumReducer.class);	<span class="comment">//设置Reducer类</span></div><div class="line">				job.setOutputKeyClass(Text.class);	<span class="comment">//设置输出类型</span></div><div class="line">				job.setOutputValueClass(IntWritable.class);	<span class="comment">//设置输出类型</span></div><div class="line">				FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));	<span class="comment">//设置输入文件</span></div><div class="line">				FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));	<span class="comment">//设置输出文件</span></div><div class="line">				</div><div class="line">				<span class="keyword">boolean</span> flag = job.waitForCompletion(<span class="keyword">true</span>);</div><div class="line">				System.out.println(<span class="string">"SUCCEED!"</span>+flag);	<span class="comment">//任务完成提示</span></div><div class="line">				System.exit(flag ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">				System.out.println();</div><div class="line">				</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后：<br>（1）在Eclipse设置输入/输出目录<br>（2）导出项目jar包，存储到工程目录下，即可提交任务 Run on Hadoop.</p>
<p>注意，使用Map/Reduce插件建立的项目在运行时控制台并没有日志输出，所以在上面的代码最后添加一行输出 <code>System.out.println(&quot;SUCCEED!&quot;+flag);</code>,当控制台最后输出<code>SUCCEED!true</code>时，表示任务运行成功，这是可以刷新 DFS Locations,会看到输出结果已经出来了。</p>
<p>本教程来自《Hadoop大数据处理技术基础与实战》–安俊秀 编著。</p>
<p>郑重声明：</p>
<p>在Windows下运行MapReduce程序，各种错误都有，如果有条件的话，建议在Linux下编程，Windows下实在麻烦。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XPath与多线程爬虫]]></title>
      <url>http://freeshow.github.io/2016/10/21/XPath%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="一、神器XPath的介绍和配置"><a href="#一、神器XPath的介绍和配置" class="headerlink" title="一、神器XPath的介绍和配置"></a>一、神器XPath的介绍和配置</h1><h2 id="1-XPath是什么"><a href="#1-XPath是什么" class="headerlink" title="1.XPath是什么"></a>1.XPath是什么</h2><ul>
<li>XPath 是一门语言</li>
<li>XPath可以在XML文档中查找信息</li>
<li>XPath支持HTML</li>
<li>XPath通过元素和属性进行导航</li>
<li>XPath可以用来提取信息</li>
<li>XPath比正则表达式厉害</li>
<li>XPath比正则表达式简单</li>
</ul>
<h2 id="2-如何安装使用XPath"><a href="#2-如何安装使用XPath" class="headerlink" title="2.如何安装使用XPath"></a>2.如何安装使用XPath</h2><ul>
<li>安装lxml库</li>
<li>from lxml import etree</li>
<li>Selector = etree.HTML(网页源代码)</li>
<li>Selector.xpath(一段神奇的符号)</li>
</ul>
<h1 id="二、神器XPath的使用"><a href="#二、神器XPath的使用" class="headerlink" title="二、神器XPath的使用"></a>二、神器XPath的使用</h1><h2 id="1-XPath与HTML结构"><a href="#1-XPath与HTML结构" class="headerlink" title="1.XPath与HTML结构"></a>1.XPath与HTML结构</h2><ul>
<li>树状结构</li>
<li>逐层展开</li>
<li>逐层定位</li>
<li>寻找独立节点</li>
</ul>
<h2 id="2-获取网页元素的Xpath"><a href="#2-获取网页元素的Xpath" class="headerlink" title="2.获取网页元素的Xpath"></a>2.获取网页元素的Xpath</h2><ul>
<li>手动分析法</li>
<li>Chrome生成法</li>
</ul>
<h2 id="3-应用XPath提取内容"><a href="#3-应用XPath提取内容" class="headerlink" title="3.应用XPath提取内容"></a>3.应用XPath提取内容</h2><ul>
<li>//定位根节点</li>
<li>/往下层寻找</li>
<li>提取文本内容：/text()</li>
<li>提取属性内容: /@xxxx</li>
</ul>
<h2 id="4-应用实例"><a href="#4-应用实例" class="headerlink" title="4.应用实例"></a>4.应用实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"></div><div class="line">html = <span class="string">'''</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head lang="en"&gt;</div><div class="line">    	&lt;meta charset="UTF-8"&gt;</div><div class="line">    	&lt;title&gt;测试-常规用法&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id="content"&gt;</div><div class="line">    		&lt;ul id="useful"&gt;</div><div class="line">        		&lt;li&gt;这是第一条信息&lt;/li&gt;</div><div class="line">        		&lt;li&gt;这是第二条信息&lt;/li&gt;</div><div class="line">        		&lt;li&gt;这是第三条信息&lt;/li&gt;</div><div class="line">    		&lt;/ul&gt;</div><div class="line">    		&lt;ul id="useless"&gt;</div><div class="line">        		&lt;li&gt;不需要的信息1&lt;/li&gt;</div><div class="line">        		&lt;li&gt;不需要的信息2&lt;/li&gt;</div><div class="line">        		&lt;li&gt;不需要的信息3&lt;/li&gt;</div><div class="line">    		&lt;/ul&gt;</div><div class="line"></div><div class="line">    		&lt;div id="url"&gt;</div><div class="line">        		&lt;a href="http://jikexueyuan.com"&gt;极客学院&lt;/a&gt;</div><div class="line">        		&lt;a href="http://jikexueyuan.com/course/" title="极客学院课程库"&gt;点我打开课程库&lt;/a&gt;</div><div class="line">    		&lt;/div&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">'''</div><div class="line"></div><div class="line">selector = etree.HTML(html)</div><div class="line"></div><div class="line"><span class="comment">#selector.xpath()返回列表。</span></div><div class="line"></div><div class="line"><span class="comment">#提取文本</span></div><div class="line">content = selector.xpath(<span class="string">'//ul[@id="useful"]/li/text()'</span>)</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> content:</div><div class="line">    <span class="keyword">print</span> each</div><div class="line">    </div><div class="line"><span class="comment"># 这是第一条信息</span></div><div class="line"><span class="comment"># 这是第二条信息</span></div><div class="line"><span class="comment"># 这是第三条信息</span></div><div class="line"></div><div class="line"><span class="comment">#提取属性</span></div><div class="line">link = selector.xpath(<span class="string">'//a/@href'</span>)</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> link:</div><div class="line">    <span class="keyword">print</span> each</div><div class="line">    </div><div class="line"><span class="comment"># http://jikexueyuan.com</span></div><div class="line"><span class="comment"># http://jikexueyuan.com/course/</span></div><div class="line"></div><div class="line">title = selector.xpath(<span class="string">'//a/@title'</span>)</div><div class="line"><span class="keyword">print</span> title[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment">#极客学院课程库</span></div></pre></td></tr></table></figure>
<h1 id="三、神器XPath的特殊用法"><a href="#三、神器XPath的特殊用法" class="headerlink" title="三、神器XPath的特殊用法"></a>三、神器XPath的特殊用法</h1><h2 id="1-以相同的字符开头"><a href="#1-以相同的字符开头" class="headerlink" title="1.以相同的字符开头"></a>1.以相同的字符开头</h2><ul>
<li>starts-with(@属性名称, 属性字符相同部分)</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-1"</span>&gt;</span>需要的内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-2"</span>&gt;</span>需要的内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testfault"</span>&gt;</span>需要的内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">```	</div><div class="line"></div><div class="line">- 应用实例</div><div class="line"></div><div class="line"></div><div class="line">```python</div><div class="line"></div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from lxml import etree</div><div class="line"></div><div class="line">html1 = '''</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-1"</span>&gt;</span>需要的内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-2"</span>&gt;</span>需要的内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testfault"</span>&gt;</span>需要的内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">'''</div><div class="line">selector = etree.HTML(html1)</div><div class="line"></div><div class="line">content = selector.xpath('//div[starts-with(@id,"test")]/text()')</div><div class="line"></div><div class="line">for each in content:</div><div class="line">    print each</div><div class="line"></div><div class="line"># 需要的内容1</div><div class="line"># 需要的内容2</div><div class="line"># 需要的内容3</div></pre></td></tr></table></figure>
<h2 id="2-标签套标签"><a href="#2-标签套标签" class="headerlink" title="2.标签套标签"></a>2.标签套标签</h2><ul>
<li>string(.)</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">“class3”</span>&gt;</span>美女，</div><div class="line">	<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>你的微信是多少？<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>应用实例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"></div><div class="line">html = <span class="string">'''</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head lang="en"&gt;</div><div class="line">        &lt;meta charset="UTF-8"&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id="test3"&gt;</div><div class="line">            我左青龙，</div><div class="line">            &lt;span id="tiger"&gt;</div><div class="line">                右白虎，</div><div class="line">                &lt;ul&gt;上朱雀，</div><div class="line">                    &lt;li&gt;下玄武。&lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">                老牛在当中，</div><div class="line">            &lt;/span&gt;</div><div class="line">            龙头在胸口。</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">'''</div><div class="line">selector = etree.HTML(html)</div><div class="line"></div><div class="line">content_1 = selector.xpath(<span class="string">'//div[@id="test3"]/text()'</span>)</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> content_1:</div><div class="line">    <span class="keyword">print</span> each</div><div class="line"></div><div class="line"><span class="comment">#显示效果</span></div><div class="line"><span class="comment">#    我左青龙，</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#    龙头在胸口。</span></div><div class="line"></div><div class="line">data = selector.xpath(<span class="string">'//div[@id="test3"]'</span>)[<span class="number">0</span>]</div><div class="line">info = data.xpath(<span class="string">'string(.)'</span>)</div><div class="line">content_2 = info.replace(<span class="string">'\n'</span>,<span class="string">''</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</div><div class="line"><span class="keyword">print</span> content_2</div><div class="line"></div><div class="line"><span class="comment">#显示效果</span></div><div class="line"><span class="comment">#我左青龙，右白虎，上朱雀，下玄武。老牛在当中，龙头在胸口。</span></div></pre></td></tr></table></figure>
<h1 id="四、Python并行化介绍与演示"><a href="#四、Python并行化介绍与演示" class="headerlink" title="四、Python并行化介绍与演示"></a>四、Python并行化介绍与演示</h1><h2 id="1-Python并行化介绍"><a href="#1-Python并行化介绍" class="headerlink" title="1.Python并行化介绍"></a>1.Python并行化介绍</h2><ul>
<li>多个线程同时处理任务</li>
<li>高效</li>
<li>快速</li>
</ul>
<h2 id="2-Map的使用"><a href="#2-Map的使用" class="headerlink" title="2.Map的使用"></a>2.Map的使用</h2><ul>
<li>map 函数一手包办了序列操作、参数传递和结果保存等一系列的操作。</li>
<li>from multiprocessing.dummy import Pool</li>
<li>pool = Pool(4)</li>
<li>results = pool.map(爬取函数, 网址列表)</li>
</ul>
<h2 id="3-使用实例"><a href="#3-使用实例" class="headerlink" title="3.使用实例"></a>3.使用实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsource</span><span class="params">(url)</span>:</span></div><div class="line">    html = requests.get(url)</div><div class="line"></div><div class="line">urls = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</div><div class="line">    newpage = <span class="string">'http://tieba.baidu.com/p/3522395718?pn='</span> + str(i)</div><div class="line">    urls.append(newpage)</div><div class="line"></div><div class="line">time1 = time.time()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> urls:</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    getsource(i)</div><div class="line">time2 = time.time()</div><div class="line"><span class="keyword">print</span> <span class="string">u'单线程耗时：'</span> + str(time2-time1)</div><div class="line"></div><div class="line">pool = ThreadPool(<span class="number">4</span>)</div><div class="line">time3 = time.time()</div><div class="line">results = pool.map(getsource, urls)</div><div class="line">pool.close()</div><div class="line">pool.join()</div><div class="line">time4 = time.time()</div><div class="line"><span class="keyword">print</span> <span class="string">u'并行耗时：'</span> + str(time4-time3)</div></pre></td></tr></table></figure>
<p>运行效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">http://tieba.baidu.com/p/3522395718?pn=1</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=2</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=3</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=4</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=5</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=6</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=7</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=8</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=9</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=10</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=11</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=12</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=13</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=14</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=15</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=16</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=17</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=18</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=19</div><div class="line">http://tieba.baidu.com/p/3522395718?pn=20</div><div class="line">单线程耗时：12.4940001965</div><div class="line">并行耗时：3.63199996948</div></pre></td></tr></table></figure></p>
<h1 id="五、实战–百度贴吧爬虫"><a href="#五、实战–百度贴吧爬虫" class="headerlink" title="五、实战–百度贴吧爬虫"></a>五、实战–百度贴吧爬虫</h1><ul>
<li>目标网站：<a href="http://tieba.baidu.com/p/3522395718" target="_blank" rel="external">http://tieba.baidu.com/p/3522395718</a></li>
<li>目标内容：跟帖用户名，跟帖内容，跟帖时间</li>
<li>涉及知识：    <ul>
<li>Requests获取网页</li>
<li>XPath提取内容</li>
<li>map实现多线程爬虫</li>
</ul>
</li>
</ul>
<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">towrite</span><span class="params">(contentdict)</span>:</span></div><div class="line">    f.write(<span class="string">u'回帖时间:'</span> + str(contentdict[<span class="string">'topic_reply_time'</span>]) + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">u'回帖内容:'</span> + unicode(contentdict[<span class="string">'topic_reply_content'</span>]) + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">u'回帖人:'</span> + contentdict[<span class="string">'user_name'</span>] + <span class="string">'\n\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(url)</span>:</span></div><div class="line">    html = requests.get(url)</div><div class="line">    selector = etree.HTML(html.text)</div><div class="line">    content_field = selector.xpath(<span class="string">'//*[@id="j_p_postlist"]/div'</span>)</div><div class="line">    item = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> content_field:</div><div class="line">        reply_info = json.loads(each.xpath(<span class="string">'@data-field'</span>)[<span class="number">0</span>].replace(<span class="string">'&amp;quot'</span>, <span class="string">''</span>))</div><div class="line">        author = reply_info[<span class="string">'author'</span>][<span class="string">'user_name'</span>]</div><div class="line">        reply_time = reply_info[<span class="string">'content'</span>][<span class="string">'date'</span>]</div><div class="line"></div><div class="line">        content = each.xpath(<span class="string">'div[@class="d_post_content_main"]/div/cc/div/text()'</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">print</span> content</div><div class="line">        <span class="keyword">print</span> reply_time</div><div class="line">        <span class="keyword">print</span> author</div><div class="line">        item[<span class="string">'user_name'</span>] = author</div><div class="line">        item[<span class="string">'topic_reply_content'</span>] = content</div><div class="line">        item[<span class="string">'topic_reply_time'</span>] = reply_time</div><div class="line">        towrite(item)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = ThreadPool(<span class="number">4</span>)</div><div class="line">    f = open(<span class="string">'content.txt'</span>, <span class="string">'wb'</span>)</div><div class="line">    page = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</div><div class="line">        newpage = <span class="string">'http://tieba.baidu.com/p/3522395718?pn='</span> + str(i)</div><div class="line">        page.append(newpage)</div><div class="line">        <span class="keyword">print</span> newpage</div><div class="line"></div><div class="line">    results = pool.map(spider, page)</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line">    f.close()</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">回帖时间:2015-01-11 20:49</div><div class="line">回帖内容:            大神在不？我这是啥情况啊</div><div class="line">回帖人:闫烁楠</div><div class="line"></div><div class="line">回帖时间:2015-01-11 20:49</div><div class="line">回帖内容:            我朋友可以拿国行5s黑色16g 2880 能想信么</div><div class="line">回帖人:超级恶魔的左手</div><div class="line"></div><div class="line">回帖时间:2015-01-11 20:51</div><div class="line">回帖内容:            桌面图标随意摆放 必须要越狱吗？</div><div class="line">回帖人:不足五分钟</div><div class="line"></div><div class="line">回帖时间:2015-01-11 20:52</div><div class="line">回帖内容:            这个是真的吗</div><div class="line">回帖人:莪嫒迩德莼</div><div class="line">......</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用eclipse编译打包运行自己的MapReduce程序 Hadoop2.6.0]]></title>
      <url>http://freeshow.github.io/2016/10/21/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8eclipse%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84MapReduce%E7%A8%8B%E5%BA%8F%20Hadoop2.6.0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<h1 id="一、相关文件准备"><a href="#一、相关文件准备" class="headerlink" title="一、相关文件准备"></a>一、相关文件准备</h1><h2 id="1-java-JDK-for-Windows"><a href="#1-java-JDK-for-Windows" class="headerlink" title="1. java JDK for Windows"></a>1. java JDK for Windows</h2><h2 id="2-hadoop-2-6-4-tar-gz-就是安装hadoop时使用的文件"><a href="#2-hadoop-2-6-4-tar-gz-就是安装hadoop时使用的文件" class="headerlink" title="2. hadoop-2.6.4.tar.gz 就是安装hadoop时使用的文件"></a>2. hadoop-2.6.4.tar.gz 就是安装hadoop时使用的文件</h2><h2 id="3-Eclipse-JEE版本"><a href="#3-Eclipse-JEE版本" class="headerlink" title="3. Eclipse JEE版本"></a>3. Eclipse JEE版本</h2><p><img src="http://i.imgur.com/dbjp1oz.png" alt=""></p>
<h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><h2 id="1-安装java并配置环境"><a href="#1-安装java并配置环境" class="headerlink" title="1.安装java并配置环境"></a>1.安装java并配置环境</h2><p>自己百度</p>
<h2 id="2-解压hadoop-2-6-4-tar-gz源文件"><a href="#2-解压hadoop-2-6-4-tar-gz源文件" class="headerlink" title="2.解压hadoop-2.6.4.tar.gz源文件"></a>2.解压hadoop-2.6.4.tar.gz源文件</h2><p>Hadoop源文件在整个开发过程中都会用到，因为很多依赖包都出自里面，用户可按自己的喜好选择位置，但路径层次最好不要太多，本文选在解压到E盘根目录下，即<code>E:\hadoop-2.6.4</code></p>
<h2 id="3-安装Eclipse"><a href="#3-安装Eclipse" class="headerlink" title="3.安装Eclipse"></a>3.安装Eclipse</h2><p>自己百度</p>
<h1 id="三、使用Eclipse创建一个Java工程"><a href="#三、使用Eclipse创建一个Java工程" class="headerlink" title="三、使用Eclipse创建一个Java工程"></a>三、使用Eclipse创建一个Java工程</h1><p>使用Eclipse创建一个名为<code>wordcound</code>的Java工程</p>
<h1 id="四、导入Hadoop的相关jar包"><a href="#四、导入Hadoop的相关jar包" class="headerlink" title="四、导入Hadoop的相关jar包"></a>四、导入Hadoop的相关jar包</h1><p>在编写MapReduce代码时，需要用到Hadoop源文件中的部分Jar包，就像在编写纯Java代码时需要使用Java自带的依赖包一样，所以这里需要把相应的Hadoop依赖包导入工程。</p>
<p>现在工程 wordcount上右键，在弹出的菜单中选择第一个 New（新建），在选择Folder(文件),名称填上lib; 然后在把下面目录下的jar包复制到lib文件夹下(之前把Hadoop源文件解压到E盘根目录下)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E:\hadoop-2.6.4\share\hadoop\common</div><div class="line">E:\hadoop-2.6.4\share\hadoop\common\lib</div><div class="line">E:\hadoop-2.6.4\share\hadoop\common\lib\hadoop-hdfs-2.6.4.jar</div><div class="line">E:\hadoop-2.6.4\share\hadoop\mapreduce</div><div class="line">E:\hadoop-2.6.4\share\hadoop\yarn</div></pre></td></tr></table></figure>
<p>导入Jar包后，还需要把这些jar包添加到工程的构建路径，否则工程并不能识别。选中所有的jar包然后单击右键，选择Build Path -&gt; Add to Build Path.</p>
<p>上面就是Eclipse导入jar包的其中一种方法，其他方法也可以，只要让Eclipse程序能够引用上面的Jar包即可。</p>
<h1 id="五、-MapReduce-代码实现"><a href="#五、-MapReduce-代码实现" class="headerlink" title="五、 MapReduce 代码实现"></a>五、 MapReduce 代码实现</h1><p>本代码演示 wordcount程序。</p>
<p>MapReduce代码实现并不难，这里要编写3个类，分别是WordMapper类、WordReducer类和WordMain驱动类，前面两个类分别实现相应的 Map 和 Reduce 方法，后面一个则是对任务的创建进行部署。</p>
<p>分别创建这3个类，并放入wordcount package下，目录结构如下：</p>
<p><img src="http://i.imgur.com/w9gmeGt.png" alt=""></p>
<h2 id="WordMapper-java"><a href="#WordMapper-java" class="headerlink" title="WordMapper.java"></a>WordMapper.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> wordcount;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="comment">//创建一个 WordMapper 类继承与 Mapper 抽象类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</div><div class="line">	<span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</div><div class="line">	</div><div class="line">	<span class="comment">//Mapper 抽象类的核心方法，三个参数</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key,	//首字符偏移量	 </span></span></div><div class="line">					  Text value, 	//文件的一行内容</div><div class="line">					  Context context)	<span class="comment">//Mapper端的上下文</span></div><div class="line">			<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		<span class="comment">//默认使用空格分隔</span></div><div class="line">		StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</div><div class="line">		<span class="keyword">while</span>(itr.hasMoreTokens())&#123;</div><div class="line">			word.set(itr.nextToken());</div><div class="line">			context.write(word, one);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>map函数实现了对传入值的解析，将value解析成<code>&lt;key, value&gt;</code>的形式，然后使用<code>context.write(word, one)</code>进行输出。</p>
<h2 id="WordReducer-java"><a href="#WordReducer-java" class="headerlink" title="WordReducer.java"></a>WordReducer.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> wordcount;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="comment">//创建一个 WordReducer 类继承与 Reducer 抽象类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</div><div class="line">	<span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();	<span class="comment">//记录词频</span></div><div class="line">	</div><div class="line">	<span class="comment">// Reducer 抽象类的核心方法，3个参数</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key,	//Map 端输出的 key 值</span></span></div><div class="line">						Iterable&lt;IntWritable&gt; values,	//Map 端输出的 Value 集合</div><div class="line">						Context context)	<span class="comment">//Reducer端上下文</span></div><div class="line">						<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span> (IntWritable var : values) &#123;	<span class="comment">//遍历 values 集合，并把值相加</span></div><div class="line">			sum += var.get();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		result.set(sum);	<span class="comment">//得到最终词频数</span></div><div class="line">		context.write(key, result);		<span class="comment">//写入结果</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>reduce方法中，将获取的values进行遍历累加，得到相应的key出现的次数，最后将结果写入HDFS。</p>
<h2 id="WordMain-java"><a href="#WordMain-java" class="headerlink" title="WordMain.java"></a>WordMain.java</h2><p>WordMain驱动类主要是在Job中设定相应的Mapper类和Reducer类(用户编写的类)，这样任务运行时才知道使用相应的类进行处理；WordMain驱动类还可以对MapReducer程序进行相应配置，让任务在Hadoop集群运行时按所定义的配置进行。其代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> wordcount;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordMain</span> </span></div><div class="line">&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span></div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		<span class="comment">// Configuration 类: 读取hadoop的配置文件，如 site-core.xml...;</span></div><div class="line">		<span class="comment">//也可以用set方法重新设置(会覆盖): conf.set("fs.defaultFS","hdfs://master:9000")</span></div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		</div><div class="line">		<span class="comment">//将命令行中的参数自动设置到变量conf中</span></div><div class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf,args).getRemainingArgs();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) </div><div class="line">		&#123;</div><div class="line">			System.err.println(<span class="string">"Usage: wordcount &lt;in&gt; &lt;out&gt;"</span>);</div><div class="line">			System.exit(<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		Job job = <span class="keyword">new</span> Job(conf,<span class="string">"word count"</span>);	<span class="comment">//新建一个job,传入配置信息</span></div><div class="line">		job.setJarByClass(WordMain.class);	<span class="comment">//设置主类</span></div><div class="line">		job.setMapperClass(WordMapper.class);	<span class="comment">//设置Mapper类</span></div><div class="line">		job.setReducerClass(WordReducer.class);	<span class="comment">//设置Reducer类</span></div><div class="line">		job.setOutputKeyClass(Text.class);	<span class="comment">//设置输出类型</span></div><div class="line">		job.setOutputValueClass(IntWritable.class);	<span class="comment">//设置输出类型</span></div><div class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));	<span class="comment">//设置输入文件</span></div><div class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));	<span class="comment">//设置输出文件</span></div><div class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);	<span class="comment">//等待完成退出</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类中的main方法就是MapReduce程序的入口，在main方法中，首先创建一个Configuration类对象conf用于保存所有的配置信息，该对象在创建时会读取所需要配置文件如 site-core.xml、hdfs-site.xml等，根据配置文件中的变量信息进行初始化，当然配置文件中的配置有时候并不是人们想要的，这时候可以调用Configuration类中的set方法进行覆盖，如想要修改Reducer的数量，可以使用如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conf.set(<span class="string">"mapreduce.job.reduces"</span>,<span class="string">"2"</span>);</div></pre></td></tr></table></figure>
<p>也不是所有的变量都可以修改，有时候集群管理员并不希望用户在应用程序中修改某变量的值，这时候会在相应变量后面添加final属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.task.io.sort.factor<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时候，Configuration类中在set上面的属性将不再起左右。</p>
<p>最后，main方法中创建一个Job类对象job,并传入配置信息conf和作业名称。之后对job对象进行相关设置，如Mapper类、Reducer类等。job对象就是最终的作业对象，它里面包含一个作业所需的所有信息。</p>
<p>至此，一个MapReduce程序便开发完成了。</p>
<h1 id="六、打包工程为jar包"><a href="#六、打包工程为jar包" class="headerlink" title="六、打包工程为jar包"></a>六、打包工程为jar包</h1><p>WordCount代码完成后，并不能直接在hadoop中运行，还需要将其打包成jvm所能执行的二进制文件，即打包成.jar文件，才能被hadoop所有。</p>
<p>在WordCount项目上右击，选择Export(导出),在弹出的对话框中选择 JAR file，如下图所示，然后单击Next。之后会进入JAR依赖包过滤对话框，这里只选择src即可，把lib文件夹前的勾选去掉，因为lib中的依赖包本来就是复制的hadoop的源文件，在集群中已经包含了。之后选择一个保存位置，单击Finish即可。</p>
<p><img src="http://i.imgur.com/UGQVGbE.png" alt="选择Jar file"></p>
<p><img src="http://i.imgur.com/sMsTRJx.png" alt="jar依赖包过滤"></p>
<p>打包成wordcount.jar</p>
<p>WordMain驱动类为wordcount.WordMain。</p>
<h1 id="七、部署并运行"><a href="#七、部署并运行" class="headerlink" title="七、部署并运行"></a>七、部署并运行</h1><p>部署其实就把前面打包生成的wordcount.jar包放入集群中运行。hadoop一般会有多个节点，一个namenode节点和多个datanode节点，这里只需要把jar放入namenode中，并使用相应的hadoop命令即可，hadoop集群会把任务传送给需要运行任务的节点。wordcount.jar运行时需要有输入文本。</p>
<h2 id="1-创建测试文本并上传相关文件到namenode中"><a href="#1-创建测试文本并上传相关文件到namenode中" class="headerlink" title="1.创建测试文本并上传相关文件到namenode中"></a>1.创建测试文本并上传相关文件到namenode中</h2><p>为了方便，在桌面上创建测试文本file1.txt、file2.txt。内容分别为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File: file1.txt					File:file2.txt</div><div class="line">hadoop is very good				hadoop is very good</div><div class="line">mapreduce is very good			 mapreduce is very good</div></pre></td></tr></table></figure>
<p>然后使用WinSCP工具把上述txt文件和wordcount.jar文件一起上传到namenode节点的hadoop用户目录下，hadoop用户指的是安装运行hadoop集群的用户，本文的用户名就为hadoop.</p>
<p>注意：<br>上传结束后，需要查看上传文件的权限是否为hadoop:hadoop(hadoop用户和hadoop组)，如果不是则需要将上传文件的权限改为hadoop:hadoop,命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo chown -R hadoop:hadoop file1.txt</div><div class="line">sudo chown -R hadoop:hadoop file2.txt</div><div class="line">sudo chown -R hadoop:hadoop wordcount.jar</div></pre></td></tr></table></figure></p>
<p>如下图所示：</p>
<p><img src="http://i.imgur.com/qlFHGQP.png" alt=""></p>
<h2 id="2-上传测试文件到HDFS"><a href="#2-上传测试文件到HDFS" class="headerlink" title="2.上传测试文件到HDFS"></a>2.上传测试文件到HDFS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -mkdir input	//创建输入文件夹input</div><div class="line">hdfs dfa -put file* input	//将file1.txt file2.txt放入input文件夹中</div></pre></td></tr></table></figure>
<h2 id="3-在hadoop集群中运行WordCount"><a href="#3-在hadoop集群中运行WordCount" class="headerlink" title="3.在hadoop集群中运行WordCount"></a>3.在hadoop集群中运行WordCount</h2><p>测试文件已经准备完毕，现在要做的就是把任务提交到hadoop集群中。<br>在hadoop中运行jar任务需要使用的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop jar [jar文件位置] [jar 主类] [HDFS输入位置] [HDFS输出位置]</div></pre></td></tr></table></figure></p>
<ul>
<li>hadoop: hadoop脚本命令，如果要直接使用，必须添加相应bin路径到环境变量PATH中。</li>
<li>jar: 表示要运行的是一个基于Java的任务。</li>
<li>jar文件位置： 提供所要运行任务的jar文件位置，如果在当前操作目录下，可直接使用文件名。</li>
<li>jar主类： 提供入口函数所在的类，格式为[包名.]类名</li>
<li>HDFS输入位置： 指定输入文件在HDFS中的位置。</li>
<li>HDFS输出位置： 执行输出文件在HDFS中的存储位置，该位置必须不存在，否则任务不会运行，该机制就是为了防止文件被覆盖出现意外丢失。</li>
</ul>
<p>本例的操作命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoor jar wordcount.jar wordcount.WordMain input output</div></pre></td></tr></table></figure></p>
<p>提交任务后，hadoop集群便会开始执行任务，在任务的执行过程中，会出现一系列任务提示或信息进度，如下所示：</p>
<p><img src="http://i.imgur.com/IaQSzgL.png" alt=""></p>
<h2 id="4-查看任务结果"><a href="#4-查看任务结果" class="headerlink" title="4.查看任务结果"></a>4.查看任务结果</h2><p>任务结束保存在设定的输出目录中，如下图所示：</p>
<p><img src="http://i.imgur.com/3MBdhW4.png" alt=""></p>
<ul>
<li>_SUCCESS： 该文件中无任何内容，生成它主要是为了使hadoop集群检测并停止任务。</li>
<li>part-r-00000： 由Reducer生成的结果文件，一般来说一个Reducer生成一个，本例中只有一个Reducer运行，所以结果文件只有一个。</li>
</ul>
<p>可以使用hdfs dfs中的-cat命令查看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -cat output/*</div></pre></td></tr></table></figure>
<p>结果如下图所示：</p>
<p><img src="http://i.imgur.com/hooLx5f.png" alt=""></p>
<p>至此，一个MapReducer程序的开发过程就结束了。</p>
<h2 id="本文转自：《Hadoop大数据处理技术基础与实践》–安俊秀-编著"><a href="#本文转自：《Hadoop大数据处理技术基础与实践》–安俊秀-编著" class="headerlink" title="本文转自：《Hadoop大数据处理技术基础与实践》–安俊秀 编著"></a>本文转自：《Hadoop大数据处理技术基础与实践》–安俊秀 编著</h2></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python线程]]></title>
      <url>http://freeshow.github.io/2016/10/21/Python%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="金库例子"><a href="#金库例子" class="headerlink" title="金库例子"></a>金库例子</h3><h4 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h4><ul>
<li>采购需要进去拿钱买东西</li>
<li>销售会把卖东西得到的钱放入金库中</li>
<li>进门需要带一把很贵的纯金打造的钥匙</li>
</ul>
<h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ul>
<li>aquire: 上锁，获得金库钥匙</li>
<li>release: 解锁，把钥匙放回</li>
<li>threading.Lock: 钥匙带着进门的人身上，任何人要进去必须等待里面的人出来才可以进入。</li>
<li>threading.RLock: 钥匙放在部门经理那，同一个部门的人可以一起进来。</li>
</ul>
<h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><ul>
<li>threading.Semaphore: 多配了几把钥匙，每个钥匙都带着进去的人身上。</li>
<li>init_value: 有多少把钥匙</li>
</ul>
<h4 id="threading-Condition"><a href="#threading-Condition" class="headerlink" title="threading.Condition"></a>threading.Condition</h4><p>金库里的钱花光了，采购拿到钥匙后，也拿不到钱。这个时候可以使用条件来实现。当销售部门卖完产品拿到钱后，会把钱放进金库，才通知采购去取钱。</p>
<ul>
<li>wait,notify,notify_all</li>
<li>调用wait前需要获得资源锁。</li>
</ul>
<p>wait前，先需要acquire获得锁，进去查看有没有钱，如果没有钱，则wait.wait会自动释放锁，以便销售进入仓库放钱。当放入钱后，销售调用notify/notify_all通知采购，可以拿钱了。</p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul>
<li>和条件类似，不同的是不能像条件那样只通知一个人，对于金库的例子，当销售把钱放进仓库时，如果使用事件机制，那么所有排除的人都会知道金库有钱了，它们可以进去取钱。</li>
<li>另一个不同点是事件没有锁，只是单纯等待事件的发生。而条件是有锁机制的。</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><pre><code># -*- coding: utf-8 -*-
import threading
import time
import random

def worker_func():
    #print threading.current_thread()
    print(&apos;worker thread is started at %s&apos; % (threading.current_thread()))
    random.seed()
    time.sleep(random.random())
    print(&apos;worker thread is finished at %s&apos; % (threading.current_thread()))

def worker_func_lock(lock):
    lock.acquire()
    worker_func()
    lock.release()

#普通线程例子
def simple_thread_demo():
    for i in range(10):
        th = threading.Thread(target=worker_func)
        th.start()

#互斥锁例子
def thread_demo_lock():
       for i in range(10):
        th = threading.Thread(target=worker_func_lock,args=[gLock])
        th.start()

#信号量例子
def thread_demo_sem():
    for i in range(10):
        th = threading.Thread(target=worker_func_lock,args=[gSem])
        th.start()

#生成者
class Producer(threading.Thread):
    def run(self):
        print(&apos;%s is starting&apos; % (threading.current_thread()))
        while True:
            global  gMoney
            global gCondition

            gCondition.acquire()
            random.seed
            p = random.randint(500,1000)
            gMoney += p
            print(&apos;%s: Produce %s: Left %s&apos; % (threading.currentThread(),p,gMoney))
            time.sleep(random.random())

            gCondition.notify_all()
            gCondition.release()

#消费者
class Consumer(threading.Thread):
    def run(self):
        print(&apos;%s is starting&apos; % (threading.current_thread()))
        while True:
            global gMoney
            global gCondition

            gCondition.acquire()
            random.seed()
            c = random.randint(100, 200)
            print(&apos;%s: Trying to use %s: Left %s&apos; % (threading.currentThread(),c, gMoney))
            while gMoney &lt; c:
                gCondition.wait()
            gMoney -= c
            print(&apos;%s: Consume %s: Left %s&apos; % (threading.currentThread(),c, gMoney))
            time.sleep(random.random())
            gCondition.release()

def consumer_producer_demo():
    for i in range(10):
        Consumer().start()

    for i in range(1):
        Producer().start()

#互斥锁
gLock = threading.Lock()
#信号量：一次最多执行3个线程
gSem = threading.Semaphore(3)

#条件变量：生成者--消费者例子
gMoney = 1000
gCondition = threading.Condition()

if __name__ == &apos;__main__&apos;:
    #simple_thread_demo()
    #thread_demo_lock()
    #thread_demo_sem()
    consumer_producer_demo()
</code></pre></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop分布式集群安装]]></title>
      <url>http://freeshow.github.io/2016/10/21/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载声明：<br>本教程转载自：厦门大学数据库实验室 blog<br><a href="http://dblab.xmu.edu.cn/blog/install-hadoop/" target="_blank" rel="external">Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04</a><br><a href="http://dblab.xmu.edu.cn/blog/install-hadoop-cluster/" target="_blank" rel="external">Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS</a></p>
<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-使用VirtualBox创建三台Ubuntu-Server-14-04-64-位-虚拟机"><a href="#1-使用VirtualBox创建三台Ubuntu-Server-14-04-64-位-虚拟机" class="headerlink" title="1.使用VirtualBox创建三台Ubuntu Server 14.04(64 位)虚拟机"></a>1.使用VirtualBox创建三台Ubuntu Server 14.04(64 位)虚拟机</h2><p>首先，使用VirtualBox安装3台Ubuntu Server，主机名分别为master,slave1,slave2，各用户名均为hadoop.<br>如图所示：</p>
<p><img src="http://i.imgur.com/T4lUiC7.png" alt=""></p>
<p><img src="http://i.imgur.com/RLAaMQc.png" alt=""></p>
<h2 id="2-配置网络"><a href="#2-配置网络" class="headerlink" title="2.配置网络"></a>2.配置网络</h2><p>使用虚拟机安装的系统，需要更改网络连接方式为桥接（Bridge）模式，才能实现多个节点互连。<br>例如在VirturalBox中的设置如下图。此外，如果节点的系统是在虚拟机中直接复制的，要确保各个节点的Mac地址不同（可以点右边的按钮随机生成MAC地址，否则IP会冲突）：</p>
<p><img src="http://i.imgur.com/9bXwfCr.png" alt=""></p>
<h2 id="3-添加主机名与IP的对应关系"><a href="#3-添加主机名与IP的对应关系" class="headerlink" title="3.添加主机名与IP的对应关系"></a>3.添加主机名与IP的对应关系</h2><h3 id="1-各节点与IP对应关系："><a href="#1-各节点与IP对应关系：" class="headerlink" title="(1)各节点与IP对应关系："></a>(1)各节点与IP对应关系：</h3><table>
<thead>
<tr>
<th style="text-align:center">用户名</th>
<th style="text-align:center">主机名</th>
<th style="text-align:center">IP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hadoop</td>
<td style="text-align:center">master</td>
<td style="text-align:center">192.168.1.104</td>
</tr>
<tr>
<td style="text-align:center">hadoop</td>
<td style="text-align:center">slave1</td>
<td style="text-align:center">192.168.1.105</td>
</tr>
<tr>
<td style="text-align:center">hadoop</td>
<td style="text-align:center">slave2</td>
<td style="text-align:center">192.168.1.106</td>
</tr>
</tbody>
</table>
<h3 id="2-添加对应关系"><a href="#2-添加对应关系" class="headerlink" title="(2)添加对应关系"></a>(2)添加对应关系</h3><p>在 <code>/etc/hosts</code> 中将该映射关系填写上去即可，如下图所示：</p>
<blockquote>
<p>一般该文件中只有一个 127.0.0.1，其对应名为 localhost，如果有多余的应删除，特别是不能有 “127.0.0.1 master” 这样的记录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/hosts</div></pre></td></tr></table></figure>
<p>修改如下图：<br><img src="http://i.imgur.com/ENKuoXG.png" alt=""></p>
<blockquote>
<p>需要在所有节点上完成上述配置，<br>如上面讲的是master节点的配置，而在其他的slave节点上，也要对<code>/etc/hosts</code>（跟 master 的配置一样）文件进行修改！</p>
</blockquote>
<h3 id="3-测试各节点的连通性"><a href="#3-测试各节点的连通性" class="headerlink" title="(3)测试各节点的连通性"></a>(3)测试各节点的连通性</h3><p>配置好后需要在各个节点上执行如下命令，测试是否相互 ping 得通，如果 ping 不通，后面就无法顺利配置成功：<br>以master节点为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ping slave1 -c 3		# 只ping 3次，否则要按 Ctrl+c 中断</div><div class="line">ping slave2 -c 3</div></pre></td></tr></table></figure></p>
<p>如下图所示：<br><img src="http://i.imgur.com/AUPaYbF.png" alt=""></p>
<h1 id="二、安装SSH、配置SSH无密码登陆"><a href="#二、安装SSH、配置SSH无密码登陆" class="headerlink" title="二、安装SSH、配置SSH无密码登陆"></a>二、安装SSH、配置SSH无密码登陆</h1><p><strong>这个操作是要让 master 节点可以无密码 SSH 登陆到各个 slave 节点上。</strong></p>
<h2 id="1-安装SSH"><a href="#1-安装SSH" class="headerlink" title="1. 安装SSH"></a>1. 安装SSH</h2><p>集群、单节点模式都需要用到 SSH 登陆（类似于远程登陆，你可以登录某台 Linux 主机，并且在上面运行命令）。<br>因此，需要安装 SSH client 和 SSH server：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server openssh-client</div></pre></td></tr></table></figure>
<blockquote>
<p>安装完成后，就可以在Windows下使用SSH工具登录，上面三台虚拟机了。</p>
</blockquote>
<h2 id="2-master免密码登录本机"><a href="#2-master免密码登录本机" class="headerlink" title="2. master免密码登录本机"></a>2. master免密码登录本机</h2><p>安装完成后，可以使用如下命令登陆本机:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost</div></pre></td></tr></table></figure></p>
<p>此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码 hadoop，这样就登陆到本机了。如下图所示：</p>
<p><img src="http://i.imgur.com/hLkCf8M.png" alt=""></p>
<blockquote>
<p>此时，在~/下，如果没有<code>.ssh</code>文件夹，则会自动创建<code>~/.ssh</code>文件夹。</p>
</blockquote>
<p>但这样登陆是需要每次输入密码的，我们需要配置成SSH无密码登陆比较方便。</p>
<p>首先退出刚才的 ssh，就回到了我们原先的终端窗口，然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exit                           # 退出刚才的 ssh localhost</div><div class="line">cd ~/.ssh/                     # 若没有该目录，请先执行一次ssh localhost</div><div class="line">ssh-keygen -t rsa              # 会有提示，都按回车就可以</div><div class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys  # 加入授权</div></pre></td></tr></table></figure>
<p>此时再用 ssh localhost 命令，无需输入密码就可以直接登陆了.</p>
<blockquote>
<p>只在master节点上配置ssh免密码登录本机即可，其它slave节点不需要配置。</p>
</blockquote>
<h2 id="3-master免密码登录slaves"><a href="#3-master免密码登录slaves" class="headerlink" title="3. master免密码登录slaves"></a>3. master免密码登录slaves</h2><p>在 master 节点将上公匙传输到 slave1 节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub hadoop@slave1:~</div></pre></td></tr></table></figure></p>
<blockquote>
<p>scp 是 secure copy 的简写，用于在 Linux 下进行远程拷贝文件，类似于 cp 命令，不过 cp 只能在本机中拷贝。<br>执行 scp 时会要求输入 slave1 上 hadoop 用户的密码(hadoop)，输入完成后会提示传输完毕</p>
</blockquote>
<p>接着在 slave1 节点上，将 ssh 公匙加入授权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.ssh       # 如果不存在该文件夹需先创建，若已存在则忽略</div><div class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line">rm ~/id_rsa.pub    # 用完就可以删掉了</div></pre></td></tr></table></figure></p>
<p>如果有其他 slave 节点，也要执行将 master 公匙传输到 slave 节点、在 slave 节点上加入授权这两步。</p>
<p>这样，在 master 节点上就可以无密码 SSH 到各个 slave 节点了，可在 master 节点上执行如下命令进行检验，如下图所示：</p>
<p><img src="http://i.imgur.com/no5qaV8.png" alt=""></p>
<h1 id="三、安装Java环境"><a href="#三、安装Java环境" class="headerlink" title="三、安装Java环境"></a>三、安装Java环境</h1><p>查看我的博客：Ubuntu14.04安装JDK与配置环境变量</p>
<p>在各节点上都需要安装java环境。</p>
<h1 id="四、安装hadoop集群"><a href="#四、安装hadoop集群" class="headerlink" title="四、安装hadoop集群"></a>四、安装hadoop集群</h1><p>在master节点上：</p>
<h2 id="1-下载hadoop压缩包"><a href="#1-下载hadoop压缩包" class="headerlink" title="1.下载hadoop压缩包"></a>1.下载hadoop压缩包</h2><p>首先，去apache hadoop官网下载，hadoop压缩包，我下载的为：<code>hadoop-2.6.4.tar.gz</code></p>
<h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf hadoop-2.6.4.tar.gz -C /opt	#解压到/opt下</div><div class="line">sudo mv hadoop-2.6.4 hadoop		#重命名为hadoop</div></pre></td></tr></table></figure>
<p>此时，压缩包被解压到/opt/hadoop下</p>
<h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>集群/分布式模式需要修改 /opt/hadoop/etc/hadoop 中的6个配置文件，更多设置项可点击查看官方说明，这里仅设置了正常启动所必须的设置项： hadoop-env.sh、slaves、core-site.xml、hdfs-site.xml、mapred-site.xml、yarn-site.xml 。</p>
<p>(1)hadoop-env.sh</p>
<p>修改JAVA_HOME,改为绝对路径，hadoop有时不能读取<code>$JAVA_HOME</code>的值.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># The java implementation to use.</div><div class="line">export JAVA_HOME=/opt/java</div></pre></td></tr></table></figure></p>
<p>(2)slaves<br>文件 slaves，将作为 DataNode 的主机名写入该文件，每行一个，默认为 localhost，所以在伪分布式配置时，节点即作为 NameNode 也作为 DataNode。分布式配置可以保留 localhost，也可以删掉，让 Master 节点仅作为 NameNode 使用。</p>
<p>本教程让 master 节点仅作为 NameNode 使用，因此将文件中原来的 localhost 删除，添加两行内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slave1</div><div class="line">slave2</div></pre></td></tr></table></figure></p>
<p>(3)core-site.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">                &lt;value&gt;hdfs://master:9000&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">                &lt;value&gt;file:/opt/hadoop/tmp&lt;/value&gt;</div><div class="line">                &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>(4)hdfs-site.xml</p>
<p>文件 hdfs-site.xml，dfs.replication 一般设为 3，但我们有两个 slave 节点，所以 dfs.replication 的值还是设为 2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</div><div class="line">                &lt;value&gt;Master:50090&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">                &lt;value&gt;2&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</div><div class="line">                &lt;value&gt;file:/opt/hadoop/tmp/dfs/name&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</div><div class="line">                &lt;value&gt;file:/opt/hadoop/tmp/dfs/data&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>(5)mapred-site.xml</p>
<p>文件 mapred-site.xml （可能需要先重命名，默认文件名为 mapred-site.xml.template），然后配置修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">                &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</div><div class="line">                &lt;value&gt;Master:10020&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</div><div class="line">                &lt;value&gt;Master:19888&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>(6)yarn-site.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">                &lt;value&gt;Master&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h2 id="4-配置好后，将master上的-opt-Hadoop文件夹复制到各个节点上。"><a href="#4-配置好后，将master上的-opt-Hadoop文件夹复制到各个节点上。" class="headerlink" title="4.配置好后，将master上的/opt/Hadoop文件夹复制到各个节点上。"></a>4.配置好后，将master上的<code>/opt/Hadoop</code>文件夹复制到各个节点上。</h2><p>在master节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zcf ~/hadoop.master.tar.gz /opt/hadoop   # 先压缩再复制</div><div class="line">cd ~</div><div class="line">scp ./hadoop.master.tar.gz slave1:/home/hadoop	#复制到slave1上</div><div class="line">scp ./hadoop.master.tar.gz slave2:/home/hadoop	#复制到slave2上</div></pre></td></tr></table></figure>
<p>在slave1节点上执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxf ~/hadoop.master.tar.gz -C /opt</div><div class="line">sudo chown -R hadoop:hadoop /opt/hadoop</div></pre></td></tr></table></figure></p>
<p>在slave2节点上执行的与在slave1节点上执行的相同。</p>
<p>注意：</p>
<blockquote>
<p>需要保证/opt/hadoop权限属于hadoop:hadoop,如果不是执行：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R hadoop:hadoop /opt/hadoop</div></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img src="http://i.imgur.com/i2txxn9.png" alt=""></p>
<h2 id="五、运行hadoop集群"><a href="#五、运行hadoop集群" class="headerlink" title="五、运行hadoop集群"></a>五、运行hadoop集群</h2><h3 id="1-配置hadoop环境变量"><a href="#1-配置hadoop环境变量" class="headerlink" title="1.配置hadoop环境变量"></a>1.配置hadoop环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/profile</div></pre></td></tr></table></figure>
<p>在最后添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#set hadoop env</div><div class="line">export HADOOP_HOME=/opt/hadoop</div><div class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</div></pre></td></tr></table></figure></p>
<h3 id="2-启动hadoop集群"><a href="#2-启动hadoop集群" class="headerlink" title="2.启动hadoop集群"></a>2.启动hadoop集群</h3><p>首次启动需要先在 master 节点执行 NameNode 的格式化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs namenode -format       # 首次运行需要执行初始化，之后不需要。</div></pre></td></tr></table></figure></p>
<p>接着，可以启动 hadoop 了，启动需要在 master 节点上进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">start-dfs.sh</div><div class="line">start-yarn.sh</div><div class="line">mr-jobhistory-daemon.sh start historyserver</div></pre></td></tr></table></figure></p>
<p>通过命令 <code>jps</code> 可以查看各个节点所启动的进程。正确的话，在 master 节点上可以看到 NameNode、ResourceManager、SecondrryNameNode、JobHistoryServer 进程，如下图所示：</p>
<p><img src="http://i.imgur.com/VBZrruo.png" alt="通过jps查看master的Hadoop进程"></p>
<p>在 slave 节点可以看到 DataNode 和 NodeManager 进程，如下图所示：</p>
<p><img src="http://i.imgur.com/mZCwp1f.png" alt="通过jps查看slave的Hadoop进程"></p>
<p>缺少任一进程都表示出错。另外还需要在 master 节点上通过命令 hdfs dfsadmin -report 查看 DataNode 是否正常启动，如果 Live datanodes 不为 0 ，则说明集群启动成功。例如我这边一共有 2 个 Datanodes：</p>
<p><img src="http://i.imgur.com/K25fzmw.png" alt=""></p>
<p>也可以通过 Web 页面看到查看 DataNode 和 NameNode 的状态：<a href="http://master:50070/" target="_blank" rel="external">http://master:50070/</a>。如果不成功，可以通过启动日志排查原因。</p>
<p>由于本教程是在Windows上使用VirtualBox开启了master、slave1、slave2,3个虚拟机，如果要访问<a href="http://master:50070" target="_blank" rel="external">http://master:50070</a>,需要将Windows中的hosts文件中添加一行映射地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.1.104	master</div></pre></td></tr></table></figure></p>
<p>笔者用的是Win10 64位系统，hosts文件在<code>C:\Windows\System32\drivers\etc</code>下，用notepad++打开，添加上面一行即可。</p>
<p>配置完hosts文件后，打开浏览器，输入网址：<a href="http://master:50070" title="http://master:50070" target="_blank" rel="external">http://master:50070</a>，可以看到如下图效果：</p>
<p><img src="http://i.imgur.com/E7vpxN6.png" alt=""></p>
<h2 id="六、在hadoop集群上，执行分布式实例"><a href="#六、在hadoop集群上，执行分布式实例" class="headerlink" title="六、在hadoop集群上，执行分布式实例"></a>六、在hadoop集群上，执行分布式实例</h2><p>首先，在 HDFS 上创建用户目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -mkdir -p /user/hadoop</div></pre></td></tr></table></figure>
<p>将 /etc/hadoop/etc/hadoop 中的配置文件作为输入文件复制到分布式文件系统中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -mkdir input</div><div class="line">hdfs dfs -put /opt/hadoop/etc/hadoop/*.xml input</div></pre></td></tr></table></figure>
<p>通过查看 DataNode 的状态（占用大小有改变），输入文件确实复制到了 DataNode 中，如下图所示:</p>
<p><img src="http://i.imgur.com/ISH8yzd.png" alt="通过Web页面查看DataNode的状态"></p>
<p>接着就可以运行 MapReduce 作业了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop jar /opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.4.jar grep input output &apos;dfs[a-z.]+&apos;</div></pre></td></tr></table></figure>
<p>运行时的输出信息，会显示 Job 的进度,如下图所示：</p>
<p><img src="http://i.imgur.com/Rdi4gJN.png" alt=""></p>
<p>同样可以通过 Web 界面查看任务进度 <a href="http://master:8088/cluster" target="_blank" rel="external">http://master:8088/cluster</a>，在 Web 界面点击 “Tracking UI” 这一列的 History 连接，可以看到任务的运行信息，如下图所示：</p>
<p><img src="http://i.imgur.com/F2MIQSP.png" alt=""></p>
<p>执行完毕后的输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -cat output/*</div></pre></td></tr></table></figure></p>
<p>结果，如下图所示：</p>
<p><img src="http://i.imgur.com/2O4Gudh.png" alt=""></p>
<p>##最后，注意：</p>
<p>如果，上面配置教程中用到的安装包或文件，是从Windows上传到虚拟机的，需要更改上传文件的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R hadoop:hadoop 上传文件</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark安装和集群部署]]></title>
      <url>http://freeshow.github.io/2016/08/15/Spark%E5%AE%89%E8%A3%85%E5%92%8C%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="一、搭建Hadoop分布式集群"><a href="#一、搭建Hadoop分布式集群" class="headerlink" title="一、搭建Hadoop分布式集群"></a>一、搭建Hadoop分布式集群</h1><p>参考 <a href="http://freeshow.github.io/2016/07/24/Hadoop分布式集群安装/">Hadoop分布式集群安装</a> 进行搭建</p>
<h1 id="二、Spark安装和集群部署"><a href="#二、Spark安装和集群部署" class="headerlink" title="二、Spark安装和集群部署"></a>二、Spark安装和集群部署</h1><h2 id="1-安装Scala"><a href="#1-安装Scala" class="headerlink" title="1.安装Scala"></a>1.安装Scala</h2><p>Spark对配套的Scala版本有规定，所以要根据自己的实际情况来选择Scala的版本。</p>
<p>如下图所示：</p>
<center><img src="http://i.imgur.com/YYVi9s9.png" alt=""></center>

<p>由于Hadoop我们安装的是2.6.4，故我们选择上图中与Hadoop配套的Spark，因而选择Scala的版本为2.11。</p>
<p>我下载的Scala为<code>scala-2.11.8.tgz</code></p>
<p>(1)解压并放到相应的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf scala-2.11.8.tgz -C /opt/		#解压到/opt/目录下</div><div class="line">cd /opt/</div><div class="line">mv scala-2.11.8.tgz scala	#重名为scala</div></pre></td></tr></table></figure>
<p>(2)配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/profile</div></pre></td></tr></table></figure>
<p>在文件最后添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># set scala env</div><div class="line">export SCALA_HOME=/opt/scala</div><div class="line">export PATH=$PATH:$SCALA_HOME/bin</div></pre></td></tr></table></figure>
<p>(3)在终端输入<code>scala</code>，进入Scala的命令交互式界面，则安装成功。</p>
<p>注意：</p>
<blockquote>
<p>由于Spark需要运行在三台机器上，另外两台同样需要安装Scala。</p>
</blockquote>
<h2 id="2-安装Spark和集群部署"><a href="#2-安装Spark和集群部署" class="headerlink" title="2.安装Spark和集群部署"></a>2.安装Spark和集群部署</h2><p>Spark需要运行在三台机器上，这里先安装 Spark 到 master 这台机器上，另外两台的安装方法一致，也可以使用SSH的<code>scp</code>命令把master机器上安装好的Spark目录复制到另外两台机器相同目录下。</p>
<p>(1)下载并解压</p>
<p>从Spark官网下载Spark安装包，我下载的是<code>spark-2.0.0-bin-hadoop2.6.tgz</code>。下载完后解压，并存放到自己指定的存储目录下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf spark-2.0.0-bin-hadoop2.6.tgz -C /opt</div><div class="line">cd /opt</div><div class="line">mv spark-2.0.0-bin-hadoop2.6 spark</div></pre></td></tr></table></figure>
<p>(2)配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/profile</div></pre></td></tr></table></figure>
<p>在文件末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># set spark env</div><div class="line">export SPARK_HOME=/opt/spark</div><div class="line">export PATH=$PATH:$SPARK_HOME/bin</div></pre></td></tr></table></figure></p>
<p>并使配置文件生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<p>(3)配置Spark,需要配置<code>spark-env.sh</code>和<code>slaves</code>文件。</p>
<p>配置<code>spark-env.sh</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /opt/spark/conf</div><div class="line">cp spark-defaults.conf.template spark-env.sh</div><div class="line">vi spark-env.sh</div></pre></td></tr></table></figure></p>
<p>配置内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/opt/java</div><div class="line">export SCALA_HOME=/opt/scala</div><div class="line">export HADOOP_HOME=/opt/hadoop</div><div class="line">export HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop</div><div class="line">export SPARK_MASTER_IP=master</div></pre></td></tr></table></figure>
<blockquote>
<p>SPARK_MASTER_IP: Spark集群的Master节点的IP地址。</p>
</blockquote>
<p>配置slaves文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp slaves.template slaves</div><div class="line">vi slaves</div></pre></td></tr></table></figure>
<p>把Worker节点的主机名都添加进去，修改后的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slave1</div><div class="line">slave2</div></pre></td></tr></table></figure></p>
<p>(4) 按照上述配置，将Spark安装到另外两台机器上(slave1、slave2)</p>
<p>(5) 启动并测试集群的情况</p>
<p> 1)当前我们只使用Hadoop的HDFS文件系统，所以可以只启动Hadoop的HDFS文件系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start-dfs.sh</div></pre></td></tr></table></figure></p>
<p> 2)用Spark的sbin目录下的<code>start-all.sh</code>命令启动Spark集群，这里需要注意的是，在命令终端必须写成<code>./start-all.sh</code>，因为在Hadoop的sbin目录下也有一个<code>start-all.sh</code>可执行文件。</p>
<p> 3)此时使用JPS在master节点、slave1节点和slave2节点分别可以查看到新开启的Master和Worker进程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hadoop@master:~$ jps</div><div class="line">3570 NameNode</div><div class="line">3908 Master</div><div class="line">3978 Jps</div><div class="line">3790 SecondaryNameNode</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hadoop@slave1:~$ jps</div><div class="line">1826 Worker</div><div class="line">1939 Jps</div><div class="line">1689 DataNode</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hadoop@slave2:~$ jps</div><div class="line">1826 Worker</div><div class="line">1939 Jps</div><div class="line">1689 DataNode</div></pre></td></tr></table></figure>
<p> 4)可以进入Spark的WebUI页面，访问<code>master:8080</code>,如下如所示(8080为Spark的WebUI监听端口，7077为Spark集群的Master内部监听端口)。</p>
<center><img src="http://i.imgur.com/NzIiwOC.png" alt=""></center>

<p> 5)进入Spark的bin目录，使用<code>spark-shell</code>命令可以进入spark - shell控制台：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">hadoop@master:~$ spark-shell </div><div class="line">Setting default log level to &quot;WARN&quot;.</div><div class="line">To adjust logging level use sc.setLogLevel(newLevel).</div><div class="line">16/08/15 13:18:38 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</div><div class="line">16/08/15 13:18:40 WARN spark.SparkContext: Use an existing SparkContext, some configuration may not take effect.</div><div class="line">Spark context Web UI available at http://192.168.1.104:4040</div><div class="line">Spark context available as &apos;sc&apos; (master = local[*], app id = local-1471238319919).</div><div class="line">Spark session available as &apos;spark&apos;.</div><div class="line">Welcome to</div><div class="line">      ____              __</div><div class="line">     / __/__  ___ _____/ /__</div><div class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</div><div class="line">   /___/ .__/\_,_/_/ /_/\_\   version 2.0.0</div><div class="line">      /_/</div><div class="line">         </div><div class="line">Using Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_91)</div><div class="line">Type in expressions to have them evaluated.</div><div class="line">Type :help for more information.</div><div class="line"></div><div class="line">scala&gt;</div></pre></td></tr></table></figure>
<p>我们也可以在WebUI页面输入<code>http://master:4040</code>从Web的角度了解Spark-Shell。</p>
<p>这时，Spark集群部署成功。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive应用实例：WordCount]]></title>
      <url>http://freeshow.github.io/2016/08/13/Hive%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%EF%BC%9AWordCount/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>出自《大数据原理与应用》一书。</p>
<h1 id="词频统计任务要求："><a href="#词频统计任务要求：" class="headerlink" title="词频统计任务要求："></a>词频统计任务要求：</h1><p>首先，需要创建一个需要分析的输入数据文件<br>然后，编写HiveQL语句实现WordCount算法</p>
<p>#具体步骤如下：</p>
<h2 id="（1）创建input目录，其中input为输入目录。命令如下："><a href="#（1）创建input目录，其中input为输入目录。命令如下：" class="headerlink" title="（1）创建input目录，其中input为输入目录。命令如下："></a>（1）创建input目录，其中input为输入目录。命令如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /home/hadoop</div><div class="line">$ mkdir input</div></pre></td></tr></table></figure>
<p>##（2）在input文件夹中创建两个测试文件file1.txt和file2.txt，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd  /home/hadoop/input</div><div class="line">$ echo &quot;hello world&quot; &gt; file1.txt</div><div class="line">$ echo &quot;hello hadoop&quot; &gt; file2.txt</div></pre></td></tr></table></figure></p>
<p>##（3）进入hive命令行界面，编写HiveQL语句实现WordCount算法，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ hive</div><div class="line">hive&gt; create table docs(line string);</div><div class="line">hive&gt; load data inpath &apos;input&apos; overwrite into table docs;</div><div class="line">hive&gt;create table word_count as </div><div class="line">     select word, count(1) as count from</div><div class="line">     (select explode(split(line,&apos; &apos;))as word from docs) w</div><div class="line">     group by word</div><div class="line">     order by word;</div></pre></td></tr></table></figure></p>
<center><img src="http://i.imgur.com/nwNRG38.png" alt=""></center><br><center><img src="http://i.imgur.com/gup2ShW.png" alt=""></center>

<p><strong>执行完成后，用select语句查看运行结果如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hive&gt; select * from word_count;</div><div class="line">OK</div><div class="line">hadoop  1</div><div class="line">hello   2</div><div class="line">world   1</div><div class="line">Time taken: 0.111 seconds, Fetched: 3 row(s)</div><div class="line">hive&gt;</div></pre></td></tr></table></figure></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hive安装]]></title>
      <url>http://freeshow.github.io/2016/08/13/Hive%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>因为Hive是构建在Hadoop之上的，所以在安装Hive前，我们需要安装Hadoop环境。<br>Hadoop的安装可以参考<a href="http://freeshow.github.io/2016/07/24/Hadoop分布式集群安装/">Hadoop分布式集群安装</a></p>
<p>本教程使用Hive的本地模式进行安装，本地模式下Hive使用MySQL作为作为元数据库。</p>
<h1 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h1><h2 id="1-安装MySQL"><a href="#1-安装MySQL" class="headerlink" title="1.安装MySQL"></a>1.安装MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>
<h2 id="2-允许MySQL远程连接"><a href="#2-允许MySQL远程连接" class="headerlink" title="2.允许MySQL远程连接"></a>2.允许MySQL远程连接</h2><p>默认情况下，MySQL只允许本地登录，所以需要修改 my.cnf 配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/mysql/my.cnf</div><div class="line">#bind-address=127.0.0.1</div></pre></td></tr></table></figure>
<p>注释掉上一句即可在任意位置登录MySQL，然后重启MySQL：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
<h2 id="3-创建MySQL用户和数据库"><a href="#3-创建MySQL用户和数据库" class="headerlink" title="3.创建MySQL用户和数据库"></a>3.创建MySQL用户和数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#登录MySQL</div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line">#创建hive数据库</div><div class="line">create database hive;</div><div class="line"></div><div class="line">#创建MySQL用户hive</div><div class="line">grant all on hive.* to hive@&apos;%&apos; identified by &apos;hive&apos;;</div><div class="line">grant all on hive.* to hive@&apos;localhost&apos; identified by &apos;hive&apos;; </div><div class="line">flush privileges;</div><div class="line">exit                   #退出mysql</div><div class="line"></div><div class="line">#验证hive用户</div><div class="line">mysql -u hive -p hive        </div><div class="line">show databases;</div></pre></td></tr></table></figure>
<h1 id="二、安装Hive"><a href="#二、安装Hive" class="headerlink" title="二、安装Hive"></a>二、安装Hive</h1><h2 id="1-解压软件包"><a href="#1-解压软件包" class="headerlink" title="1.解压软件包"></a>1.解压软件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf apache-hive-2.1.0-bin.tar.gz -C /opt/ #解压到/opt目录下</div><div class="line">cd /opt</div><div class="line">sudo mv apache-hive-2.1.0 hive	#重名名为hive</div><div class="line">sudo chown -R hadoop:hadoop hive #修改hive目录拥有者</div></pre></td></tr></table></figure>
<h2 id="2-配置Hive的环境变量"><a href="#2-配置Hive的环境变量" class="headerlink" title="2.配置Hive的环境变量"></a>2.配置Hive的环境变量</h2><p>在 <code>/etc/profile</code>文件名末尾添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># set hive</div><div class="line">export HIVE_HOME=/opt/hive</div><div class="line">export PATH=$PATH:$HIVE_HOME/bin</div></pre></td></tr></table></figure>
<p>使profile发挥作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<h2 id="3-修改Hive配置文件"><a href="#3-修改Hive配置文件" class="headerlink" title="3.修改Hive配置文件"></a>3.修改Hive配置文件</h2><p>（1）修改hive-env.sh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /opt/hive/config</div><div class="line">cp hive-env.sh.template hive-env.sh</div><div class="line">sudo vi hive-env.sh</div></pre></td></tr></table></figure>
<p>在<code>hive-env.sh</code>文件末尾添加变量指向Hadoop的安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HADOOP_HOME=/opt/hadoop</div></pre></td></tr></table></figure></p>
<p>（2）修改hive-site.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp hive-default.xml.template hive-site.xml</div><div class="line">sudo vi hive-site.xml</div></pre></td></tr></table></figure></p>
<p>修改<code>hive-site.xml</code>的主要内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</div><div class="line">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/hive?createDatebaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.Multithreaded<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面配置的说明：</p>
<ul>
<li>hive.exec.scratchdir: 执行Hive操作访问HDFS时用于存储临时数据的目录，默认为/tmp/目录，通常设置为/tmp/hive/,目录权限设置为733.</li>
<li>hive.metastore.warehouse.dir: 执行Hive数据仓库操作的数据存储目录，设置为HDFS存储路径<code>hdfs://master_hostname:port/hive/warehouse</code>。</li>
<li>javax.jdo.option.ConnectionURL: 设置Hive通过JDBC模式连接MySQL数据库存储metastore内容。</li>
</ul>
<p>创建上述配置中的目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -mkdir /tmp/hive</div><div class="line">hdfs dfs -mkdir /hive/warehouse</div><div class="line"></div><div class="line">#分别对刚创建的目录添加组可写权限，允许同组用户进行数据分析操作</div><div class="line">hdfs dfs -chmod g+w /tmp</div><div class="line">hdfs dfs -chmod g+w /hive/warehouse</div></pre></td></tr></table></figure></p>
<h2 id="4-添加MySQL-JDBC驱动"><a href="#4-添加MySQL-JDBC驱动" class="headerlink" title="4.添加MySQL JDBC驱动"></a>4.添加MySQL JDBC驱动</h2><p>下载MySQL JDBC驱动，并放在 <code>$HIVE_HOME/lib</code>目录下</p>
<hr>
<p>经过上述Hive的基本安装和配置步骤后，在Linux命令提示符下输入hive命令即可进入Hive Shell交互模式环境中进行Hive相关的操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hive</div><div class="line">hive&gt;</div></pre></td></tr></table></figure>
<p>如果执行hive命令出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: </div><div class="line">Hive metastore database is not initialized. </div><div class="line">Please use schematool (e.g. ./schematool -initSchema -dbType ...) to create the schema. </div><div class="line">If needed, don&apos;t forget to include the option to auto-create the underlying database in your JDBC connection string (e.g. ?createDatabaseIfNotExist=true for mysql)</div></pre></td></tr></table></figure></p>
<p>可执行如下命令解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schematool -dbType mysql -initSchema</div></pre></td></tr></table></figure></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka集群安装]]></title>
      <url>http://freeshow.github.io/2016/07/27/Kafka%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="一、安装ZooKeeper集群"><a href="#一、安装ZooKeeper集群" class="headerlink" title="一、安装ZooKeeper集群"></a>一、安装ZooKeeper集群</h1><p>可以参考我的博客： <a href="http://freeshow.github.io/2016/07/26/ZooKeeper集群安装/">ZooKeeper集群安装</a></p>
<h1 id="二、-安装Kafka集群"><a href="#二、-安装Kafka集群" class="headerlink" title="二、 安装Kafka集群"></a>二、 安装Kafka集群</h1><h2 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h2><p>在master节点上：</p>
<p>去Apache Kafka官网下载压缩包，我下载的是 <code>kafka_2.11-0.10.0.0.tgz</code></p>
<p>解压到<code>/opt</code>目录下，并重命名为kafka<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf kafka_2.11-0.10.0.0.tgz -C /opt</div><div class="line">cd /opt</div><div class="line">sudo mv kafka_2.11-0.10.0.0 kafka</div></pre></td></tr></table></figure></p>
<h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h2><p>修改<code>server.properties</code>配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">broker.id=1		# 其他节点分别为broker.id=2和broker.id=3</div><div class="line">zookeeper.connect=master:2181,slave1:2181,slave2:2181    #设置各zookeeper地址</div></pre></td></tr></table></figure>
<p>将master节点上<code>/opt/kafka</code>发送到其他节点上去，并修改配置文件<code>server.properties</code>中broker.id的值。</p>
<h1 id="三、操作Kafka集群"><a href="#三、操作Kafka集群" class="headerlink" title="三、操作Kafka集群"></a>三、操作Kafka集群</h1><h2 id="1-在各节点上启动ZooKeeper"><a href="#1-在各节点上启动ZooKeeper" class="headerlink" title="1.在各节点上启动ZooKeeper"></a>1.在各节点上启动ZooKeeper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkServer.sh start</div></pre></td></tr></table></figure>
<h2 id="2-在各节点上启动Kafka："><a href="#2-在各节点上启动Kafka：" class="headerlink" title="2.在各节点上启动Kafka："></a>2.在各节点上启动Kafka：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-start.sh config/server.properties</div></pre></td></tr></table></figure>
<h2 id="3-在kafka集群中创建一个topic"><a href="#3-在kafka集群中创建一个topic" class="headerlink" title="3.在kafka集群中创建一个topic"></a>3.在kafka集群中创建一个topic</h2><p>以master节点为例，在其他节点上也可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --create --zookeeper master:2181 --replication-factor 3 --partitions 1 --topic test		#创建topic: test</div></pre></td></tr></table></figure></p>
<h2 id="4-用一个producer向某一个topic中写入消息"><a href="#4-用一个producer向某一个topic中写入消息" class="headerlink" title="4.用一个producer向某一个topic中写入消息"></a>4.用一个producer向某一个topic中写入消息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-producer.sh --broker-list master:9092 --topic test</div></pre></td></tr></table></figure>
<h2 id="5-用一个comsumer从某一个topic中读取信息"><a href="#5-用一个comsumer从某一个topic中读取信息" class="headerlink" title="5.用一个comsumer从某一个topic中读取信息"></a>5.用一个comsumer从某一个topic中读取信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-consumer.sh --zookeeper master:2181 --from-beginning --topic test</div></pre></td></tr></table></figure>
<p>此次，如果producer输入消息，则comsumer就是收到消息。</p>
<p>当然，这只是命令行的形式，实际开发中一般用 Java API编写。</p>
<h2 id="6-查看一个topic的分区及副本状态信息"><a href="#6-查看一个topic的分区及副本状态信息" class="headerlink" title="6.查看一个topic的分区及副本状态信息"></a>6.查看一个topic的分区及副本状态信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --describe --zookeeper master:2181 --topic test</div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper集群安装]]></title>
      <url>http://freeshow.github.io/2016/07/26/ZooKeeper%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>环境基于上篇博客的搭建环境： <a href="http://freeshow.github.io/2016/07/24/Hadoop分布式集群安装/">Hadoop分布式集群安装</a></p>
<p>有三台虚拟机：master,slave1,slave2</p>
<h1 id="一、安装步骤"><a href="#一、安装步骤" class="headerlink" title="一、安装步骤"></a>一、安装步骤</h1><p>1.下载ZooKeeper: 去 Apache ZooKeeper官网下载，我下载的为 <code>zookeeper-3.4.8.tar.gz</code>.</p>
<p>2.解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxf zookeeper-3.4.8.tar.gz -C /opt 	#解压到/opt目录下</div><div class="line">cd /opt</div><div class="line">sudo mv zookeeper-3.4.8 zookeeper		#重命名为zookeeper</div></pre></td></tr></table></figure>
<p>3.创建ZooKeeper的data目录</p>
<p>为了便于管理我创建了ZooKeeper安装目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/zookeeper/data</div></pre></td></tr></table></figure></p>
<p>4.创建myid文件</p>
<p>在<code>/opt/zookeeper/data</code>文件夹下创建文件<code>myid</code>,并输入内容 1。其余节点分别为2和3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/zookeeper/data</div><div class="line">vi myid 	#输入1,其他节点分别输入2和3</div></pre></td></tr></table></figure>
<p>5.配置文件</p>
<p>在conf目录下创建一个配置文件zoo.cfg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp zoo_sample.cfg zoo.cfg</div><div class="line">sudo vi zoo.cfg</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial </div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between </div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># the directory where the snapshot is stored.</div><div class="line"># do not use /tmp for storage, /tmp here is just </div><div class="line"># example sakes.</div><div class="line">dataDir=/opt/zookeeper/data/</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div><div class="line"># the maximum number of client connections.</div><div class="line"># increase this if you need to handle more clients</div><div class="line">#maxClientCnxns=60</div><div class="line">#</div><div class="line"># Be sure to read the maintenance section of the </div><div class="line"># administrator guide before turning on autopurge.</div><div class="line">#</div><div class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</div><div class="line">#</div><div class="line"># The number of snapshots to retain in dataDir</div><div class="line">#autopurge.snapRetainCount=3</div><div class="line"># Purge task interval in hours</div><div class="line"># Set to &quot;0&quot; to disable auto purge feature</div><div class="line">#autopurge.purgeInterval=1</div><div class="line"></div><div class="line">server.1=master:2888:3888</div><div class="line">server.2=slave1:2888:3888</div><div class="line">server.3=slave2:2888:3888</div></pre></td></tr></table></figure>
<h1 id="二、最低配置要求中必须配置的参数"><a href="#二、最低配置要求中必须配置的参数" class="headerlink" title="二、最低配置要求中必须配置的参数"></a>二、最低配置要求中必须配置的参数</h1><ol>
<li>clent: 监听客户端连接的端口</li>
<li>tickTime: 基本时间单元，这个时间作为ZooKeeper服务器之间或客户端与服务器之间维持心跳的时间间隔。</li>
<li>dataDir: 存储内存中数据库快照的位置。</li>
</ol>
<h1 id="三、集群配置"><a href="#三、集群配置" class="headerlink" title="三、集群配置"></a>三、集群配置</h1><ol>
<li>initLimit: 此配置表示，允许follower(相对于Leader而言的“客户端”)连接并同步到Leader的初始化连接时间。</li>
<li>syncLimit: 此配置项表示Leader和Follower之间发送消息时，请求和应答得时间长度。</li>
<li>server.A=B: C: D。 其中A是一个数字，表示这个是服务器的编号(myid文件中的数字)；B是这个服务器的IP地址；C是Leader选举的端口；D是ZooKeeper服务器之间的通信端口。</li>
<li>myid和zoo.cfg。除了zoo.cfg配置文件外，集群模式下还要配置一个文件myid,这个文件在dataDir目录下，这个文件里就有一个数据就是A的值，ZooKeeper启动时会读取这个文件，拿到里面的数据和zoo.cfg里面的配置信息做比较，从而判断是哪个server.</li>
</ol>
<h1 id="四、启动ZooKeeper"><a href="#四、启动ZooKeeper" class="headerlink" title="四、启动ZooKeeper"></a>四、启动ZooKeeper</h1><p>将 <code>/opt/zookeeper/bin</code>加入到Path文件路径中。</p>
<p>配置好之后，可以通过下面命令对ZooKeeper进行操作。</p>
<ol>
<li>在3个节点上分别执行命令 zkServer.sh start 启动 ZooKeeper。</li>
<li>在3个节点上分别执行命令 zkServer.sh status 检查节点状态。</li>
<li>在3个节点上分别执行命令 zkServer.sh stop 关闭 ZooKeeper。</li>
</ol>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫实例：登录豆瓣并修改签名]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%EF%BC%9A%E7%99%BB%E5%BD%95%E8%B1%86%E7%93%A3%E5%B9%B6%E4%BF%AE%E6%94%B9%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>登录豆瓣</li>
<li>修改签名</li>
</ul>
<h2 id="一、登录流程分析"><a href="#一、登录流程分析" class="headerlink" title="一、登录流程分析"></a>一、登录流程分析</h2><ul>
<li>向哪个url发送请求</li>
<li>发送哪些数据</li>
<li>有哪些特殊的头字段</li>
<li>验证码问题如何解决</li>
</ul>
<p>1.抓取豆瓣登录流程：</p>
<p>使用账号：xxxxxx 密码：xxxxxx 抓取得Network如下：</p>
<p>豆瓣登录界面网址：<code>https://www.douban.com/accounts/login</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">General</div><div class="line"></div><div class="line">Request URL:https://accounts.douban.com/login</div><div class="line">Request Method:POST</div><div class="line">Status Code:302 Moved Temporarily</div><div class="line">Remote Address:211.147.4.32:443</div><div class="line"></div><div class="line">---------------------------------------------------------------------------</div><div class="line"></div><div class="line">Response Headers</div><div class="line"></div><div class="line">Cache-Control:must-revalidate, no-cache, private</div><div class="line">Connection:keep-alive</div><div class="line">Content-Length:65</div><div class="line">Content-Type:text/plain</div><div class="line">Date:Sat, 11 Jun 2016 02:48:18 GMT</div><div class="line">Expires:Sun, 1 Jan 2006 01:00:00 GMT</div><div class="line">Keep-Alive:timeout=30</div><div class="line">Location:https://www.douban.com</div><div class="line">P3P:CP=&quot;IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT&quot;</div><div class="line">Pragma:no-cache</div><div class="line">Server:dae</div><div class="line">Set-Cookie:ue=&quot;877646746@qq.com&quot;; domain=.douban.com; expires=Sun, 11-Jun-2017 02:48:18 GMT; httponly</div><div class="line">Set-Cookie:dbcl2=&quot;146925119:/crpdV7NiKQ&quot;; path=/; domain=.douban.com; httponly</div><div class="line">Set-Cookie:as=&quot;deleted&quot;; max-age=0; domain=.douban.com; expires=Thu, 01-Jan-1970 00:00:00 GMT</div><div class="line">Strict-Transport-Security:max-age=15552000;</div><div class="line">X-Content-Type-Options:nosniff</div><div class="line">X-DAE-App:accounts</div><div class="line">X-DAE-Node:sindar15a</div><div class="line">X-Douban-Mobileapp:0</div><div class="line">X-Frame-Options:SAMEORIGIN</div><div class="line">X-Xss-Protection:1; mode=block</div><div class="line"></div><div class="line">----------------------------------------------------------------------------------</div><div class="line"></div><div class="line">Request Headers</div><div class="line"></div><div class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Accept-Encoding:gzip, deflate, br</div><div class="line">Accept-Language:en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4</div><div class="line">Cache-Control:max-age=0</div><div class="line">Connection:keep-alive</div><div class="line">Content-Length:138</div><div class="line">Content-Type:application/x-www-form-urlencoded</div><div class="line">Cookie:bid=PHjUxRzrHNk; _vwo_uuid_v2=56A954C0557184C73BBB3DF5C8D30C1D|409597a19056d473ebee60708893e9b8; ap=1; ll=&quot;118221&quot;; __utmt=1; ps=y; __utma=30149280.2019919087.1465354115.1465606255.1465612975.3; __utmb=30149280.2.10.1465612975; __utmc=30149280; __utmz=30149280.1465612975.3.3.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; dbcl2=&quot;146925119:KHEcD+nREDs&quot;; ck=9R18</div><div class="line">Host:accounts.douban.com</div><div class="line">Origin:https://accounts.douban.com</div><div class="line">Referer:https://accounts.douban.com/login</div><div class="line">Upgrade-Insecure-Requests:1</div><div class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36</div><div class="line">-------------------------------------------------------------</div><div class="line">Form Data</div><div class="line"></div><div class="line">ck:9R18</div><div class="line">source:None</div><div class="line">redir:https://www.douban.com</div><div class="line">form_email:877646746@qq.com</div><div class="line">form_password:song@3345616</div><div class="line">login:登录</div></pre></td></tr></table></figure>
<blockquote>
<p>即登录时，我们只需要模拟Request Headers中的头和Form Data中的post参数就可以登录了。</p>
<p>如果登录时，需要图片中的验证码，我们需要抽取验证码图片，然后手动填写上去。（半自动化方式）</p>
<p>当然，如果需要全自动化的方式，则需要用到机器学习中的知识，爬取所有验证码图片，然后训练模型，用机器学习的方法自动识别出验证码图片中的验证码。</p>
</blockquote>
<h2 id="二、修改签名流程分析"><a href="#二、修改签名流程分析" class="headerlink" title="二、修改签名流程分析"></a>二、修改签名流程分析</h2><ul>
<li>向哪个url发送请求</li>
<li>发送哪些数据</li>
<li>有哪些特殊的头字段</li>
<li>返回值长什么样</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">General</div><div class="line"></div><div class="line">Request URL:https://www.douban.com/j/people/146925119/edit_signature</div><div class="line">Request Method:POST</div><div class="line">Status Code:200 OK</div><div class="line">Remote Address:211.147.4.31:443</div><div class="line"></div><div class="line">--------------------------------------------------------------------------</div><div class="line">Response Headers</div><div class="line"></div><div class="line">Cache-Control:must-revalidate, no-cache, private</div><div class="line">Connection:keep-alive</div><div class="line">Content-Length:47</div><div class="line">Content-Type:application/json; charset=utf-8</div><div class="line">Date:Sat, 11 Jun 2016 06:06:37 GMT</div><div class="line">Expires:Sun, 1 Jan 2006 01:00:00 GMT</div><div class="line">Keep-Alive:timeout=30</div><div class="line">Pragma:no-cache</div><div class="line">Server:dae</div><div class="line">Strict-Transport-Security:max-age=15552000;</div><div class="line">X-DAE-App:sns</div><div class="line">X-DAE-Node:sindar25b</div><div class="line">X-Douban-Mobileapp:0</div><div class="line">X-Xss-Protection:1; mode=block</div><div class="line"></div><div class="line">-----------------------------------------------------------------------</div><div class="line">Request Headers</div><div class="line"></div><div class="line">Accept:application/json, text/javascript, */*; q=0.01</div><div class="line">Accept-Encoding:gzip, deflate, br</div><div class="line">Accept-Language:en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4</div><div class="line">Connection:keep-alive</div><div class="line">Content-Length:54</div><div class="line">Content-Type:application/x-www-form-urlencoded</div><div class="line">Cookie:bid=PHjUxRzrHNk; _vwo_uuid_v2=56A954C0557184C73BBB3DF5C8D30C1D|409597a19056d473ebee60708893e9b8; ll=&quot;118221&quot;; ps=y; ue=&quot;877646746@qq.com&quot;; dbcl2=&quot;146925119:/crpdV7NiKQ&quot;; ck=vkO3; ap=1; _pk_ref.100001.8cb4=%5B%22%22%2C%22%22%2C1465624694%2C%22https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DjUjRq0ldEsr3DVgcsr-2j6hhjW72VMHrsETjWL2QAee%26wd%3D%26eqid%3Dc07ebf420008142f00000003575b7a83%22%5D; __utmt=1; push_noty_num=0; push_doumail_num=0; _pk_id.100001.8cb4=cbb9346c7bb2e22f.1465354092.4.1465624911.1465613335.; _pk_ses.100001.8cb4=*; __utma=30149280.2019919087.1465354115.1465612975.1465624696.4; __utmb=30149280.4.10.1465624696; __utmc=30149280; __utmz=30149280.1465612975.3.3.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __utmv=30149280.14692</div><div class="line">Host:www.douban.com</div><div class="line">Origin:https://www.douban.com</div><div class="line">Referer:https://www.douban.com/people/146925119/</div><div class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36</div><div class="line">X-Requested-With:XMLHttpRequest</div><div class="line"></div><div class="line">----------------------------------------------------------------------------</div><div class="line">Form Data</div><div class="line"></div><div class="line">ck:vkO3   </div><div class="line">signature:顶顶顶顶</div></pre></td></tr></table></figure>
<blockquote>
<p>Form Data</p>
<p>ck:vkO3<br>signature:顶顶顶顶</p>
</blockquote>
<p>当不知道post data中的值如何获得时，往往需要到操作页面的html源码中去寻找，如上面的</p>
<blockquote>
<p>ck:vk03<br>如要的操作页面的html的代码中寻找，然后把它解析出来。</p>
</blockquote>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>注意：</p>
<p>本实例是基于登录时有图片验证码的，现在登录豆瓣好像不需要图片验证码了；</p>
<p>如果登录不需要验证码，则把验证码部分去掉即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">from HTMLParser import HTMLParser</div><div class="line">import requests</div><div class="line"></div><div class="line"></div><div class="line">def _attr(attrs, attrname):</div><div class="line">    for attr in attrs:</div><div class="line">        if attr[0] == attrname:</div><div class="line">            return attr[1]</div><div class="line">    return None</div><div class="line"></div><div class="line">#获得验证码信息</div><div class="line">def _get_captcha(content):</div><div class="line">    class CaptchaParser(HTMLParser):</div><div class="line">        def __init__(self):</div><div class="line">            HTMLParser.__init__(self)</div><div class="line">            self.captcha_id = None</div><div class="line">            self.captcha_url = None</div><div class="line"></div><div class="line">        def handle_starttag(self, tag, attrs):</div><div class="line">            if tag == &apos;input&apos; and _attr(attrs,&apos;type&apos;) == &apos;hidden&apos; and _attr(attrs,&apos;name&apos;) == &apos;captcha_id&apos;:</div><div class="line">                self.captcha_id = _attr(attrs,&apos;value&apos;)</div><div class="line">            if tag == &apos;image&apos; and _attr(attrs,&apos;id&apos;) == &apos;captcha_image&apos; and _attr(attrs,&apos;class&apos;) == &apos;captcha_image&apos;:</div><div class="line">                self.captcha_url == _attr(attrs,&apos;src&apos;)</div><div class="line"></div><div class="line">    p = CaptchaParser()</div><div class="line">    p.feed(content)</div><div class="line">    return p.captcha_id, p.captcha_url</div><div class="line"></div><div class="line">#获得ck属性的值</div><div class="line">def _get_ck(content):</div><div class="line">    class CKParser(HTMLParser):</div><div class="line">        def __init__(self):</div><div class="line">            HTMLParser.__init__(self)</div><div class="line">            self.ck = None</div><div class="line"></div><div class="line">        def handle_starttag(self, tag, attrs):</div><div class="line">            if tag == &apos;input&apos; and _attr(attrs,&apos;type&apos;) == &apos;hidden&apos; and _attr(attrs,&apos;name&apos;) == &apos;ck&apos;:</div><div class="line">                self.ck = _attr(attrs,&apos;value&apos;)</div><div class="line"></div><div class="line">    p =CKParser()</div><div class="line">    p.feed(content)</div><div class="line">    return p.ck</div><div class="line"></div><div class="line"></div><div class="line">class DoubanClient(object):</div><div class="line">    def __init__(self):</div><div class="line">        object.__init__(self)</div><div class="line">        headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36&apos;,</div><div class="line">                   &apos;origin&apos;:&apos;http/www.douban.com&apos;&#125;</div><div class="line">        #create requests session</div><div class="line">        self.session = requests.session()</div><div class="line">        #对session的头进行定制，这样以后，以后所有的请求都会包含上面headers中的数据</div><div class="line">        self.session.headers.update(headers)</div><div class="line"></div><div class="line">    #登录豆瓣</div><div class="line">    def login(self,username,password,source=&apos;index_nav&apos;,</div><div class="line">              redir = &apos;http://www.douban.com/&apos;,login = &apos;登录&apos;):</div><div class="line">        url = &apos;https://www.douban.com/accounts/login&apos;</div><div class="line">        #access login page to get captcha</div><div class="line">        #湖区登录界面中的验证码图片</div><div class="line">        #r = requests.get(url)</div><div class="line">        #应为登录和修改签名在同一个session中，故使用session.get(url)的方式登录</div><div class="line">        r = self.session.get(url)</div><div class="line">        (captcha_id,captcha_url) = _get_captcha(r.content)</div><div class="line">        if captcha_id:</div><div class="line">            captcha_solution = raw_input(&apos;please input solution for [%s]&apos; % captcha_url)</div><div class="line"></div><div class="line">        #post login request</div><div class="line">        data = &#123;&apos;from_email&apos;:username,&apos;from_passwd&apos;:password,&apos;source&apos;:source,</div><div class="line">                &apos;redir&apos;:redir,&apos;login&apos;:login&#125;</div><div class="line">        #将验证信息加入到post data中</div><div class="line">        if captcha_id:</div><div class="line">            data[&apos;captcha_id&apos;] = captcha_id</div><div class="line">            data[&apos;captcha_url&apos;] = captcha_url</div><div class="line"></div><div class="line">        headers = &#123;&apos;referer&apos;:&apos;http://www.douban.com/accounts/login?source=main&apos;,</div><div class="line">                   &apos;host&apos;:&apos;accounts.douban.com&apos;&#125;</div><div class="line">        #r = requests.post(url,data=data,headers=headers)</div><div class="line">        r = self.session.post(url,data=data,headers=headers)</div><div class="line">        print self.session.cookies.items()</div><div class="line">    </div><div class="line">    #编辑签名</div><div class="line">    def edit_signature(self,username,signature):</div><div class="line">        #access user&apos;s homepage</div><div class="line">        url = &apos;https://www.douban.com/people/%s/&apos; % username</div><div class="line">        r  = self.session.get(url)</div><div class="line">        #从操作页面的HTML代码中获取post data数据中参数ck的值</div><div class="line">        ck = _get_ck(r.content)</div><div class="line"></div><div class="line">        #post request to change signature</div><div class="line">        url = &apos;https://www.douban.com/j/people/%s/edit_signature&apos; % username</div><div class="line">        headers = &#123;&apos;referer&apos;:url,&apos;host&apos;:&apos;www.douban.com&apos;,</div><div class="line">                 &apos;x-requested-with&apos;:&apos;XMLHTTPRequest&apos;&#125;</div><div class="line">        data = &#123;&apos;ck&apos;:ck,&apos;signature&apos;:signature&#125;</div><div class="line">        r = self.session.post(url,data=data,headers=headers)</div><div class="line">        print r.content</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    c = DoubanClient()</div><div class="line">    c.login(&apos;877646746@qq.com&apos;,&apos;song@3345616&apos;)</div><div class="line">    c.edit_signature(&apos;146925119&apos;,&apos;Hello&apos;)</div></pre></td></tr></table></figure>
<h2 id="四、作业"><a href="#四、作业" class="headerlink" title="四、作业"></a>四、作业</h2><ul>
<li>登录知乎</li>
<li>修改个人简介</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫实例：用requests重构豆瓣热播电影爬虫]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%EF%BC%9A%E7%94%A8requests%E9%87%8D%E6%9E%84%E8%B1%86%E7%93%A3%E7%83%AD%E6%92%AD%E7%94%B5%E5%BD%B1%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h2><ul>
<li>用requests重新实现豆瓣热播电影（原先用的是urllib,urlib2）</li>
<li>增加功能：下载每一个电影的海报图片</li>
</ul>
<h2 id="分析海报图片在HTML代码中的格式"><a href="#分析海报图片在HTML代码中的格式" class="headerlink" title="分析海报图片在HTML代码中的格式"></a>分析海报图片在HTML代码中的格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;li id=&quot;2131940&quot; class=&quot;list-item&quot; data-title=&quot;魔兽&quot; data-score=&quot;8.2&quot; data-star=&quot;40&quot; data-release=&quot;2016&quot; data-duration=&quot;124分钟&quot; data-region=&quot;美国 中国大陆 加拿大&quot; data-director=&quot;邓肯·琼斯&quot; data-actors=&quot;崔维斯·费米尔 / 托比·凯贝尔 / 宝拉·巴顿&quot; data-category=&quot;nowplaying&quot; data-enough=&quot;True&quot; data-showed=&quot;True&quot; data-votecount=&quot;63034&quot; data-subject=&quot;2131940&quot;&gt;</div><div class="line">    &lt;ul class=&quot;&quot;&gt;</div><div class="line">        &lt;li class=&quot;poster&quot;&gt;</div><div class="line">            &lt;a href=&quot;https://movie.douban.com/subject/2131940/?from=playing_poster&quot; class=&quot;ticket-btn&quot; target=&quot;_blank&quot; data-psource=&quot;poster&quot;&gt;</div><div class="line">                &lt;img src=&quot;https://img1.doubanio.com/view/movie_poster_cover/mpst/public/p2345947329.jpg&quot; alt=&quot;魔兽&quot; rel=&quot;nofollow&quot; class=&quot;&quot;&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line"></div><div class="line">    &lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>每个电影的海报图片url在爬取的其电影用的<li>标签，的内部。</li></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> HTMLParser <span class="keyword">import</span> HTMLParser</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieParser</span><span class="params">(HTMLParser)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        HTMLParser.__init__(self)</div><div class="line">        self.movies=[]</div><div class="line">        self.in_movies = <span class="keyword">False</span></div><div class="line">    <span class="comment">#重载父类方法</span></div><div class="line">    <span class="comment">#循环处理feed进来的所有的tag,以及标签对应的attrs</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></div><div class="line">        <span class="comment">#给定tag的属性名attrname，获取属性的值</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_attr</span><span class="params">(attrList,attrname)</span>:</span></div><div class="line">            <span class="keyword">for</span> attr <span class="keyword">in</span> attrList:</div><div class="line">                <span class="keyword">if</span> attr[<span class="number">0</span>] == attrname:</div><div class="line">                    <span class="keyword">return</span> attr[<span class="number">1</span>]</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> tag == <span class="string">'li'</span> <span class="keyword">and</span> _attr(attrs,<span class="string">'data-title'</span>) \</div><div class="line">                <span class="keyword">and</span> _attr(attrs,<span class="string">'data-category'</span>) == <span class="string">'nowplaying'</span>:</div><div class="line">            movie = &#123;&#125;</div><div class="line">            movie[<span class="string">'title'</span>] = _attr(attrs,<span class="string">'data-title'</span>)</div><div class="line">            movie[<span class="string">'score'</span>] = _attr(attrs,<span class="string">'data-score'</span>)</div><div class="line">            movie[<span class="string">'director'</span>] = _attr(attrs,<span class="string">'data-director'</span>)</div><div class="line">            movie[<span class="string">'actors'</span>] = _attr(attrs,<span class="string">'data-actors'</span>)</div><div class="line">            self.movies.append(movie)</div><div class="line">            self.in_movies = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> tag == <span class="string">'img'</span> <span class="keyword">and</span> self.in_movies:</div><div class="line">            src = _attr(attrs,<span class="string">'src'</span>)</div><div class="line">            movie = self.movies[len(self.movies)<span class="number">-1</span>]</div><div class="line">            <span class="comment">#将电影的海报url添加到movie中</span></div><div class="line">            movie[<span class="string">'poster-url'</span>] = src</div><div class="line">            <span class="comment">#根据海报的url下载图片</span></div><div class="line">            _download_poster_image(movie)</div><div class="line">            <span class="comment">#下载完后将self.in_movies属性置为False</span></div><div class="line">            self.in_movies = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment">#根据海报图片的url下载海报图片</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_download_poster_image</span><span class="params">(movie)</span>:</span></div><div class="line">    <span class="comment">#"poster-url":"https://img3.doubanio.com/view/movie_poster_cover/mpst/public/p2354707516.jpg",</span></div><div class="line">    src = movie[<span class="string">'poster-url'</span>]</div><div class="line">    r = requests.get(src)</div><div class="line">    fname = src.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</div><div class="line">    <span class="comment">#将图片下如文件</span></div><div class="line">    <span class="keyword">with</span> open(fname,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(r.content)</div><div class="line">        movie[<span class="string">'poster-path'</span>] = fname</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#获取热播电影信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nowplaying_movies</span><span class="params">(url)</span>:</span></div><div class="line">    headlers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36'</span>&#125;</div><div class="line"></div><div class="line">    <span class="comment"># req = urllib2.Request(url,headers=headlers)</span></div><div class="line">    <span class="comment"># response = urllib2.urlopen(req)</span></div><div class="line">    <span class="comment"># #定义解析器MovieParser继承自HTMLParser</span></div><div class="line">    <span class="comment"># parser = MovieParser()</span></div><div class="line">    <span class="comment"># #将response.read()喂给解析器，</span></div><div class="line">    <span class="comment"># # 供解析器的handle_startendtag(self, tag, attrs)解析</span></div><div class="line">    <span class="comment"># parser.feed(response.read())</span></div><div class="line">    <span class="comment"># response.close()</span></div><div class="line">    <span class="comment"># return parser.movies</span></div><div class="line"></div><div class="line">    <span class="comment">#使用requests重构上面注释的代码</span></div><div class="line">    r = requests.get(url,headlers)</div><div class="line">    p = MovieParser()</div><div class="line">    p.feed(r.content)</div><div class="line">    <span class="keyword">return</span> p.movies</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">'https://movie.douban.com/nowplaying/qingdao/'</span></div><div class="line">    movies = nowplaying_movies(url)</div><div class="line"></div><div class="line">    <span class="comment">#把movies以json格式打印出来</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'%s'</span> % json.dumps(movies,sort_keys=<span class="keyword">True</span>,indent=<span class="number">4</span>,separators=(<span class="string">','</span>,<span class="string">':'</span>))</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫实例：豆瓣热播电影（urllib+urllib2）]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%EF%BC%9A%E8%B1%86%E7%93%A3%E7%83%AD%E6%92%AD%E7%94%B5%E5%BD%B1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="第1步：热播电影格式"><a href="#第1步：热播电影格式" class="headerlink" title="第1步：热播电影格式"></a>第1步：热播电影格式</h2><ol>
<li>使用Chrome打开也爬取的网页，打开Chrome的开发者选项，点击下图中的按钮!<img src="http://i.imgur.com/kmaPcJH.png" alt=""><br>，选中要爬取的区域，然后查看html代码，查看抽取内容的格式。</li>
</ol>
<p>通过上面方法找到热播电影的格式为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;mod-bd&quot;&gt;</div><div class="line">           &lt;ul class=&quot;lists&quot;&gt;</div><div class="line">                   &lt;li</div><div class="line">                       id=&quot;2131940&quot;</div><div class="line">                       class=&quot;list-item&quot;</div><div class="line">                       data-title=&quot;魔兽&quot;</div><div class="line">                       data-score=&quot;8.2&quot;</div><div class="line">                       data-star=&quot;40&quot;</div><div class="line">                       data-release=&quot;2016&quot;</div><div class="line">                       data-duration=&quot;124分钟&quot;</div><div class="line">                       data-region=&quot;美国 中国大陆 加拿大&quot;</div><div class="line">                       data-director=&quot;邓肯·琼斯&quot;</div><div class="line">                       data-actors=&quot;崔维斯·费米尔 / 托比·凯贝尔 / 宝拉·巴顿&quot;</div><div class="line">                       data-category=&quot;nowplaying&quot;</div><div class="line">                       data-enough=&quot;True&quot;</div><div class="line">                       data-showed=&quot;True&quot;</div><div class="line">                       data-votecount=&quot;59747&quot;</div><div class="line">                       data-subject=&quot;2131940&quot;</div><div class="line">                   &gt;</div><div class="line">                   &lt;li</div><div class="line">                       id=&quot;25786060&quot;</div><div class="line">                       class=&quot;list-item&quot;</div><div class="line">                       data-title=&quot;X战警：天启&quot;</div><div class="line">                       data-score=&quot;8.2&quot;</div><div class="line">                       data-star=&quot;40&quot;</div><div class="line">                       data-release=&quot;2016&quot;</div><div class="line">                       data-duration=&quot;144分钟&quot;</div><div class="line">                       data-region=&quot;美国&quot;</div><div class="line">                       data-director=&quot;布莱恩·辛格&quot;</div><div class="line">                       data-actors=&quot;詹姆斯·麦卡沃伊 / 迈克尔·法斯宾德 / 詹妮弗·劳伦斯&quot;</div><div class="line">                       data-category=&quot;nowplaying&quot;</div><div class="line">                       data-enough=&quot;True&quot;</div><div class="line">                       data-showed=&quot;True&quot;</div><div class="line">                       data-votecount=&quot;82158&quot;</div><div class="line">                       data-subject=&quot;25786060&quot;</div><div class="line">                   &gt;</div><div class="line">                   。。。。。。</div></pre></td></tr></table></figure>
<p>因此，我们只需要拿到所有<li>标签中属性data-category=”nowplaying”的data-title属性，就可获得热播电影。</li></p>
<h2 id="HTMLParse简介"><a href="#HTMLParse简介" class="headerlink" title="HTMLParse简介"></a>HTMLParse简介</h2><ul>
<li>feed：向解析器(HTMLParse)中喂数据，可以分段提供</li>
<li>handler_starttag：处理html的开始标签<ul>
<li>tag：标签名称</li>
<li>attrs：标签属性列表</li>
</ul>
</li>
<li>handler_data：处理标签里的数据体</li>
<li>data：数据文本</li>
</ul>
<h2 id="第2步通过HTMLParser解析器解析网页html代码，获取所有信息"><a href="#第2步通过HTMLParser解析器解析网页html代码，获取所有信息" class="headerlink" title="第2步通过HTMLParser解析器解析网页html代码，获取所有信息"></a>第2步通过HTMLParser解析器解析网页html代码，获取所有信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> HTMLParser <span class="keyword">import</span> HTMLParser</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieParser</span><span class="params">(HTMLParser)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        HTMLParser.__init__(self)</div><div class="line">        self.movies=[]</div><div class="line">    <span class="comment">#重载父类方法</span></div><div class="line">    <span class="comment">#循环处理feed进来的所有的tag,以及标签对应的attrs</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></div><div class="line">        <span class="comment">#给定tag的属性名attrname，获取属性的值</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_attr</span><span class="params">(attrList,attrname)</span>:</span></div><div class="line">            <span class="keyword">for</span> attr <span class="keyword">in</span> attrList:</div><div class="line">                <span class="keyword">if</span> attr[<span class="number">0</span>] == attrname:</div><div class="line">                    <span class="keyword">return</span> attr[<span class="number">1</span>]</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> tag == <span class="string">'li'</span> <span class="keyword">and</span> _attr(attrs,<span class="string">'data-title'</span>) \</div><div class="line">                <span class="keyword">and</span> _attr(attrs,<span class="string">'data-category'</span>) == <span class="string">'nowplaying'</span>:</div><div class="line">            movie = &#123;&#125;</div><div class="line">            movie[<span class="string">'title'</span>] = _attr(attrs,<span class="string">'data-title'</span>)</div><div class="line">            movie[<span class="string">'score'</span>] = _attr(attrs,<span class="string">'data-score'</span>)</div><div class="line">            movie[<span class="string">'director'</span>] = _attr(attrs,<span class="string">'data-director'</span>)</div><div class="line">            movie[<span class="string">'actors'</span>] = _attr(attrs,<span class="string">'data-actors'</span>)</div><div class="line">            self.movies.append(movie)</div><div class="line">            </div><div class="line"><span class="comment">#获取热播电影信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nowplaying_movies</span><span class="params">(url)</span>:</span></div><div class="line">    headlers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36'</span>&#125;</div><div class="line">    req = urllib2.Request(url,headers=headlers)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    <span class="comment">#定义解析器MovieParser继承自HTMLParser</span></div><div class="line">    parser = MovieParser()</div><div class="line">    <span class="comment">#将response.read()喂给解析器，</span></div><div class="line">    <span class="comment"># 供解析器的handle_startendtag(self, tag, attrs)解析</span></div><div class="line">    parser.feed(response.read())</div><div class="line">    response.close()</div><div class="line">    <span class="keyword">return</span> parser.movies</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">'https://movie.douban.com/nowplaying/qingdao/'</span></div><div class="line">    movies = nowplaying_movies(url)</div><div class="line"></div><div class="line">    <span class="comment">#把movies以json格式打印出来</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'%s'</span> % json.dumps(movies,sort_keys=<span class="keyword">True</span>,indent=<span class="number">4</span>,separators=(<span class="string">','</span>,<span class="string">':'</span>))</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫之requests介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E4%B9%8Brequests%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><p><a href="http://requests.readthedocs.io/en/latest/" target="_blank" rel="external">requsets官网地址</a></p>
<h4 id="和urllib、urllib2的区别："><a href="#和urllib、urllib2的区别：" class="headerlink" title="和urllib、urllib2的区别："></a>和urllib、urllib2的区别：</h4><ul>
<li>requests不是标准库</li>
<li>最好用的http库，pythonic风格</li>
</ul>
<h4 id="安装：pip-install-requests"><a href="#安装：pip-install-requests" class="headerlink" title="安装：pip install requests"></a>安装：pip install requests</h4><h2 id="二、requests请求"><a href="#二、requests请求" class="headerlink" title="二、requests请求"></a>二、requests请求</h2><h3 id="1-requests-request-method-url-kwargs"><a href="#1-requests-request-method-url-kwargs" class="headerlink" title="1.requests.request(method, url, **kwargs)"></a>1.requests.request(method, url, **kwargs)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requests.request(method, url, **kwargs)</div><div class="line">    Constructs and sends a Request. Returns Response object.</div></pre></td></tr></table></figure>
<p><strong>参数：</strong></p>
<ul>
<li>method – method for the new Request object.(get/post/head/put/delete)<br>url – URL for the new Request object.</li>
<li>params – (optional) Dictionary or bytes to be sent in the query string for the Request.(请求参数)</li>
<li>data – (optional) Dictionary, bytes, or file-like object to send in the body of the Request.</li>
<li>json – (optional) json data to send in the body of the Request.</li>
<li>headers – (optional) Dictionary of HTTP Headers to send with the Request.</li>
<li>cookies – (optional) Dict or CookieJar object to send with the Request.</li>
<li>files – (optional) Dictionary of ‘name’: file-like-objects (or {‘name’: file-tuple}) for multipart encoding upload. file-tuple can be a 2-tuple (‘filename’, fileobj), 3-tuple (‘filename’, fileobj, ‘content_type’) or a 4-tuple (‘filename’, fileobj, ‘content_type’, custom_headers), where ‘content-type’ is a string defining the content type of the given file and custom_headers a dict-like object containing additional headers to add for the file.</li>
<li>auth – (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.</li>
<li>timeout (float or tuple) – (optional) How long to wait for the server to send data before giving up, as a float, or a (connect timeout, read timeout) tuple.</li>
<li>allow_redirects (bool) – (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</li>
<li>proxies – (optional) Dictionary mapping protocol to the URL of the proxy.</li>
<li>verify – (optional) whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to True.</li>
<li>stream – (optional) if False, the response content will be immediately downloaded.</li>
<li>cert – (optional) if String, path to ssl client cert file (.pem). If Tuple, (‘cert’, ‘key’) pair.(验证证书)</li>
</ul>
<p><strong>Return</strong>：requests.Response</p>
<p><strong>Usage</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt; req = requests.request(&apos;GET&apos;, &apos;http://httpbin.org/get&apos;)</div><div class="line">&lt;Response [200]&gt;</div></pre></td></tr></table></figure>
<h3 id="2-requests-get"><a href="#2-requests-get" class="headerlink" title="2.requests.get()"></a>2.requests.get()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requests.get(url, params=None, **kwargs)</div><div class="line">    Sends a GET request.</div></pre></td></tr></table></figure>
<h3 id="3-requests-post"><a href="#3-requests-post" class="headerlink" title="3.requests.post()"></a>3.requests.post()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requests.post(url, data=None, json=None, **kwargs)</div><div class="line">    Sends a POST request.</div></pre></td></tr></table></figure>
<h3 id="4-requests-head"><a href="#4-requests-head" class="headerlink" title="4.requests.head()"></a>4.requests.head()</h3><h3 id="5-requests-put"><a href="#5-requests-put" class="headerlink" title="5.requests.put()"></a>5.requests.put()</h3><h2 id="二、requests应答"><a href="#二、requests应答" class="headerlink" title="二、requests应答"></a>二、requests应答</h2><ul>
<li>status_code：状态码</li>
<li>headers：应答得http头</li>
<li>json：应答得json数据</li>
<li>text：应答得Unicode编码的文本</li>
<li>content：应答得字节流数据</li>
<li>cookies：应担的cookies，自动处理。</li>
</ul>
<h2 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import requests</div><div class="line"></div><div class="line">def get_json():</div><div class="line">    response = requests.get(&apos;https://api.github.com/events&apos;)</div><div class="line">    print response.status_code</div><div class="line">    #print response.headers</div><div class="line">    #print response.content</div><div class="line">    #print response.text</div><div class="line">    print response.json()</div><div class="line"></div><div class="line">def get_querystring():</div><div class="line">    #http://httpbin.org是专门测试http的网站</div><div class="line">    url = &apos;http://httpbin.org/get&apos;</div><div class="line">    params = &#123;&apos;qs1&apos;:&apos;value1&apos;,&apos;qs2&apos;:&apos;value2&apos;&#125;</div><div class="line">    r = requests.get(url,params=params)</div><div class="line">    print r.status_code</div><div class="line">    print r.content</div><div class="line"></div><div class="line">def get_custom_headers():</div><div class="line">    url = &apos;http://httpbin.org/get&apos;</div><div class="line">    headers = &#123;&apos;x-header1&apos;:&apos;value1&apos;,&apos;x-header2&apos;:&apos;value2&apos;&#125;</div><div class="line">    r = requests.get(url,headers=headers)</div><div class="line">    print r.status_code</div><div class="line">    print r.content</div><div class="line"></div><div class="line">def get_cookie():</div><div class="line">    url = &apos;http://www.douban.com&apos;</div><div class="line">    headers = &#123;&apos;User-Agent&apos;:&apos;Chrome&apos;&#125;</div><div class="line">    r = requests.get(url,headers=headers)</div><div class="line">    print r.status_code</div><div class="line">    print r.cookies</div><div class="line">    #输出：&lt;RequestsCookieJar[&lt;Cookie bid=rnxfxUZLSxA for .douban.com/&gt;,</div><div class="line">    # &lt;Cookie ll=&quot;118221&quot; for .douban.com/&gt;]&gt;</div><div class="line">    print r.cookies[&apos;bid&apos;] #输出：zkXS0p3Zars</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    #get_json()</div><div class="line">    #get_querystring()</div><div class="line">    #get_custom_headers()</div><div class="line">    get_cookie()</div></pre></td></tr></table></figure>
<h2 id="四、高级用法"><a href="#四、高级用法" class="headerlink" title="四、高级用法"></a>四、高级用法</h2><p>下面这些高级用法：自己看requests文档。</p>
<ul>
<li>Session：同一个会话内参数保持一致，且会重用TCP连接。也会尽量保持连接，也会提高性能</li>
<li>SSL证书认证：开启、关闭、自定义CA证书</li>
<li>上传普通文件和复杂结构的文件</li>
<li>代理访问</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫之urllib2介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E4%B9%8Burllib2%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、urllib与urllib2的区别"><a href="#一、urllib与urllib2的区别" class="headerlink" title="一、urllib与urllib2的区别"></a>一、urllib与urllib2的区别</h2><ul>
<li>urllib2提供了比urllib更丰富的功能。</li>
<li>urllib2.Request - 提供http hander定制功能。</li>
<li>提供更强大的功能，包括cookie处理，鉴权，可定制话等。</li>
<li>urllib2能不能完全替代urllib? –不能，需要用到urllib.encoding()函数。</li>
</ul>
<h3 id="1-urllib2-urlopen"><a href="#1-urllib2-urlopen" class="headerlink" title="1.urllib2.urlopen()"></a>1.urllib2.urlopen()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">urlopen(url, data=None, timeout=&lt;object object&gt;, cafile=None, capath=None, cadefault=False, context=None)</div></pre></td></tr></table></figure>
<p>比urllib.urlopen()中多了一个timeout参数。</p>
<p>timeout：超时时间</p>
<p>比如，设置timeout为3秒，则3秒之内连接不到服务器，则报timeout错误。</p>
<h3 id="2-urllib2-Request"><a href="#2-urllib2-Request" class="headerlink" title="2.urllib2.Request()"></a>2.urllib2.Request()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Request:</div><div class="line">    Methods defined here:</div><div class="line">    __getattr__(self, attr)</div><div class="line">    __init__(self, url, data=None, headers=&#123;&#125;, origin_req_host=None,         unverifiable=False)</div><div class="line">    add_data(self, data)</div><div class="line">    add_header(self, key, val)</div><div class="line">    add_unredirected_header(self, key, val)</div><div class="line">    get_data(self)</div><div class="line">    get_full_url(self)</div><div class="line">    get_header(self, header_name, default=None)</div><div class="line">    get_host(self)</div><div class="line">    get_method(self)</div><div class="line">    get_origin_req_host(self)</div><div class="line">    get_selector(self)</div><div class="line">    get_type(self)</div><div class="line">    has_data(self)</div><div class="line">    has_header(self, header_name)</div><div class="line">    has_proxy(self)</div><div class="line">    header_items(self)</div><div class="line">    is_unverifiable(self)</div><div class="line">    set_proxy(self, host, type</div></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>url</li>
<li>data - optional</li>
<li>headers: 字典</li>
</ul>
<p>使用Request添加或修改http头：</p>
<ul>
<li>Accept: application/json</li>
<li>Content-Type: application/json</li>
<li>User-Agent: Chrome</li>
</ul>
<hr>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2</div><div class="line"></div><div class="line">def urlopen():</div><div class="line">    #网址不存在，则请求超时。</div><div class="line">    url = &apos;http://blog.kamidox.com/no-exits&apos;</div><div class="line">    try:</div><div class="line">        s = urllib2.urlopen(url,timeout=3)</div><div class="line">    except urllib2.HTTPError,e:</div><div class="line">        print e</div><div class="line">    else:</div><div class="line">        print s.read(100)</div><div class="line">        s.close()</div><div class="line"></div><div class="line">def request():</div><div class="line">    url = &apos;http://blog.kamidox.com&apos;</div><div class="line">    #定制http头</div><div class="line">    headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0&apos;,&apos;x-my-hander&apos;:&apos;my value&apos;&#125;</div><div class="line">    req = urllib2.Request(url,headers=headers)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    print response.read(100)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    urlopen()</div><div class="line">    request()</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-urllib2-build-openner"><a href="#3-urllib2-build-openner" class="headerlink" title="3.urllib2.build_openner"></a>3.urllib2.build_openner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1.build_opener(*handlers)</div><div class="line">Create an opener object from a list of handlers.</div><div class="line"> </div><div class="line">The opener will use several default handlers, including support</div><div class="line">for HTTP, FTP and when applicable, HTTPS.</div><div class="line"> </div><div class="line">If any of the handlers passed as arguments are subclasses of the</div><div class="line">default handlers, the default handlers will not be used.</div><div class="line"></div><div class="line">2.install_opener(opener)</div></pre></td></tr></table></figure>
<ul>
<li><p>可以定制http的行为。</p>
</li>
<li><p>参数：Handler列表</p>
</li>
<li>返回OpenerDirector</li>
</ul>
<h4 id="1-BaseHandler及其子类"><a href="#1-BaseHandler及其子类" class="headerlink" title="(1)BaseHandler及其子类"></a>(1)BaseHandler及其子类</h4><ul>
<li>HTTPHandler</li>
<li>HTTPSHandler</li>
<li>HTTPCookieProcessor</li>
</ul>
<h4 id="2-当调用urllib2-urlopen-时，默认会创建的Handler链："><a href="#2-当调用urllib2-urlopen-时，默认会创建的Handler链：" class="headerlink" title="(2)当调用urllib2.urlopen()时，默认会创建的Handler链："></a>(2)当调用urllib2.urlopen()时，默认会创建的Handler链：</h4><p>urllib2.build_opener()不传参数时，也会创建默认的Handler链。</p>
<ul>
<li>ProxyHandler(如果设置了代理)</li>
<li>UnknownHandler</li>
<li>HTTPHandler</li>
<li>HTTPDefaultErrorHandler</li>
<li>HTTPRedirectHandler</li>
<li>FTPHandler</li>
<li>HTTPErrorProcessor</li>
<li>HTTPSHandler(如果安装了ssl模块)</li>
</ul>
<h4 id="实例1-打印Http调试信息"><a href="#实例1-打印Http调试信息" class="headerlink" title="实例1:打印Http调试信息"></a>实例1:打印Http调试信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2</div><div class="line">import urllib</div><div class="line"></div><div class="line">def request_post_debug():</div><div class="line">    url = &apos;http://www.douban.com&apos;</div><div class="line">    #POST</div><div class="line">    data = &#123;&apos;username&apos;:&apos;kamidox&apos;,&apos;password&apos;:&apos;xxxxxxxx&apos;&#125;</div><div class="line">    headlers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0&apos;&#125;</div><div class="line">    req = urllib2.Request(url,data=urllib.urlencode(data),headers=headlers)</div><div class="line">    </div><div class="line">    #打印http调试信息</div><div class="line">    #debuglevel会把交互的信息都打印出来</div><div class="line">    opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))</div><div class="line">    response = opener.open(req)</div><div class="line">    print response.read(100)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    request_post_debug()</div><div class="line">    </div><div class="line">#输出：</div><div class="line">#send: &apos;POST / HTTP/1.1\r\nAccept-Encoding: identity\r\nContent-Length: 34\r\n</div><div class="line"># Host: www.douban.com\r\nContent-Type: application/x-www-form-urlencoded\r\n</div><div class="line"># Connection: close\r\nUser-Agent: Mozilla/5.0\r\n\r\nusername=kamidox&amp;</div><div class="line"># password=xxxxxxxx&apos;</div><div class="line"># reply: &apos;HTTP/1.1 301 Moved Permanently\r\n&apos;</div><div class="line"># header: Date: Fri, 10 Jun 2016 12:57:26 GMT</div><div class="line"># header: Content-Type: text/html</div><div class="line"># header: Content-Length: 178</div><div class="line"># header: Connection: close</div><div class="line"># header: Location: https://www.douban.com/</div><div class="line"># header: Server: dae</div><div class="line"></div><div class="line"># &lt;!DOCTYPE HTML&gt;</div><div class="line"># &lt;html lang=&quot;zh-cms-Hans&quot; class=&quot;&quot;&gt;</div><div class="line"># &lt;head&gt;</div><div class="line"># &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line"># &lt;meta name=&quot;descrip</div></pre></td></tr></table></figure>
<h4 id="3-将自己创建的opener保存为默认："><a href="#3-将自己创建的opener保存为默认：" class="headerlink" title="(3)将自己创建的opener保存为默认："></a>(3)将自己创建的opener保存为默认：</h4><p>urllib2.install_opener(opener):会将自己创建的opener安装到urllib2中，相当于用自己创建的opener替换了urllib2中的默认Handler,当使用urllib2.urlopen()时，使用的是<br>install_openner(opener)中自己定义的openner.</p>
<p>上面实例1:打印Http调试信息，相当于创建了一个局部的opener,而urllib2.install_openner(opener)相当于创建了一个全局的opener.</p>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2</div><div class="line">import urllib</div><div class="line"></div><div class="line">def request():</div><div class="line">    url = &apos;http://blog.kamidox.com&apos;</div><div class="line">    #定制http头</div><div class="line">    headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0&apos;,&apos;x-my-hander&apos;:&apos;my value&apos;&#125;</div><div class="line">    req = urllib2.Request(url,headers=headers)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    print response.read(100)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">def request_post_debug():</div><div class="line">    url = &apos;http://www.douban.com&apos;</div><div class="line">    #POST</div><div class="line">    data = &#123;&apos;username&apos;:&apos;kamidox&apos;,&apos;password&apos;:&apos;xxxxxxxx&apos;&#125;</div><div class="line">    headlers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0&apos;&#125;</div><div class="line">    req = urllib2.Request(url,data=urllib.urlencode(data),headers=headlers)</div><div class="line"></div><div class="line">    #打印http调试信息</div><div class="line">    #debuglevel会把交互的信息都打印出来</div><div class="line">    opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))</div><div class="line">    response = opener.open(req)</div><div class="line">    print response.read(100)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">def install_debug_handler():</div><div class="line">    opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1),</div><div class="line">                                  urllib2.HTTPSHandler(debuglevel=1))</div><div class="line">    urllib2.install_opener(opener)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    #request_post_debug()</div><div class="line">    install_debug_handler()</div><div class="line">    #request()会使用urllib2.install_opener(opener)中的opener</div><div class="line">    request()</div></pre></td></tr></table></figure>
<h3 id="4-cookies处理"><a href="#4-cookies处理" class="headerlink" title="4.cookies处理"></a>4.cookies处理</h3><p>cookies由服务器生成，并发送给客户端保存；当客户端再次发送请求时，会连保存的cookies一起发送。</p>
<h4 id="1-cookielib-CookieJar"><a href="#1-cookielib-CookieJar" class="headerlink" title="(1)cookielib.CookieJar"></a>(1)cookielib.CookieJar</h4><p>提供解析并保存cookie的接口。</p>
<h4 id="2-urllib2-HTTPCookieProcessor-继承自BaseHandler"><a href="#2-urllib2-HTTPCookieProcessor-继承自BaseHandler" class="headerlink" title="(2)urllib2.HTTPCookieProcessor 继承自BaseHandler"></a>(2)urllib2.HTTPCookieProcessor 继承自BaseHandler</h4><p>提供自动处理cookie的功能</p>
<h4 id="3-实例："><a href="#3-实例：" class="headerlink" title="(3)实例："></a>(3)实例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2</div><div class="line">import cookielib</div><div class="line"></div><div class="line">def handler_cookie():</div><div class="line">    cookiejar = cookielib.CookieJar()</div><div class="line">    cookieHandler = urllib2.HTTPCookieProcessor(cookiejar=cookiejar)</div><div class="line">    opener = urllib2.build_opener(cookieHandler,urllib2.HTTPHandler(debuglevel=1))</div><div class="line">    response = opener.open(&apos;http://www.douban.com/&apos;)</div><div class="line">    print response.read(100)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">    #请求之后cookiejar中就包含了服务器中返回的cookies信息</div><div class="line">    print cookiejar._cookies</div><div class="line"></div><div class="line">    #当再次发送请求时，会在请求中添加cookies信息。</div><div class="line">    response = opener.open(&apos;http://www.douban.com&apos;)</div><div class="line">    response.close()</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    handler_cookie()</div></pre></td></tr></table></figure>
<h4 id="4-问题思考"><a href="#4-问题思考" class="headerlink" title="(4)问题思考"></a>(4)问题思考</h4><ul>
<li>用cookie来模拟登陆？</li>
<li>验证码问题？</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫之urllib介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E7%88%AC%E8%99%AB%E4%B9%8Burllib%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<h2 id="一、urllib-urlopen-url-data"><a href="#一、urllib-urlopen-url-data" class="headerlink" title="一、urllib.urlopen(url,[data])"></a>一、urllib.urlopen(url,[data])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">urlopen(url, data=<span class="keyword">None</span>, proxies=<span class="keyword">None</span>, context=<span class="keyword">None</span>)</div><div class="line">Create a file-like object <span class="keyword">for</span> the specified URL to read <span class="keyword">from</span>.</div></pre></td></tr></table></figure>
<ul>
<li>url: scheme(http: / file: )</li>
<li>data: 如果有，则变成post方法，数据格式必须是application/x-wwww-form-urlencoded</li>
<li>返回类文件句柄</li>
</ul>
<h3 id="类文件句柄的常方法："><a href="#类文件句柄的常方法：" class="headerlink" title="类文件句柄的常方法："></a>类文件句柄的常方法：</h3><ul>
<li>read(size): size=-1/None</li>
<li>readline():</li>
<li>readlines():</li>
<li>close():</li>
<li>getcode():</li>
</ul>
<h2 id="二、探求HttpMessage的方法："><a href="#二、探求HttpMessage的方法：" class="headerlink" title="二、探求HttpMessage的方法："></a>二、探求HttpMessage的方法：</h2><p>HTTPMessage没有官方文档，如何找出其有用方法？</p>
<ul>
<li>info():返回httplib.HTTPMessage实例(urllib.urlopen().info())</li>
<li>httplib.HTTPMessage:<ul>
<li>headers</li>
<li>gettype()</li>
<li>getheader()/getheaders()</li>
<li>items()/keys()/values()</li>
</ul>
</li>
</ul>
<h2 id="三、urllib-urlretrieve"><a href="#三、urllib-urlretrieve" class="headerlink" title="三、urllib.urlretrieve()"></a>三、urllib.urlretrieve()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">urlretrieve(url, filename=None, reporthook=None, data=None, context=None)</div></pre></td></tr></table></figure>
<p>功能：将请求的url响应保存在filename中。</p>
<ul>
<li>url: 远程地址</li>
<li>filename: 要保存到本地的文件</li>
<li>reporthook: 下载状态报告</li>
<li>data: 如果有，则变成post方法，数据格式必须是application/x-wwww-form-urlencoded</li>
<li>返回：(filename,HTTPMessage)</li>
</ul>
<h3 id="reporthook"><a href="#reporthook" class="headerlink" title="reporthook:"></a>reporthook:</h3><ul>
<li>参数1：当前传输的块数</li>
<li>参数2：块大小</li>
<li>参数3：数据总大小</li>
<li>需要注意：content-length不是必须的</li>
</ul>
<p>监控下载进度：<br>参数1*参数2就是当前下载的大小，然后除以参数3就是下载的进度。</p>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(list)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</div><div class="line">        print(i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></div><div class="line">    s = urllib.urlopen(<span class="string">'http://blog.kamidox.com'</span>)</div><div class="line">    <span class="keyword">print</span> s.read()</div><div class="line">    <span class="keyword">print</span> s.getcode()</div><div class="line"></div><div class="line">    <span class="comment">#获取HTTPMessage实例</span></div><div class="line">    msg = s.info()</div><div class="line"></div><div class="line">    <span class="comment">#获取HTTPMessage方法</span></div><div class="line">    print_list(dir(msg))</div><div class="line"></div><div class="line">    <span class="comment">#使用HTTPMessage方法</span></div><div class="line">    print_list(msg.headers)</div><div class="line">    <span class="keyword">print</span> msg.getheader(<span class="string">'Content-Type'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">()</span>:</span></div><div class="line">    fname,msg = urllib.urlretrieve(<span class="string">'http://blog.kamidox.com'</span>,<span class="string">'index.html'</span>,</div><div class="line">                                   reporthook=progress)</div><div class="line">    <span class="keyword">print</span> fname</div><div class="line">    print_list(msg.items())</div><div class="line"></div><div class="line"><span class="comment"># 显示下载进度</span></div><div class="line"><span class="comment"># 0/16176 - 0.00%</span></div><div class="line"><span class="comment"># 8192/16176 - 50.64%</span></div><div class="line"><span class="comment"># 16384/16176 - 101.29%:超出100的原因可能是total_size只包含了body，</span></div><div class="line"><span class="comment"># 没有包含http headers</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">progress</span><span class="params">(blk,blk_size,total_size)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'%d/%d - %.02f%%'</span> % (blk*blk_size,total_size,</div><div class="line">                               (float)(blk*blk_size)*<span class="number">100</span>/total_size)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    demo()</div><div class="line">    retrieve()</div></pre></td></tr></table></figure>
<hr>
<h2 id="urllib-urlencode"><a href="#urllib-urlencode" class="headerlink" title="urllib.urlencode()"></a>urllib.urlencode()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">urlencode(query, doseq=0)</div><div class="line">Encode a sequence of two-element tuples or dictionary into a URL query string.</div><div class="line"> </div><div class="line">If any values in the query arg are sequences and doseq is true, each</div><div class="line">sequence element is converted to a separate parameter.</div><div class="line"> </div><div class="line">If the query arg is a sequence of two-element tuples, the order of the</div><div class="line">parameters in the output will match the order of parameters in the</div><div class="line">input.</div></pre></td></tr></table></figure>
<ul>
<li>把字典数据转化为url编码</li>
<li>用途：<ul>
<li>对url参数进行编码</li>
<li>对post上的form数据进行编码</li>
</ul>
</li>
</ul>
<h2 id="urlparse-parse-qs"><a href="#urlparse-parse-qs" class="headerlink" title="urlparse.parse_qs()"></a>urlparse.parse_qs()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">parse_qs(qs, keep_blank_values=0, strict_parsing=0)</div><div class="line">Parse a query given as a string argument.</div><div class="line"></div><div class="line">Arguments:</div><div class="line"> </div><div class="line">qs: percent-encoded query string to be parsed</div><div class="line"> </div><div class="line">keep_blank_values: flag indicating whether blank values in</div><div class="line">    percent-encoded queries should be treated as blank strings.</div><div class="line">    A true value indicates that blanks should be retained as</div><div class="line">    blank strings.  The default false value indicates that</div><div class="line">    blank values are to be ignored and treated as if they were</div><div class="line">    not included.</div><div class="line"> </div><div class="line">strict_parsing: flag indicating what to do with parsing errors.</div><div class="line">    If false (the default), errors are silently ignored.</div><div class="line">    If true, errors raise a ValueError exception.</div></pre></td></tr></table></figure>
<blockquote>
<p>把url编码转化为字典数据</p>
</blockquote>
<h2 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib</div><div class="line">import urlparse</div><div class="line"></div><div class="line">def urlencode():</div><div class="line">    params = &#123;&apos;score&apos;:100, &apos;name&apos;:&apos;爬虫基础&apos;,&apos;content&apos;:&apos;very good&apos;&#125;</div><div class="line">    qs = urllib.urlencode(params)</div><div class="line">    # 输出：content=very+good&amp;score=100&amp;name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80</div><div class="line">    print qs</div><div class="line">    #输出：&#123;&apos;content&apos;: [&apos;very good&apos;], &apos;score&apos;: [&apos;100&apos;],</div><div class="line">    # &apos;name&apos;: [&apos;\xe7\x88\xac\xe8\x99\xab\xe5\x9f\xba\xe7\xa1\x80&apos;]&#125;</div><div class="line">    print urlparse.parse_qs(qs)</div><div class="line"></div><div class="line">def parse_qs():</div><div class="line">    url = &apos;https://www.baidu.com/s?&apos; \</div><div class="line">          &apos;wd=%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C&amp;&apos; \</div><div class="line">          &apos;rsv_spt=1&amp;rsv_iqid=0x93e1c64900082ad5&amp;&apos; \</div><div class="line">          &apos;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;&apos; \</div><div class="line">          &apos;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=3&amp;&apos; \</div><div class="line">          &apos;rsv_sug1=3&amp;rsv_sug7=101&amp;sug=%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C&amp;&apos; \</div><div class="line">          &apos;rsv_n=1&apos;</div><div class="line">    result = urlparse.urlparse(url)</div><div class="line">    print result</div><div class="line">    #输出：ParseResult(scheme=&apos;https&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/s&apos;,</div><div class="line">    # params=&apos;&apos;, query=&apos;wd=%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C&amp;rsv_spt=1&amp;</div><div class="line">    # rsv_iqid=0x93e1c64900082ad5&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;</div><div class="line">    # tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=3&amp;rsv_sug1=3&amp;rsv_sug7=101&amp;</div><div class="line">    # sug=%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C&amp;rsv_n=1&apos;, fragment=&apos;&apos;)</div><div class="line"></div><div class="line">    #提取url中的params，即ParseResult中的query.</div><div class="line">    params = urlparse.parse_qs(result.query)</div><div class="line">    print params</div><div class="line">    #输出：&#123;&apos;sug&apos;: [&apos;\xe9\xad\x94\xe5\x85\xbd\xe4\xb8\x96\xe7\x95\x8c&apos;], </div><div class="line">    # &apos;wd&apos;: [&apos;\xe9\xad\x94\xe5\x85\xbd\xe4\xb8\x96\xe7\x95\x8c&apos;], &apos;rsv_spt&apos;: [&apos;1&apos;],</div><div class="line">    # &apos;rsv_iqid&apos;: [&apos;0x93e1c64900082ad5&apos;], &apos;f&apos;: [&apos;8&apos;], &apos;rsv_enter&apos;: [&apos;1&apos;], </div><div class="line">    # &apos;rsv_bp&apos;: [&apos;0&apos;], &apos;rsv_idx&apos;: [&apos;2&apos;], &apos;tn&apos;: [&apos;baiduhome_pg&apos;], &apos;rsv_sug7&apos;: [&apos;101&apos;], </div><div class="line">    # &apos;rsv_sug1&apos;: [&apos;3&apos;], &apos;issp&apos;: [&apos;1&apos;], &apos;rsv_sug3&apos;: [&apos;3&apos;], &apos;rsv_n&apos;: [&apos;1&apos;], &apos;ie&apos;: [&apos;utf-8&apos;]&#125;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    urlencode()</div><div class="line">    parse_qs()</div></pre></td></tr></table></figure>
<hr>
<h2 id="一个简单的爬虫实例：从雅虎财经获取股票数据"><a href="#一个简单的爬虫实例：从雅虎财经获取股票数据" class="headerlink" title="一个简单的爬虫实例：从雅虎财经获取股票数据"></a>一个简单的爬虫实例：从雅虎财经获取股票数据</h2><p>雅虎财经股票数据接口：</p>
<p>1.股票数据(历史上所有日交易数据)：</p>
<ul>
<li>深市数据链接：<code>http://table.finance.yahoo.com/table.csv?s=000001.sz</code><ul>
<li>s=000001.sz:股票代码</li>
</ul>
</li>
<li>上市数据链接：<code>http://table.finance.yahoo.com/table.csv?s=600000.ss</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Date,Open,High,Low,Close,Volume,Adj Close</div><div class="line">2016-06-09,10.50,10.50,10.50,10.50,000,8.6225</div><div class="line">2016-06-08,12.648,12.648,12.552,12.60,26818800,10.347</div><div class="line">2016-06-07,12.624,12.636,12.576,12.624,22928200,10.36671</div><div class="line">2016-06-06,12.612,12.636,12.54,12.612,33833200,10.35685</div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li>Data：时间</li>
<li>Open:开盘价</li>
<li>High：最高价</li>
<li>Low：最低价</li>
<li>Close：收盘价</li>
<li>Volume：成交量</li>
</ul>
<p>2.获取指定时间段的交易数据：</p>
<ul>
<li>时间参数：<ul>
<li>a(月) b(日) c(年)：开始时间</li>
<li>d()月 e(日) f(年)：结束时间</li>
<li>s：股票代码</li>
</ul>
</li>
</ul>
<p>例如，取深市2012年1月1日至2012年4月19日的数据：</p>
<p><code>http://table.finance.yahoo.com/table.csv?a=0&amp;b=1&amp;c=2012&amp;d=3&amp;e=19&amp;f=2012&amp;s=s=000001.ss</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib</div><div class="line">import datetime</div><div class="line"></div><div class="line">#获取股票全部数据</div><div class="line">def download_socket_data(stock_list):</div><div class="line">    for sid in stock_list:</div><div class="line">        url = &apos;http://table.finance.yahoo.com/table.csv?s=&apos; + sid</div><div class="line">        fname = sid + &apos;.csv&apos;</div><div class="line">        print &apos;downloading %s from %s&apos; % (fname,url)</div><div class="line">        urllib.urlretrieve(url,fname)</div><div class="line">        </div><div class="line">#获取股票指定时间的数据</div><div class="line">def download_socket_in_period(stock_list,start,end):</div><div class="line">    for sid in stock_list:</div><div class="line">        params = &#123;&apos;a&apos;:start.month-1,&apos;b&apos;:start.day,&apos;c&apos;:start.year,</div><div class="line">                  &apos;d&apos;:end.month-1,&apos;e&apos;:end.day,&apos;f&apos;:end.year,</div><div class="line">                  &apos;s&apos;:sid&#125;</div><div class="line">        url = &apos;http://table.finance.yahoo.com/table.csv&apos;</div><div class="line">        qs = urllib.urlencode(params)</div><div class="line">        url = url + qs</div><div class="line">        fname = &apos;%s_%d%d%d_%d%d%d.csv&apos; % (sid,start.year,start.month,start.day,</div><div class="line">                                          end.year,end.month,end.day)</div><div class="line">        print &apos;downloading %s from %s&apos; % (fname,url)</div><div class="line">        urllib.urlretrieve(url,fname)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    stock_list = [&apos;300001.sz&apos;,&apos;300002.sz&apos;]</div><div class="line">    download_socket_data(stock_list)</div><div class="line"></div><div class="line">    start = datetime.date(year=2015,month=11,day=17)</div><div class="line">    end = datetime.date(year=2015,month=12,day=17)</div><div class="line">    download_socket_in_period(stock_list,start,end)</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cookie介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Cookie%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Cookie数据长什么样"><a href="#Cookie数据长什么样" class="headerlink" title="Cookie数据长什么样"></a>Cookie数据长什么样</h2><ul>
<li>Request:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Cookie:bid=PHjUxRzrHNk; _vwo_uuid_v2=56A954C0557184C73BBB3DF5C8D30C1D|409597a19056d473ebee60708893e9b8; ap=1; _pk_ref.100001.8cb4=%5B%22%22%2C%22%22%2C1465517885%2C%22https%3A%2F%2Fwww.google.com.hk%2F%22%5D; _pk_id.100001.8cb4=cbb9346c7bb2e22f.1465354092.2.1465517885.1465354092.; __utma=30149280.2019919087.1465354115.1465354115.1465517888.2; __utmc=30149280; __utmz=30149280.1465517888.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)</div></pre></td></tr></table></figure>
<ul>
<li>Response</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie:ll=&quot;118221&quot;; path=/; domain=.douban.com; expires=Sat, 10-Jun-2017 04:39:13 GMT</div></pre></td></tr></table></figure>
<hr>
<h2 id="Cookie的格式"><a href="#Cookie的格式" class="headerlink" title="Cookie的格式"></a>Cookie的格式</h2><ul>
<li><p>客户端发送Cookie时：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cookie: key1=value1;key2=value2;key3=value3</div></pre></td></tr></table></figure>
</li>
<li><p>服务器保存Cookie时:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set Cookie: key1=value1;path=/;domain=xxx</div><div class="line">Set Cookie: key2=value2;path=/;domain=xxx</div></pre></td></tr></table></figure>
</li>
<li><p>Cookie属性：</p>
<p>  Domain and Path:定义Cookie的作用域。当指定domain时，这个domain及其子域名都包含这个Cookie.</p>
<p>  Exprires:定义cookie的生命周期。</p>
<p>  HttpOnly:禁用脚本访问。</p>
</li>
</ul>
<hr>
<h2 id="Cookie的用途："><a href="#Cookie的用途：" class="headerlink" title="Cookie的用途："></a>Cookie的用途：</h2><ul>
<li>登录信息：判断用户是否已经登录</li>
<li>购物车：保存用户购买的商品列表</li>
</ul>
<hr>
<h2 id="Cookie小结："><a href="#Cookie小结：" class="headerlink" title="Cookie小结："></a>Cookie小结：</h2><ul>
<li><p>服务器在客户端存储信息</p>
</li>
<li><p>请求时，客户端需要把未超时的cookies发回给服务器。</p>
</li>
<li>应答时，服务器会把新的cookies发给客户端，以便下次请求时带上这些cookies.</li>
</ul>
<hr>
<h2 id="从登录行为看Cookie"><a href="#从登录行为看Cookie" class="headerlink" title="从登录行为看Cookie"></a>从登录行为看Cookie</h2><ul>
<li>第一次登录用户名成功时，服务器会向Cookie中写入用户登录成功的信息，服务器并将登录成功的Cookie发回客户端。</li>
<li>当客户端在此登录时，客户端会将登录成功的Cookie(在生命周期范围内)发送给服务器，这是服务器就认为客户端已经登录了。</li>
</ul>
<h2 id="Cookie可能会引发什么安全问题？"><a href="#Cookie可能会引发什么安全问题？" class="headerlink" title="Cookie可能会引发什么安全问题？"></a>Cookie可能会引发什么安全问题？</h2><p>自己搜索。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之正则表达式]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Python里的正则表达式"><a href="#Python里的正则表达式" class="headerlink" title="Python里的正则表达式"></a>Python里的正则表达式</h2><ul>
<li>pattern：匹配模式，遵循正则表达式语法</li>
<li>method：匹配方法，search/match/findall/finditer/sub/subn</li>
</ul>
<h2 id="一个例子，提取价格"><a href="#一个例子，提取价格" class="headerlink" title="一个例子，提取价格"></a>一个例子，提取价格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import re</div><div class="line"></div><div class="line">def re_demo():</div><div class="line">    str = &apos;If you purchase more than 100 sets,the price of product A is $9.90.&apos;</div><div class="line">    #解析数量和价格</div><div class="line">    m = re.search(r&apos;(\d+).*\$(\d+\.?\d*)&apos;,str)</div><div class="line">    print m.groups() #(&apos;100&apos;, &apos;9.90&apos;)</div><div class="line">    print m.group(0) #100 sets,the price of product A is $9.90</div><div class="line">    print m.group(1) #100</div><div class="line">    print m.group(2) #9.90</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    re_demo()</div></pre></td></tr></table></figure>
<h2 id="re模块介绍"><a href="#re模块介绍" class="headerlink" title="re模块介绍"></a>re模块介绍</h2><ul>
<li>re.search：搜索字符串，找到匹配的第一个字符串</li>
<li>re.match：从字符串开始，开始匹配</li>
<li>search vs match<ul>
<li>search: 搜索字符串任意位置的匹配</li>
<li>只从字符串的起始位置开始匹配</li>
</ul>
</li>
<li>split：使用正则表达式来分割字符串</li>
<li>findall：根据正则表达式从左到右搜索匹配项，返回匹配的字符串列表。</li>
<li>finditer: 根据正则表达式从左到右搜索匹配项，返回一个迭代器，迭代返回MathObject。</li>
<li>sub 字符串替换<ul>
<li>pattern: 正则表达式</li>
<li>repl: 替换项，字符串或函数</li>
<li>string: 待处理的字符串</li>
</ul>
</li>
<li>subn与sub一样，返回值多了替换的字符串个数。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import re</div><div class="line"></div><div class="line">def re_demo():</div><div class="line"></div><div class="line">    #search vs match</div><div class="line">    s = &apos;abcd&apos;</div><div class="line">    print re.search(r&apos;c&apos;,s) #&lt;_sre.SRE_Match object at 0x000000000283A510&gt;，匹配成功</div><div class="line">    print re.match(r&apos;c&apos;,s) #None，匹配不成功，以为match是从字符串的第一字符开始匹配</div><div class="line">    print re.match(r&apos;.*c&apos;,s) ##&lt;_sre.SRE_Match object at 0x000000000283A510&gt;，匹配成功</div><div class="line">    </div><div class="line">     #split</div><div class="line">    s = &apos;There is an apple&apos;</div><div class="line">    print re.split(r&apos;\W&apos;,s) #[&apos;There&apos;, &apos;is&apos;, &apos;an&apos;, &apos;apple&apos;]</div><div class="line"></div><div class="line">    #findall</div><div class="line">    s = &apos;There is an apple&apos;</div><div class="line">    print re.findall(r&apos;\w+&apos;,s) #[&apos;There&apos;, &apos;is&apos;, &apos;an&apos;, &apos;apple&apos;]</div><div class="line">    s = &apos;The first price is $9.90 and the second price is $100&apos;</div><div class="line">    print re.findall(r&apos;\d+.?\d*&apos;,s) #[&apos;9.90&apos;, &apos;100&apos;]</div><div class="line"></div><div class="line">    #finditer</div><div class="line">    s = &apos;The first price is $9.90 and the second price is $100&apos;</div><div class="line">    ms = re.finditer(r&apos;\d+.?\d*&apos;, s)</div><div class="line">    for m in ms:</div><div class="line">        print m.group()</div><div class="line">    #9.90</div><div class="line">    #100</div><div class="line"></div><div class="line">    #sub vs subn</div><div class="line">    s = &apos;The first price is $9.90 and the second price is $100&apos;</div><div class="line">    print re.sub(r&apos;\d+.?\d*&apos;,&apos;&lt;number&gt;&apos;,s)</div><div class="line">    #The first price is $&lt;number&gt; and the second price is $&lt;number&gt;</div><div class="line">    print re.subn(r&apos;\d+.?\d*&apos;, &apos;&lt;number&gt;&apos;, s)</div><div class="line">    #(&apos;The first price is $&lt;number&gt; and the second price is $&lt;number&gt;&apos;, 2)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    re_demo()</div></pre></td></tr></table></figure>
<h2 id="MatchObject"><a href="#MatchObject" class="headerlink" title="MatchObject"></a>MatchObject</h2><p>能匹配的正则表达式时，返回re.MatchObject</p>
<ul>
<li><p>group():返回匹配的组</p>
<ul>
<li>索引0表示全部匹配的字符串</li>
<li>索引1开始表示匹配的子组</li>
<li>参数可以一个也可以多个</li>
<li>命名组</li>
</ul>
</li>
<li><p>groupdict():返回配陪的子组</p>
</li>
<li>groups()：返回配陪的子组，索引从1开始的左右子组</li>
<li>start/end/span: 返回配陪的位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import re</div><div class="line">def re_demo():</div><div class="line">    #group: 正则表达式匹配的结果默认增加一个group，即匹配的整个结果</div><div class="line">    s = &apos;group1 group2&apos;</div><div class="line">    m = re.match(r&apos;(\w+) (\w+)+&apos;,s)</div><div class="line">    print m.group() #group1 group2 ，整个匹配结果为默认的group,也即group(0)</div><div class="line">    print m.group(0) #group1 group2</div><div class="line">    print m.group(1) #group1</div><div class="line">    print m.group(2) #group2</div><div class="line">    print m.group(0,1,2) #(&apos;group1 group2&apos;, &apos;group1&apos;, &apos;group2&apos;)</div><div class="line"></div><div class="line">    #groups()：返回所有的子匹配项</div><div class="line">    print  m.groups() #(&apos;group1&apos;, &apos;group2&apos;)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    re_demo()</div></pre></td></tr></table></figure>
<h2 id="介绍几个特殊的"><a href="#介绍几个特殊的" class="headerlink" title="介绍几个特殊的"></a>介绍几个特殊的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import re</div><div class="line">def re_demo():</div><div class="line">    #dot(.):匹配任意字符</div><div class="line">    print re.match(r&apos;.*&apos;,&apos;abc\ndef&apos;).group() #abc 匹配1行</div><div class="line">    print re.match(r&apos;.*&apos;,&apos;abc\ndef&apos;,re.DOTALL).group()  #re.DOTALL表示dot可以匹配 \n</div><div class="line">    # abc</div><div class="line">    # def</div><div class="line"></div><div class="line">    #caret(^)</div><div class="line">    print re.findall(r&apos;^abc&apos;,&apos;abc\nabc&apos;) #[&apos;abc&apos;]</div><div class="line">    print re.findall(r&apos;^abc&apos;,&apos;abc\nabc&apos;,re.MULTILINE) #[&apos;abc&apos;,&apos;abc&apos;]</div><div class="line"></div><div class="line">    #$</div><div class="line">    print re.findall(r&apos;abc\d$&apos;, &apos;abc1\nabc2&apos;)  # [&apos;abc2&apos;]</div><div class="line">    print re.findall(r&apos;abc\d$&apos;, &apos;abc1\nabc2&apos;,re.MULTILINE)  # [&apos;abc1&apos;,&apos;abc2&apos;]</div><div class="line"></div><div class="line">    #greedy/non-greedy</div><div class="line">    s = &apos;&lt;H1&gt;title&lt;/H1&gt;&apos;</div><div class="line">    print re.match(r&apos;&lt;.*&gt;&apos;,s).group() #&lt;H1&gt;title&lt;/H1&gt;,贪婪模式匹配(默认)</div><div class="line">    print re.match(r&apos;&lt;.*?&gt;&apos;,s).group() #&lt;H1&gt;,加?,非贪婪模式匹配</div><div class="line">    print re.match(r&apos;ab&#123;2,4&#125;&apos;,&apos;abbbbb&apos;).group() #abbbb</div><div class="line">    print re.match(r&apos;ab&#123;2,4&#125;?&apos;,&apos;abbbbb&apos;).group() #abb</div><div class="line"></div><div class="line">    #[]:集合,匹配集合中的一个字符</div><div class="line">    print re.search(r&apos;0[xX]([0-9A-Fa-f]&#123;6&#125;)&apos;,&apos;The hex value is 0xFF03D6&apos;).group(1) #FF03D6</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    re_demo()</div></pre></td></tr></table></figure>
<h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h2><ul>
<li>re.compile()的返回类型为RegexObject.</li>
<li>RegexObject的方法：<ul>
<li>search</li>
<li>match</li>
<li>findall</li>
<li>split</li>
<li>finditer</li>
<li>sbu</li>
</ul>
</li>
<li>可大大提高效率</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import re</div><div class="line">def re_demo():</div><div class="line">    #\number:前一个匹配组</div><div class="line">    print re.search(r&apos;(\d)(\d)(\d)\1\2\3&apos;,&apos;135135&apos;).groups() #(&apos;1&apos;, &apos;3&apos;, &apos;5&apos;)</div><div class="line">    print re.search(r&apos;(\d)(\d)(\d)\1\2\3&apos;,&apos;135136&apos;) #None,不匹配</div><div class="line">    print re.search(r&apos;(\d&#123;3&#125;)\1&apos;,&apos;135135135&apos;).groups() #(&apos;135&apos;,)</div><div class="line">    print re.search(r&apos;(\d&#123;3&#125;)\1&apos;,&apos;135136&apos;) #None</div><div class="line">    print re.search(r&apos;(\d&#123;3&#125;) \1&apos;,&apos;135 135&apos;).groups() #(&apos;135&apos;,)</div><div class="line">    print re.search(r&apos;(\d&#123;3&#125;) \1&apos;,&apos;135 136&apos;) #None，不匹配</div><div class="line"></div><div class="line">    #re.VERROSE/re.compile():正则表达式中可添加注释</div><div class="line">    s = &apos;the number is 20.5&apos;</div><div class="line">    r = re.compile(r&apos;&apos;&apos;</div><div class="line">                    \d+ #整数部分</div><div class="line">                    \.? #小数点，可能包含也可能不包含</div><div class="line">                    \d* #小数部分，可选</div><div class="line">                    &apos;&apos;&apos;,re.VERBOSE)</div><div class="line">    print re.search(r,s).group() #20.5</div><div class="line">    #re.compile()</div><div class="line">    print r.search(s).group() #20.5</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    re_demo()</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python开发简单爬虫之实战演练]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E4%B9%8B%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>本博客来自慕课网—<a href="http://www.imooc.com/view/563" target="_blank" rel="external">Python开发简单爬虫</a></p>
<p>接上一篇博客：<a href="https://freeshow.github.io/2016/07/24/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E4%B9%8B%E7%88%AC%E8%99%AB%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/">Python开发简单爬虫之爬虫介绍</a></p>
<h1 id="一、爬虫实例-分析目标"><a href="#一、爬虫实例-分析目标" class="headerlink" title="一、爬虫实例-分析目标"></a>一、爬虫实例-分析目标</h1><center><img src="http://i.imgur.com/YpnnJ8O.jpg" alt=""></center>

<center><img src="http://i.imgur.com/TwsuxIR.jpg" alt=""></center>

<h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><center><img src="http://i.imgur.com/nMd2DG9.png" alt=""></center>

<h1 id="二、调度程序"><a href="#二、调度程序" class="headerlink" title="二、调度程序"></a>二、调度程序</h1><center><img src="http://i.imgur.com/fjADhzH.jpg" alt=""></center>

<h2 id="spider-main-py"><a href="#spider-main-py" class="headerlink" title="spider_main.py"></a>spider_main.py</h2><pre><code># -*- coding: utf-8 -*-

# 爬虫总调度程序，会以一个入口的url作为参数，爬取相关页面
from baike_spider import url_manager
from baike_spider import html_downloader
from baike_spider import html_parser
from baike_spider import html_outputer


class SpiderMain(object):
    def __init__(self):
        self.urls = url_manager.UrlManager()
        self.downloader = html_downloader.HtmlDownloader()
        self.parser = html_parser.HtmlParser()
        self.outputer = html_outputer.OutPuter()

    def craw(self, root_url):
        count = 1 #爬取的url个数
        self.urls.add_new_url(root_url)

           while self.urls.has_new_url():
            try:
                new_url = self.urls.get_new_url()
                print &apos;craw %s: %s&apos; %(count,new_url)
                html_cont = self.downloader.download(new_url)
                new_urls,new_data = self.parser.parse(new_url,html_cont)
                self.urls.add_new_urls(new_urls)
                self.outputer.collect_data(new_data)
                count = count + 1
               except:
                print &apos;craw failed&apos;

        #将结果显示在html页面中
        self.outputer.output_html()

if __name__ == &apos;__main__&apos;:
    # 入口url
    root_url = &apos;http://baike.baidu.com/view/21087.htm&apos;
    obj_spider = SpiderMain()
    # 爬虫开始
    obj_spider.craw(root_url)
</code></pre><h1 id="三、URL管理器"><a href="#三、URL管理器" class="headerlink" title="三、URL管理器"></a>三、URL管理器</h1><h2 id="url-manager-py"><a href="#url-manager-py" class="headerlink" title="url_manager.py"></a>url_manager.py</h2><pre><code># -*- coding: utf-8 -*-
class UrlManager(object):
    def __init__(self):
        self.new_urls = set()
        self.old_urls = set()

    def add_new_url(self, url):
        if url is None:
            return
        if url not in self.new_urls and url not in self.old_urls:
            self.new_urls.add(url)

    def add_new_urls(self, urls):
        if urls is None or len(urls) == 0:
            return
        for url in urls:
            self.add_new_url(url)

    def get_new_url(self):
        new_url = self.new_urls.pop()
        self.old_urls.add(new_url)
        return new_url

    def has_new_url(self):
        return len(self.new_urls) != 0
</code></pre><h1 id="四、HTML下载器html-downloader"><a href="#四、HTML下载器html-downloader" class="headerlink" title="四、HTML下载器html_downloader"></a>四、HTML下载器html_downloader</h1><h2 id="html-downloader-py"><a href="#html-downloader-py" class="headerlink" title="html_downloader.py"></a>html_downloader.py</h2><pre><code># -*- coding: utf-8 -*-
import urllib2

class HtmlDownloader(object):
    def download(self, url):
        if url is None:
            return

        response = urllib2.urlopen(url)

        if response.getcode() != 200:
            return None

        return response.read()
</code></pre><h1 id="五、HTML解析器html-parser"><a href="#五、HTML解析器html-parser" class="headerlink" title="五、HTML解析器html_parser"></a>五、HTML解析器html_parser</h1><h2 id="html-parser-py"><a href="#html-parser-py" class="headerlink" title="html_parser.py"></a>html_parser.py</h2><pre><code># -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
import re
import urlparse

class HtmlParser(object):
    def parse(self, page_url,html_cont):
        if page_url is None or html_cont is None:
            return

        soup = BeautifulSoup(html_cont,&apos;html.parser&apos;,from_encoding=&apos;utf-8&apos;)
        new_urls = self._get_new_urls(page_url,soup)
        new_data = self._get_new_data(page_url,soup)

        return new_urls,new_data

    def _get_new_urls(self, page_url, soup):
           new_urls = set()
        #/view/123.htm
        links = soup.find_all(&apos;a&apos;,href = re.compile(r&apos;/view/\d+\.htm&apos;))
        for link in links:
            #page_url:http://baike.baidu.com/view/21087.htm
            #new_url: /view/10812319.htm
            #new_full_url: http://baike.baidu.com/view/10812319.htm
            new_url = link[&apos;href&apos;]
            new_full_url = urlparse.urljoin(page_url,new_url)
            new_urls.add(new_full_url)
        return new_urls

    #获取标题和简介
    def _get_new_data(self, page_url, soup):
        res_data = {}

        #url
        res_data[&apos;url&apos;] = page_url

        #获取词条标题
        #&lt;dd class=&quot;lemmaWgt-lemmaTitle-title&quot;&gt;
        #    &lt;h1&gt;Python&lt;/h1&gt;
        title_node = soup.find(&apos;dd&apos;,class_=&apos;lemmaWgt-lemmaTitle-title&apos;).find(&apos;h1&apos;)
        res_data[&apos;title&apos;] = title_node.get_text()

        #获取词条简介
        #&lt;div class=&quot;lemma-summary&quot; label-module=&quot;lemmaSummary&quot;&gt;
        summary_node = soup.find(&apos;div&apos;,class_=&apos;lemma-summary&apos;)
        res_data[&apos;summary&apos;] = summary_node.get_text()

        return res_data
</code></pre><h1 id="六、HTML输出器"><a href="#六、HTML输出器" class="headerlink" title="六、HTML输出器"></a>六、HTML输出器</h1><h2 id="html-outputer-py"><a href="#html-outputer-py" class="headerlink" title="html_outputer.py"></a>html_outputer.py</h2><pre><code># -*- coding: utf-8 -*-
class OutPuter(object):
    def __init__(self):
        self.datas = []

    def collect_data(self, data):
        if data is None:
            return
        #print data
        self.datas.append(data)

    def output_html(self):
        with open(&apos;output.html&apos;,&apos;w&apos;) as fout:
            fout.write(&apos;&lt;html&gt;&apos;)
            fout.write(&apos;&lt;head&gt;&apos;)
            #指定网页的编码格式
            fout.write(&apos;&lt;meta charset=&quot;UTF-8&quot;&gt;&apos;)
            fout.write(&apos;&lt;/head&gt;&apos;)
            fout.write(&apos;&lt;body&gt;&apos;)
            fout.write(&apos;&lt;table&gt;&apos;)

            #python的默认编码是ascii,需要转码为utf-8
            for data in self.datas:
                fout.write(&apos;&lt;tr&gt;&apos;)
                fout.write(&apos;&lt;td&gt;%s&lt;/td&gt;&apos; % data[&apos;url&apos;])
                fout.write(&apos;&lt;td&gt;%s&lt;/td&gt;&apos; % data[&apos;title&apos;].encode(&apos;UTF-8&apos;))
                fout.write(&apos;&lt;td&gt;%s&lt;/td&gt;&apos; % data[&apos;summary&apos;].encode(&apos;UTF-8&apos;))
                fout.write(&apos;&lt;/tr&gt;&apos;)

            fout.write(&apos;&lt;/table&gt;&apos;)
            fout.write(&apos;&lt;/body&gt;&apos;)
            fout.write(&apos;&lt;/html&gt;&apos;)
</code></pre><h1 id="七、开始运行爬虫和爬取结果展示"><a href="#七、开始运行爬虫和爬取结果展示" class="headerlink" title="七、开始运行爬虫和爬取结果展示"></a>七、开始运行爬虫和爬取结果展示</h1><h2 id="运行spider-main-py"><a href="#运行spider-main-py" class="headerlink" title="运行spider_main.py"></a>运行spider_main.py</h2><h2 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h2><center><img src="http://i.imgur.com/bHEyJqH.png" alt=""></center>





</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python开发简单爬虫之爬虫介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Python%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E4%B9%8B%E7%88%AC%E8%99%AB%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>本博客来自慕课网—<a href="http://www.imooc.com/view/563" target="_blank" rel="external">Python开发简单爬虫</a></p>
<p>爬虫主要场景:</p>
<ul>
<li>不需要登录的静态网页</li>
<li>使用Ajax异步加载的内容</li>
<li>需要用户登录才可以访问的网页</li>
</ul>
<p>以下主要介绍 <code>不需要登录的静态网页</code>。</p>
<h1 id="一、爬虫简介以及爬虫的技术价值"><a href="#一、爬虫简介以及爬虫的技术价值" class="headerlink" title="一、爬虫简介以及爬虫的技术价值"></a>一、爬虫简介以及爬虫的技术价值</h1><h2 id="1-爬虫是什么"><a href="#1-爬虫是什么" class="headerlink" title="1. 爬虫是什么"></a>1. 爬虫是什么</h2><center><img src="http://i.imgur.com/3yzbpF9.jpg" alt=""></center>

<hr>
<h2 id="2-爬虫技术的价值"><a href="#2-爬虫技术的价值" class="headerlink" title="2. 爬虫技术的价值"></a>2. 爬虫技术的价值</h2><center><img src="http://i.imgur.com/6QRgBJU.jpg" alt=""></center>

<h1 id="二、简单爬虫架构"><a href="#二、简单爬虫架构" class="headerlink" title="二、简单爬虫架构"></a>二、简单爬虫架构</h1><h2 id="1-简单爬虫架构"><a href="#1-简单爬虫架构" class="headerlink" title="1. 简单爬虫架构"></a>1. 简单爬虫架构</h2><center><img src="http://i.imgur.com/mNcxZ03.jpg" alt=""></center>

<ul>
<li>爬虫调度端：开启爬虫、终止爬虫、监视爬虫的运行情况</li>
<li>URL管理器：将要爬取的URL和已经爬取过的URL进行管理</li>
<li>网页下载器：从URL管理器中的URL中下载网页，并生成字符串</li>
<li>网页解析器：解析出网页下载器的中内容。一方面解析出有用的价值数据；一方面，网页中都存在链接，将解析出的链接，有送回到URL管理器。</li>
</ul>
<p>URL管理器、网页下载器、网页解析器，就形成了一个循环，只要有URL就会一直运行下去。就会将互联网上所有相关联的网页都爬取下来。</p>
<h2 id="2-简单爬虫架构的动态运行流程"><a href="#2-简单爬虫架构的动态运行流程" class="headerlink" title="2.简单爬虫架构的动态运行流程"></a>2.简单爬虫架构的动态运行流程</h2><center><img src="http://i.imgur.com/mg9CLgo.jpg" alt=""></center>

<h1 id="三、URL管理器和实现方法"><a href="#三、URL管理器和实现方法" class="headerlink" title="三、URL管理器和实现方法"></a>三、URL管理器和实现方法</h1><h2 id="1-URL管理器"><a href="#1-URL管理器" class="headerlink" title="1.URL管理器"></a>1.URL管理器</h2><center><img src="http://i.imgur.com/L2U9sbj.jpg" alt=""></center>

<ul>
<li>添加新URL到待爬取URL集合中，首先判断待添加的URL是否在URL管理器中，如果在，则不添加；如果不在，则可以添加。</li>
<li>获取待爬取URL，首先判断URL管理器中是否有带爬取的URL，如果有，则获取待爬取URL，并将URL从待爬取URL移动到已爬取URL。如果没有，则说明爬取结束。</li>
</ul>
<h2 id="2-URL管理器的实现方法"><a href="#2-URL管理器的实现方法" class="headerlink" title="2. URL管理器的实现方法"></a>2. URL管理器的实现方法</h2><p>3中实现方式：</p>
<center><img src="http://i.imgur.com/8v4Ofpy.jpg" alt=""></center>

<h1 id="四、网页下载器和urllib2模块"><a href="#四、网页下载器和urllib2模块" class="headerlink" title="四、网页下载器和urllib2模块"></a>四、网页下载器和urllib2模块</h1><h2 id="1-网页下载器简介"><a href="#1-网页下载器简介" class="headerlink" title="1. 网页下载器简介"></a>1. 网页下载器简介</h2><center><img src="http://i.imgur.com/QMYXrh9.jpg" alt=""></center>

<center><img src="http://i.imgur.com/Gg4MHBi.jpg" alt=""></center>


<h2 id="2-urlib2下载器网页的三种方法"><a href="#2-urlib2下载器网页的三种方法" class="headerlink" title="2.urlib2下载器网页的三种方法"></a>2.urlib2下载器网页的三种方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><center><img src="http://i.imgur.com/fFsvtzA.jpg" alt=""></center>

<center><img src="http://i.imgur.com/b6weheu.jpg" alt=""></center>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><center><img src="http://i.imgur.com/GIAZbrZ.jpg" alt=""></center>

<center><img src="http://i.imgur.com/9oBkc8a.jpg" alt=""></center>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><center><img src="http://i.imgur.com/4Wp3rnN.jpg" alt=""></center><br><center><img src="http://i.imgur.com/kS3Yzxo.jpg" alt=""></center>

<hr>
<h2 id="3-urlib2实例代码演示"><a href="#3-urlib2实例代码演示" class="headerlink" title="3.urlib2实例代码演示"></a>3.urlib2实例代码演示</h2><center><img src="http://i.imgur.com/uXJ8QbO.jpg" alt=""></center>

<h1 id="五、网页解析器和BeautifulSoup第三方库"><a href="#五、网页解析器和BeautifulSoup第三方库" class="headerlink" title="五、网页解析器和BeautifulSoup第三方库"></a>五、网页解析器和BeautifulSoup第三方库</h1><h2 id="1-网页解析器"><a href="#1-网页解析器" class="headerlink" title="1. 网页解析器"></a>1. 网页解析器</h2><center><img src="http://i.imgur.com/Z3eDGvg.jpg" alt=""></center>

<center><img src="http://i.imgur.com/Nr2s3ht.jpg" alt=""></center>

<center><img src="http://i.imgur.com/spEByBx.jpg" alt=""></center>

<h2 id="2-BeautifulSoup模块介绍和安装"><a href="#2-BeautifulSoup模块介绍和安装" class="headerlink" title="2. BeautifulSoup模块介绍和安装"></a>2. BeautifulSoup模块介绍和安装</h2><center><img src="http://i.imgur.com/CZG0YAp.jpg" alt=""></center>

<h2 id="3-BeautifulSoup的语法"><a href="#3-BeautifulSoup的语法" class="headerlink" title="3. BeautifulSoup的语法"></a>3. BeautifulSoup的语法</h2><h3 id="BeautifulSoup语法"><a href="#BeautifulSoup语法" class="headerlink" title="BeautifulSoup语法"></a>BeautifulSoup语法</h3><center><img src="http://i.imgur.com/MvgIxph.jpg" alt=""></center>

<center><img src="http://i.imgur.com/zSemshi.jpg" alt=""></center>

<h3 id="创建BeautifulSoup对象"><a href="#创建BeautifulSoup对象" class="headerlink" title="创建BeautifulSoup对象"></a>创建BeautifulSoup对象</h3><center><img src="http://i.imgur.com/32VBhPh.jpg" alt=""></center>

<h3 id="搜索节点find-all、find"><a href="#搜索节点find-all、find" class="headerlink" title="搜索节点find_all、find"></a>搜索节点find_all、find</h3><center><img src="http://i.imgur.com/hS3Sjlg.jpg" alt=""></center>

<p>python中已经存在关键字class,故当属性为class时，用class_代替。</p>
<h3 id="访问节点信息"><a href="#访问节点信息" class="headerlink" title="访问节点信息"></a>访问节点信息</h3><center><img src="http://i.imgur.com/osC8d44.jpg" alt=""></center>

<h2 id="4-BeautifulSoup实例测试"><a href="#4-BeautifulSoup实例测试" class="headerlink" title="4. BeautifulSoup实例测试"></a>4. BeautifulSoup实例测试</h2><pre><code># -*- coding: utf-8 -*-
import re
from bs4 import BeautifulSoup

html_doc = &quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and
&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&quot;&quot;&quot;
def run_demo():
    soup = BeautifulSoup(html_doc,&apos;html.parser&apos;,from_encoding=&apos;utf-8&apos;)

    print &apos;获取所有的链接：&apos;
    links = soup.find_all(&apos;a&apos;)
    for link in links:
        print link.name,link[&apos;href&apos;],link.get_text()

    print &apos;获取lacie的链接&apos;
    link_node = soup.find(&apos;a&apos;,href=&apos;http://example.com/lacie&apos;)
    print link_node.name, link_node[&apos;href&apos;], link_node.get_text()

    print &apos;获取正则匹配&apos;
    link_node = soup.find(&apos;a&apos;, href=re.compile(r&apos;ill&apos;))
    print link_node.name, link_node[&apos;href&apos;], link_node.get_text()
    #a http://example.com/tillie Tillie

    print &apos;获取p段落文字&apos;
    p_node = soup.find(&apos;p&apos;, class_=&apos;title&apos;)
    print p_node.name,p_node.get_text()


if __name__ == &apos;__main__&apos;:
    run_demo()
</code></pre></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeSwitch压力测试]]></title>
      <url>http://freeshow.github.io/2016/07/24/FreeSwitch%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一-安装sipp"><a href="#一-安装sipp" class="headerlink" title="一.安装sipp"></a>一.安装sipp</h2><p>这一步很简单，按照sipp的官网上的安装步骤安装即可。</p>
<h2 id="二-通过mod-xml-curl为FreeSwitch添加动态账户验证。"><a href="#二-通过mod-xml-curl为FreeSwitch添加动态账户验证。" class="headerlink" title="二.通过mod_xml_curl为FreeSwitch添加动态账户验证。"></a>二.通过mod_xml_curl为FreeSwitch添加动态账户验证。</h2><h3 id="1-配置mod-xml-curl添加动态账号验证，前面博客已写。"><a href="#1-配置mod-xml-curl添加动态账号验证，前面博客已写。" class="headerlink" title="1. 配置mod_xml_curl添加动态账号验证，前面博客已写。"></a>1. 配置mod_xml_curl添加动态账号验证，前面博客已写。</h3><h3 id="2-往数据库中添加注册账号。"><a href="#2-往数据库中添加注册账号。" class="headerlink" title="2. 往数据库中添加注册账号。"></a>2. 往数据库中添加注册账号。</h3><p>创建存储过程addUsers(),向freeswitch数据库的users中添加100000条用户：<br>使用Navicate,点击 <code>Function --&gt; New Function --&gt;Proceduce</code> 创建addUsers存储过程。</p>
<center><img src="http://i.imgur.com/Lr0WoEi.png" alt=""></center>

<p>addUser()函数如下：</p>
<pre><code>BEGIN
    #Routine body goes here...
    DECLARE i INT;
    SET i = 1;

    WHILE i &lt;100000  do
        INSERT INTO users(name,passwd) VALUES(i,&apos;1234&apos;); 
        SET i=i+1;
    END WHILE;
END
</code></pre><p>然后点击按钮run,就可在users表中添加100000条注册账户。</p>
<h2 id="三-FreeSWITCH注册的压力测试。"><a href="#三-FreeSWITCH注册的压力测试。" class="headerlink" title="三. FreeSWITCH注册的压力测试。"></a>三. FreeSWITCH注册的压力测试。</h2><h3 id="1-编写注册脚本reg-xml"><a href="#1-编写注册脚本reg-xml" class="headerlink" title="1.编写注册脚本reg.xml"></a>1.编写注册脚本reg.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;
    &lt;scenario name=&quot;Basic Sipstone UAC&quot;&gt;
         &lt;send retrans=&quot;500&quot;&gt;
            &lt;![CDATA[
                  REGISTER sip:[remote_ip] SIP/2.0
                  Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
                  From: &lt;sip:[field0]@[field1]&gt;;tag=[call_number]
                  To: &lt;sip:[field0]@[field1]&gt;
                  Call-ID: [call_id]
                  CSeq: [cseq] REGISTER
                  Contact: sip:[field0]@[local_ip]:[local_port]
                  Max-Forwards: 10
                  Expires: 3600
                  User-Agent: SIPp/Win32
                  Content-Length: 0
            ]]&gt;
      &lt;/send&gt;

      &lt;!-- kamailio --&gt;
      &lt;recv response=&quot;100&quot; optional=&quot;true&quot;&gt;&lt;/recv&gt;

      &lt;recv response=&quot;401&quot; auth=&quot;true&quot;&gt;&lt;/recv&gt;

      &lt;send retrans=&quot;500&quot;&gt;
        &lt;![CDATA[
            REGISTER sip:[remote_ip] SIP/2.0
              Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
              From: &lt;sip:[field0]@[field1]&gt;;tag=[call_number]
              To: &lt;sip:[field0]@[field1]&gt;
              Call-ID: [call_id]
              CSeq: [cseq] REGISTER
              Contact: sip:[field0]@[local_ip]:[local_port]
              [field2]
              Max-Forwards: 10
              Expires: 3600
              User-Agent: SIPp/Win32
              Content-Length: 0
        ]]&gt;
    &lt;/send&gt;
</code></pre><h3 id="2-编写freeswitchreg-csv"><a href="#2-编写freeswitchreg-csv" class="headerlink" title="2. 编写freeswitchreg.csv"></a>2. 编写freeswitchreg.csv</h3><p>添加100000条账户。</p>
<pre><code>SEQUENTIAL
1;freeswitch.org;[authentication username=1 password=1234]
2;freeswitch.org;[authentication username=2 password=1234]
3;freeswitch.org;[authentication username=3 password=1234]
4;freeswitch.org;[authentication username=4 password=1234]
5;freeswitch.org;[authentication username=5 password=1234]
6;freeswitch.org;[authentication username=6 password=1234]
7;freeswitch.org;[authentication username=7 password=1234]
8;freeswitch.org;[authentication username=8 password=1234]
9;freeswitch.org;[authentication username=9 password=1234]
10;freeswitch.org;[authentication username=10 password=1234]
...... //100000条用户
</code></pre><p>其中，freeswitch.org替换为你freeswitch服务器的ip地址(当然去掉也可以)。</p>
<h3 id="3-使用sipp进行FreeSwitch注册的压力测试"><a href="#3-使用sipp进行FreeSwitch注册的压力测试" class="headerlink" title="3.使用sipp进行FreeSwitch注册的压力测试"></a>3.使用sipp进行FreeSwitch注册的压力测试</h3><p><strong>执行命令</strong>：</p>
<pre><code>sudo ./sipp -sf reg.xml -inf freeswitchreg.csv -i sippIp -p 5555 -r 100 -d 100000 freeswitch.org
</code></pre><ul>
<li>sf：指定注册脚本</li>
<li>-inf：指定注册用户信息</li>
<li>-i：sipp所在主机地址</li>
<li>-p：sipp端口号</li>
<li>-r：每秒发送多少sip消息</li>
<li>-d：sip消息持续时间(ms)</li>
<li>freeswitch.org：freeswitch服务器所在地址，默认为5060端口号，如果修改了端口号，则格式为freeswitch.org:port</li>
</ul>
<p><strong>测试结果</strong>:</p>
<p>在freeswitch控制台中输入：</p>
<pre><code>sofia status profile internal reg
</code></pre><p>测试效果如下图：</p>
<center><img src="http://i.imgur.com/j65iJIk.png" alt=""></center>

<h2 id="四、FreeSwitch呼叫的压力测试"><a href="#四、FreeSwitch呼叫的压力测试" class="headerlink" title="四、FreeSwitch呼叫的压力测试"></a>四、FreeSwitch呼叫的压力测试</h2><h3 id="1-修改FreeSWITCH的dialplan"><a href="#1-修改FreeSWITCH的dialplan" class="headerlink" title="1.修改FreeSWITCH的dialplan"></a>1.修改FreeSWITCH的dialplan</h3><pre><code>/usr/local/freeswitch/conf/dialplan
vi public.xml
</code></pre><p>修改如下：</p>
<pre><code>&lt;extension name=&quot;public_extensions&quot;&gt;
  &lt;condition field=&quot;destination_number&quot; expression=&quot;^(.*)$&quot;&gt;
    &lt;action application=&quot;transfer&quot; data=&quot;$1 XML default&quot;/&gt;
  &lt;/condition&gt;
&lt;/extension&gt;
</code></pre><p>即将原先的只能呼叫freeswitch中的1000-1019的默认20个用户，改为呼叫所有用户，即<code>^(.*)$</code></p>
<p>同样，修改<code>default.xml</code>“，修改如下：</p>
<pre><code>&lt;extension name=&quot;Local_Extension&quot;&gt;
  &lt;condition field=&quot;destination_number&quot; expression=&quot;^(.*)$&quot;&gt;
    &lt;action application=&quot;export&quot; data=&quot;dialed_extension=$1&quot;/&gt;
    ......
</code></pre><h3 id="2-使用sipp进行呼叫测试"><a href="#2-使用sipp进行呼叫测试" class="headerlink" title="2.使用sipp进行呼叫测试"></a>2.使用sipp进行呼叫测试</h3><p><strong>执行命令</strong>：</p>
<pre><code>sipp -sn uac -r 30 -d 100000 -rtp_echo freeswitch.org:5080
</code></pre><ul>
<li>freeswitch.org为freeswitch所在主机的地址。</li>
</ul>
<p><strong>测试效果如下</strong>：</p>
<center><img src="http://i.imgur.com/QnkSKiG.png" alt=""></center>

</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeSwitch使用mod_xml_curl提供动态用户管理]]></title>
      <url>http://freeshow.github.io/2016/07/24/FreeSwitch%E4%BD%BF%E7%94%A8mod-xml-curl%E6%8F%90%E4%BE%9B%E5%8A%A8%E6%80%81%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、实现思路"><a href="#一、实现思路" class="headerlink" title="一、实现思路　　"></a>一、实现思路　　</h2><p>FreeSWITCH默认使用静态的XML文件配置用户，但如果要动态认证，就需要跟数据库相关联。FreeSWITCH通过使用mod_xml_curl模块完美解决了这个问题。它的实现思路是你自己提供一个HTTP服务器，当有用户有注册请求时(或INVITE或其它，总之需要XML的请求时)，FreeSWITCH向你的HTTP服务器发送请求，你查询数据库生成一个标准的XML文件，FreeSWITCH进而通过这一文件所描述的用户信息对用户进行认证。</p>
<p>　　The Logic is simple. Incoming SIP requests are received by Freeswitch which asks a web-service about the details of the user. The web-server just queries data and if any relevant details are found returns them in XML format. Freeswitch accepts or reject the SIP request depending upon the XML response.</p>
  <center><img src="http://i.imgur.com/0CMNXpN.png" alt=""></center>

<p>Another way to represent the above flowchart.</p>
<center><img src="http://i.imgur.com/oCUkIfI.png" alt=""></center>


<h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><h3 id="1-安装Apache-php5-mysql-phpmyadmin"><a href="#1-安装Apache-php5-mysql-phpmyadmin" class="headerlink" title="1.安装Apache+php5+mysql+phpmyadmin"></a>1.安装Apache+php5+mysql+phpmyadmin</h3><h3 id="2-FreeSwitch加载mod-xml-curl模块"><a href="#2-FreeSwitch加载mod-xml-curl模块" class="headerlink" title="2.FreeSwitch加载mod_xml_curl模块"></a>2.FreeSwitch加载mod_xml_curl模块</h3><p>(1)在源码目录下：</p>
<pre><code>cd /usr/src/freeswitch
make mod_xml_curl &amp;&amp; make mod_xml_curl-install
</code></pre><p>(2)Then enable the module in modules.conf</p>
<pre><code>cd /usr/local/freeswitch/conf/
vim /usr/local/freeswitch/conf/autoload_configs/modules.conf.xml
</code></pre><p>Uncomment the following tag by removing the  “&lt;!–”and “–>“</p>
<pre><code>&lt;!-- &lt;load module=&quot;mod_xml_curl&quot;/&gt; --&gt;
</code></pre><h3 id="3-为mod-xml-curl绑定网关"><a href="#3-为mod-xml-curl绑定网关" class="headerlink" title="3.为mod_xml_curl绑定网关"></a>3.为mod_xml_curl绑定网关</h3><p>Edit the settingfor the XML_CURL module.</p>
<pre><code>vim /usr/local/freeswitch/conf/autoload_configs/xml_curl.conf.xml
</code></pre><p>The most importthing is to set the web-service URL where FS will send all the queries.</p>
<pre><code>&lt;configuration name=&quot;xml_curl.conf&quot; description=&quot;cURL XML Gateway&quot;&gt;
  &lt;bindings&gt;
    &lt;binding name=&quot;directory&quot;&gt;
        &lt;param name=&quot;gateway-url&quot; value=&quot;http://localhost/fs_curl/directory.php&quot; bindings=&quot;directory&quot;/&gt;
     &lt;/binding&gt;
    &lt;/bindings&gt;
&lt;/configuration&gt;
</code></pre><p>In my case the web-server is on localhost and I plan on using the sub directory fs_curl for the php pages.</p>
<h3 id="4-编写-万能脚本-directory-php"><a href="#4-编写-万能脚本-directory-php" class="headerlink" title="4.编写(万能脚本)directory.php"></a>4.编写(万能脚本)directory.php</h3><pre><code>&lt;?php
   $user =  $_POST[&apos;user&apos;];
   $domain = $_POST[&apos;domain&apos;];
  $password = &quot;1234&quot;;
?&gt;

&lt;document type=&quot;freeswitch/xml&quot;&gt;
    &lt;section name=&quot;directory&quot;&gt;
        &lt;domain name=&quot;&lt;?php echo $domain;?&gt;&quot;&gt;
              &lt;params&gt;
                &lt;param name=&quot;dial-string&quot; value=&quot;{presence_id=${dialed_user}@${dialed_domain}}${sofia_contact(${dialed_user}@${dialed_domain})}&quot;/&gt;
             &lt;/params&gt;
            &lt;groups&gt;
                &lt;group name=&quot;default&quot;&gt;
                      &lt;users&gt;
                        &lt;user id=&quot;&lt;?php echo $user; ?&gt;&quot;&gt;
                             &lt;params&gt;
                                &lt;param name=&quot;password&quot; value=&quot;&lt;?php echo $password; ?&gt;&quot;/&gt;
                                &lt;param name=&quot;vm-password&quot; value=&quot;&lt;?php echo $password; ?&gt;&quot;/&gt;
                            &lt;/params&gt;
                              &lt;variables&gt;
                                &lt;variable name=&quot;toll_allow&quot; value=&quot;domestic,international,local&quot;/&gt;
                                &lt;variable name=&quot;accountcode&quot; value=&quot;&lt;?php echo $user; ?&gt;&quot;/&gt;
                                &lt;variable name=&quot;user_context&quot; value=&quot;default&quot;/&gt;
                                &lt;variable name=&quot;effective_caller_id_name&quot; value=&quot;FreeSWITCH-CN&quot;/&gt;
                                &lt;variable name=&quot;effective_caller_id_number&quot; value=&quot;&lt;?php echo     $user;?&gt;&quot;/&gt;
                                &lt;!-- &lt;variable name=&quot;outbound_caller_id_name&quot; value=&quot;$${outbound_caller_name}&quot;/&gt; --&gt;
                                &lt;!-- &lt;variable name=&quot;outbound_caller_id_number&quot; value=&quot;$${outbound_caller_id}&quot;/&gt; --&gt;
                                &lt;variable name=&quot;callgroup&quot; value=&quot;default&quot;/&gt;
                                &lt;variable name=&quot;sip-force-contact&quot; value=&quot;NDLB-connectile-dysfunction&quot;/&gt;
                                &lt;variable name=&quot;x-powered-by&quot; value=&quot;http://www.freeswitch.org.cn&quot;/&gt;
                              &lt;/variables&gt;
                        &lt;/user&gt;
                      &lt;/users&gt;
                &lt;/group&gt;
              &lt;/groups&gt;
        &lt;/domain&gt;
      &lt;/section&gt;
&lt;/document&gt;
</code></pre><p>将上面的directory.php放到<strong>/var/www/html//fs_curl/</strong>目录下。</p>
<p>然后，</p>
<pre><code>reloadxml
reload mod_xml_curl
</code></pre><p>通过上述脚本变可生成XML并返回给FreeSWITCH，然后FreeSWITCH在解析该XML并进行下一步的认证等操作。因为该脚本根本不查询数据库，也没有任何业务逻辑，任何注册或呼叫请求只要密码是1234就都能通过验证，因此，我们可以把它称做<strong>万能脚本</strong>.当然，熟悉PHP的读者可以自己尝试添加一些if…else类的条件判断以针对不同的用户返回不同的XML，或者通过查询数据库构造不同的XML。</p>
<h3 id="5-directory-php中通过查询数据库来生成用户的XML验证"><a href="#5-directory-php中通过查询数据库来生成用户的XML验证" class="headerlink" title="5. directory.php中通过查询数据库来生成用户的XML验证"></a>5. directory.php中通过查询数据库来生成用户的XML验证</h3><p>(1)创建数据库表，用户存储用户名和密码</p>
<p>创建数据库表：users,用来存储所有用户的用户名和密码</p>
<center><img src="http://i.imgur.com/c4PaBWu.png" alt=""></center>

<p>(2) 重写上面的万能脚本directory.php,从数据库中查询用户的验证密码。</p>
<pre><code>&lt;?php
      $user =  $_POST[&apos;user&apos;];
      $domain = $_POST[&apos;domain&apos;];

      $host = &quot;127.0.0.1&quot;;
      $dbroot = &quot;root&quot;;
      $dbpwd = &quot;root&quot;;
      $dbname = &quot;freeswitch&quot;;
      $dbtable = &quot;users&quot;;

      $con = mysql_connect($host,$dbroot,$dbpwd);
      if ($con == false)
      {
            echo &quot;connect databse failuer!&quot;;
      }
      mysql_select_db(&quot;$dbname&quot;, $con);
      $result = mysql_query(&quot;SELECT * FROM $dbtable WHERE name = &apos;$user&apos;&quot;);

      //echo $result，will error
      while($row = mysql_fetch_array($result))
      {
        $password = $row[&apos;passwd&apos;];
      }

      # echo $password;

       mysql_close($con);
?&gt;
//后面的与上面的directory.php
</code></pre><h2 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h2><p>如果在测试过程中遇到错误，试着看一看出错的内容，一般是HTTP服务器无法正常访问造成的。如果没有直接看到错误，可以在控制台上打开mod_xml_curl的调试选项，如：</p>
<pre><code>freeswitch&gt; xml_curl debug_on
</code></pre><p>然后，FreeSWITCH会将每次请求得到的XML文件保存到文件名类似/tmp/xxx.xml的文件中，检查一下里面的内容是否跟你HTTP服务预期的输出是一致的。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Win10下MarkdownPad安装及问题]]></title>
      <url>http://freeshow.github.io/2016/07/24/Win10%E4%B8%8BMarkdownPad%E5%AE%89%E8%A3%85%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="注册码"><a href="#注册码" class="headerlink" title="注册码"></a>注册码</h2><p>MarkdownPad2.5 注册码：</p>
<blockquote>
<p>邮箱：Soar360@live.com</p>
<p>授权秘钥：</p>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqN<br>Y5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl<br>/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/<br>ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
</blockquote>
<hr>
<p>##安装后，预览无法显示问题</p>
<p><img src="http://i.imgur.com/zu7sGKf.png" alt=""></p>
<p>官网给出的解决方案地址：<br><a href="http://markdownpad.com/faq.html#livepreview-directx" title="官网给出的解决方案地址：" target="_blank" rel="external">http://markdownpad.com/faq.html#livepreview-directx</a></p>
<blockquote>
<p>This issue has been specifically observed in Windows 8. You may see an error message <a href="http://markdownpad.com/img/faq/markdownpad-livepreview-crash-directx.png" target="_blank" rel="external">as shown here</a>, and no HTML will be rendered when you type in the Markdown Editor pane.</p>
<p>To fix this issue, please try installing the <a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">Awesomium 1.6.6 SDK</a>.</p>
<p>If you continue to experience issues, please install <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8109" target="_blank" rel="external">Microsoft’s DirectX End-User Runtimes (June 2010)</a>.</p>
</blockquote>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04安装Apache+php5+mysql+phpmyadmin]]></title>
      <url>http://freeshow.github.io/2016/07/24/Ubuntu14-04%E5%AE%89%E8%A3%85Apache-php5-mysql-phpmyadmin/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、安装apache2"><a href="#一、安装apache2" class="headerlink" title="一、安装apache2"></a>一、安装apache2</h2><ol>
<li><p>打开终端：Ctrl+Alt+T,更新最新源：</p>
<blockquote>
<p>sudo apt-get update</p>
</blockquote>
</li>
<li><p>通过apt-get方式安装Apache:</p>
<blockquote>
<p>sudo apt-get install apache2//中途要输入y确认</p>
</blockquote>
</li>
</ol>
<p>　　检测安装是否成功: 在浏览器输入：127.0.0.1或locahost.浏览器上出现内容并有It works.说明安装成功！</p>
<p>注：</p>
<ul>
<li>Apache在Ubuntu中默认根目录为：/var/www/html</li>
<li>主配置文件目录为：/etc/apache2/apache2.conf</li>
<li>虚拟机配置目录为：/etc/apache2/sites-enabled</li>
</ul>
<h2 id="二、安装php5"><a href="#二、安装php5" class="headerlink" title="二、安装php5"></a>二、安装php5</h2><p>1.安装php5和apachephp5模块</p>
<blockquote>
<p>sudo apt-get install php5 libapache2-mod-php5</p>
<p>//其实libapache2-mod-php5可以不写，新版的源里已经自带了</p>
</blockquote>
<p>2.安装好后，重启apache:</p>
<blockquote>
<p>/etc/init.d/apache2 restart</p>
</blockquote>
<h2 id="三、安装mysql"><a href="#三、安装mysql" class="headerlink" title="三、安装mysql"></a>三、安装mysql</h2><p>1.安装mysql</p>
<blockquote>
<p>sudo apt-get install mysql-server mysql-client</p>
</blockquote>
<p>中途会出现以下提示：</p>
<center><img src="http://i.imgur.com/flBZohA.jpg" alt=""></center>

<p>设置mysql密码。</p>
<p>2.测试mysql是否安装成功</p>
<blockquote>
<p>mysql -u root -p </p>
</blockquote>
<p>输入mysql root 密码即可</p>
<p>3.为PHP安装mysql扩展和其它扩展。</p>
<p>查看所有扩展：</p>
<blockquote>
<p>sudo apt-cache search php5</p>
</blockquote>
<p>找到自己要安装的模块名字，按如下格式输入命令:</p>
<blockquote>
<p>sudo apt-get install php5-mysql php5-curl php5-gd</p>
</blockquote>
<p>重启apache.</p>
<h2 id="四、安装phpmyadmin"><a href="#四、安装phpmyadmin" class="headerlink" title="四、安装phpmyadmin"></a>四、安装phpmyadmin</h2><p>1.下载phpmyadmin</p>
<blockquote>
<p>sudo apt-get install phpmyadmin</p>
</blockquote>
<p>注：</p>
<blockquote>
<p>phpmyadmin会自动安装在/usr/share/phpMyAdmin下，需要将 phpMyAdmin文件夹拷贝到/var/www/html目录下</p>
</blockquote>
<p>使用命令：</p>
<blockquote>
<p>sudo ln -s /usr/share/phpmyadmin/ /var/www/html/</p>
</blockquote>
<p>浏览器输入localhost/phpmyadmin就可以看到管理数据库的界面了。</p>
<p>配置完成！</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下C语言入门准备]]></title>
      <url>http://freeshow.github.io/2016/07/24/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h2><p>目录结构：</p>
<ul>
<li>src：    存放源文件 <em>.c  </em>.cpp</li>
<li>include：存放头文件 *.h</li>
<li>obj    ：存放目标文件 *.o (中间产物)</li>
<li>lib：存放库文件 <em>.so  </em>.a *.so.1</li>
<li>bin    ：存放二进制可执行程序 </li>
</ul>
<hr>
<h2 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h2><p>#开始的命令<br>例如：<br>1.#include</p>
<p>头文件搜索方式:</p>
<ul>
<li>#include “”    //非标准头文件(用户的),优先从用户指定的头文件路径进行搜索    </li>
<li>#include &lt;&gt;    //标准头文件(系统的),优先从系统的默认头文件路径进行搜索</li>
</ul>
<p>2.#if<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#if 0   在预处理期代码会被去除(等同与注释，注释在预处理期会被去除)</div><div class="line">注释一</div><div class="line"> /*</div><div class="line"></div><div class="line">	注释二</div><div class="line"> </div><div class="line"> */</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>3.#ifndef ：用于编写头文件，避免头文件重复定义</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a.h</div><div class="line">	int i;</div><div class="line">-----------------</div><div class="line">b.h</div><div class="line">	#include &quot;a.h&quot;</div><div class="line">------------------</div><div class="line">c.h</div><div class="line">	#include &quot;a.h&quot;  --&gt;  int i;</div><div class="line">	#include &quot;b.h&quot;  --&gt;  int i;</div><div class="line">则在c.h中重复定义了a.h，是不允许的</div></pre></td></tr></table></figure>
<p>则可以用#ifndef,避免头文件的重复定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a.h</div><div class="line">#ifndef __A_H__		//如果没有定义a.h则执行下面的代码</div><div class="line">#define __A_H__</div><div class="line">	int i;</div><div class="line">#endif</div><div class="line">-----------------</div><div class="line">b.h</div><div class="line">	#include &quot;a.h&quot;</div><div class="line">------------------</div><div class="line">c.h</div><div class="line">	#include &quot;a.h&quot;		//没有定义a.h，则定义a.h  </div><div class="line">	#include &quot;b.h&quot;		//因为a.h已经定义了，故在a.h中#ifndef下面的代码不执行了，故造不成a.h头文件的重复定义</div></pre></td></tr></table></figure>
<hr>
<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>-o 指定生成的文件名<br>-I 指定头文件路径，包括标准头文件(系统的)和<em>非标准头文件(用户的)</em><br>-L 指定库文件路径<br>-l 指定库文件名</p>
<p>gcc的编译流程分为了四个步骤，分别为：</p>
<p>1.预处理期：</p>
<ol>
<li>去除注释</li>
<li>替换头文件    #include</li>
<li>条件编译        #if…</li>
<li>宏展开        #define<br>//不检查语法错误</li>
</ol>
<p>2.编译阶段：<br>生成预处理后的源代码的汇编代码</p>
<p>3.汇编阶段:<br>汇编代码进行汇编,生成了*.o的目标文件</p>
<p>4.链接阶段：<br>将*.o的目标文件链接生成二进制的可执行文件</p>
<p>例如：</p>
<p>include/print.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#ifndef 	__PRINT_H__</div><div class="line">#define		__PRINT_H__</div><div class="line"></div><div class="line">extern void hello();</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>src/print.c</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line"></div><div class="line">void hello()</div><div class="line">&#123;</div><div class="line">	printf(“hello world\n”);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>src/main.c</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include   “print.h”</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	hello();</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>gcc编译：生成中间代码</p>
<blockquote>
<p>gcc -c -o obj/print.o src/print.c -I include<br>gcc -c -o obj/main.o src/main.c -I include</p>
</blockquote>
<p>生成：</p>
<blockquote>
<p>obj/print.o<br>obj/main.o</p>
</blockquote>
<p>gcc编译：生成二进制文件(可执行文件)</p>
<blockquote>
<p>gcc -o bin/main obj/print.o obj/main.o</p>
</blockquote>
<p>生成：</p>
<blockquote>
<p>bin/main</p>
</blockquote>
<p>或者一步生成可执行文件：</p>
<blockquote>
<p>gcc -o  bin/main  src/print.c src/main.c  -I include </p>
</blockquote>
<p>路径选项 </p>
<ul>
<li>-I dir ：头文件目录路径 </li>
<li>-L dir ：库文件目录路径 </li>
<li>-l 库名 ：链接库的使用 </li>
</ul>
<hr>
<h2 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h2><p>可以在程序运行时被载入的文件,以调用某个特定的模块，也可以在编译时被直接编译进可执行文件中。</p>
<p><strong>静态和共享(动态的)库：</strong></p>
<ul>
<li>静态：在编译程序时被导入可执行文件中</li>
<li>共享：在运行程序时被导入可执行文件中(即在执行main函数的入口时导入)</li>
<li>动态:   程序中语句需要使用时载入库代码</li>
</ul>
<p><strong>共享库与动态库调用时机：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int main(void)   	共享库代码被载入</div><div class="line">&#123;</div><div class="line">	a.....</div><div class="line"></div><div class="line">	b.....</div><div class="line"></div><div class="line">	c.....</div><div class="line"></div><div class="line">	d....  (调用库内的代码)		 动态库载入</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>制作库文件:</strong></p>
<ol>
<li>编码  –&gt;  单独的xxx.c<pre><code>同一个模块
</code></pre></li>
<li><p>编译生成目标文件  xxx.o</p>
</li>
<li><p>生成库文件(lib开头)</p>
</li>
</ol>
<ul>
<li>动态：<br>gcc -fPCI -o libxxx.so xxx.o main.o</li>
<li>共享：<br>gcc -shared -fPCI -o libxxx.so xxx.o</li>
<li>静态：<pre><code>ar -rc libxxx.a xxx.o
</code></pre></li>
</ul>
<ol>
<li><p>生成需要调用库文件的可执行文件</p>
<pre><code>gcc -o bin/main obj/main.o -Llib -lxxx    
</code></pre><p> //-Llib -lxxx :告诉编译器库文件放在哪里</p>
</li>
<li><p>告诉内核库文件在哪(共享) (即程序运行时，告诉内核库文件在哪)</p>
<pre><code>方法1.配置环境变量
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:lib/
方法2.将库文件放到系统库文件路径下
          系统库文件路径有：    /lib/    /usr/lib/
        系统路径(root权限)
        //将生成的库文件放入系统库文件路径下
        sudo cp  lib/libxxx.so /usr/lib/ 
</code></pre></li>
</ol>
<p><strong>静态和共享库的优缺点：</strong></p>
<pre><code>静态:在编译程序时被导入可执行文件中(即可执行文件中已经包含库文件的内容)
    优点：在程序执行时不依赖库文件
          在编译完成后,.a的库文件可删除
    缺点：导致可执行文件较大
          不利于项目的维护和更新
共享:在运行程序时被导入可执行文件中(即可执行文件中不包含库文件的内容)
    优点:主程序体积较小
         便于发布和更新
         项目结构清晰
    缺点:丢失库文件后将导致主程序无法启动
</code></pre><p><strong>链接库文件：</strong><br>-lprint</p>
<p>libprint.so     //共享库文件或动态库文件<br>libprint.a    //静态库文件<br>当共享库文件和静态库文件同时在./lib下时，先执行共享库文件，如果想执行静态库文件，则需删除共享库文件。</p>
<hr>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>Makefile 文件：批量编译和处理项目文件</p>
<p><strong>格式：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">target:depends</div><div class="line">	commands</div></pre></td></tr></table></figure>
<p><strong>例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">target	:	depends		//目标:桌子，依靠：木板,钉子 ，命令：组合</div><div class="line"></div><div class="line">桌子：木板  钉子</div><div class="line">	组合(commands)       </div><div class="line">木板:树</div><div class="line">	切割</div><div class="line">钉子:铁</div><div class="line">	打造</div></pre></td></tr></table></figure>
<p>根据把上面gcc的例子，编写Makefile文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bin/main:obj/main.o obj/print.o</div><div class="line">	gcc -o bin/main obj/main.o obj/print.o</div><div class="line">obj/main.o:src/main.c  include/print.h</div><div class="line">	gcc -c -o obj/main.o src/main.c -I include</div><div class="line">obj/print.o:src/main.c include/print.h</div><div class="line">	gcc -c -o obj/print.o src/print.c -I include</div></pre></td></tr></table></figure>
<p>make： 默认执行Makefile<br>make -f：指定Makefile 文件名<br>//当存在Makefile和Makefile_shared两个makefile文件时，make默认执行Makefile。如果想要执行Makefile_shared,则执行命令：make -f Makefile_shared</p>
<p><strong>清理步骤：</strong></p>
<p>命令：make clean </p>
<p>需要在Makefile中添加clean</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clean:</div><div class="line">	rm -fr obj/*</div><div class="line">	rm -fr bin/*</div><div class="line">	rm -fr lib/*</div></pre></td></tr></table></figure>
<hr>
<h2 id="调试："><a href="#调试：" class="headerlink" title="调试："></a>调试：</h2><p>找出程序中错误的代码或逻辑并修正</p>
<p><strong>错误error分类：</strong></p>
<ol>
<li><p>编译时错误(编译器)</p>
<pre><code>a.根据编译器的错误提示debug
b.添加删除程序法(注释法)，即用//或/*  */注释掉部分代码缩小范围查找错误
</code></pre></li>
<li><p>运行时错误(内核)</p>
<pre><code>a.添加删除程序法
b.标记法（在代码周围用printf()打印一句话，可以通过打印的话，缩小范围）
c.使用调试工具(gdb)
</code></pre></li>
</ol>
<p><strong>警告warning(可被忽视)：</strong><br>gcc警告提示</p>
<ol>
<li><p>Wall 类警告<br>  -Wall 打开所有类型语法警告,建议使用<br>  -Wchar-subscripts 如果数组使用 char 类型变量作为下标值,则发出警告<br>  -Wcomment 当 ’ /<em>’ 出现在 ’ /</em>……*/’ 注释中,或则 ’ \’ 出现在 ’ //……’ 注释 结尾    处时, 使用 -Wcomment 会给出警告,它可能会影响程序的运行结果</p>
</li>
<li><p>非 Wall 类警告提示<br>  -ansi 强制 GCC 生成标准语法所要求的告警信息。<br>  -pedantic 允许发出 ANSI C 标准所列的全部警告信息</p>
</li>
</ol>
<p><strong>版本引发的问题(如C98和C99之间的问题)：</strong> </p>
<p>1989第一个标准版本：ANSC C89 = ISO  C90<br>1999：c99<br>当出现因为版本不同时， 可在编译时加   -std=c99  就可以了</p>
<hr>
<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p><strong>gdb调试步骤：</strong><br>gdb调试工具 </p>
<ol>
<li><p>编译gdb调试文件：<br> gcc -g src/sum.c -o bin/sum  //-g把代码增加到可执行文件中 </p>
</li>
<li><p>开启gdb对文件的调试：<br> 方法1：gdb ./bin/sum<br> 方法2：gdb </p>
<pre><code>file ./bin/sum 
</code></pre></li>
<li><p>! command :执行外部命令 </p>
</li>
<li><p>先设断点，后执行。即先break/b后run/r<br> 如果不设断点就执行，则程序就会快速执行完毕，设置断点后程序就会在断点处暂停，如需往下执行就可以手动往下执行。 </p>
</li>
</ol>
<p><strong>调试命令:</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">file --&gt; 指定调试文件 </div><div class="line">list/l --&gt; 查看原代码(默认10行) </div><div class="line">list n --&gt; 列出n附近的10行代码 </div><div class="line">run/r --&gt; 运行 </div><div class="line">断点：在程序执行时在某个代码行处暂停 </div><div class="line">break/b --&gt; 设置断点 如: b main  b 10 </div><div class="line">info breakpoints/i b --&gt; 查看所有的断点 </div><div class="line">delete breakpoints  number--&gt; 删除断点 </div><div class="line">next/n --&gt; 单步运行下一行代码(遇到函数调用不会进入函数内运行) </div><div class="line">step/s --&gt; 单步运行下一行代码(遇到函数调用会进入函数内运行) </div><div class="line">回车--&gt;执行上一次操作 </div><div class="line">print/p	 变量--&gt;查看变量的值 </div><div class="line">display 变量--&gt;追踪变量的值 </div><div class="line">set variable 变量名=值--&gt;修改变量的值，使程序跳到变量获得结果处。 </div><div class="line">until/u 26 --&gt; 跳到某行 </div><div class="line">finish --&gt; 跳出函数(finish不能简写成f) </div><div class="line">quit/q --&gt; 退出gdb </div><div class="line"></div><div class="line"></div><div class="line">display /i $pc --&gt; 同时显示c代码和汇编代码 </div><div class="line"></div><div class="line">disassemble 函数名 --&gt; 查看指定函数的反汇编代码</div></pre></td></tr></table></figure>
<p><strong>objdump工具</strong> </p>
<pre><code>objdump -xd sum.o 
objdump -xd sum 
将.o目标文件或可执行文件进行反汇编
</code></pre></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vi编辑器]]></title>
      <url>http://freeshow.github.io/2016/07/24/vi%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h3><p>更新vi版本为vim版本：sudo apt -get install vim</p>
<h3 id="vi编辑器的三种工作模式："><a href="#vi编辑器的三种工作模式：" class="headerlink" title="vi编辑器的三种工作模式："></a>vi编辑器的三种工作模式：</h3><p>command mode(命令模式)，entry mode(输入模式)，last-line mode(最低行模式).</p>
<p><img src="http://img.blog.csdn.net/20160321154201781" alt="这里写图片描述"></p>
<hr>
<h3 id="vi操作"><a href="#vi操作" class="headerlink" title="vi操作"></a>vi操作</h3><p>vi<br>格式： vi filename： Open or create a file</p>
<h4 id="命令模式与输入模式之间转换："><a href="#命令模式与输入模式之间转换：" class="headerlink" title="命令模式与输入模式之间转换："></a><strong>命令模式与输入模式之间转换：</strong></h4><p>命令模式—&gt;输入模式</p>
<ul>
<li>i ：在光标当前位置前插入 </li>
<li>a ：在光标所在位置后插入 </li>
<li>o ：在光标所在行 下插入一空行</li>
<li>shift+o: 在光标所在行 上插入一空行</li>
<li>shift+a: 行尾进行插入</li>
<li>shift+i:  行首进行插入</li>
</ul>
<p>输入模式—&gt;命令模式：<br>Esc：退出插入状态 </p>
<h4 id="光标移动："><a href="#光标移动：" class="headerlink" title="光标移动："></a><strong>光标移动：</strong></h4><ul>
<li>向上 k </li>
<li>向下 j </li>
<li>向左 h </li>
<li>向右 l</li>
</ul>
<h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a><strong>删除：</strong></h4><ul>
<li>x：    删除一个字符 </li>
<li>dw： 删除当前词 </li>
<li>3dw ：删除三个词 </li>
<li>dd ：删除当前行 </li>
<li>5dd ：删除五行 </li>
<li>:5,10d      （最低行模式下）删除第5到第10行的内容 </li>
</ul>
<h4 id="替换（删除并进入输入模式）命令模式下"><a href="#替换（删除并进入输入模式）命令模式下" class="headerlink" title="替换（删除并进入输入模式）命令模式下"></a><strong>替换（删除并进入输入模式）命令模式下</strong></h4><ul>
<li>r：     替换一个字符 </li>
<li>cw ：    替换一个单词 </li>
<li>cc ：替换一行 </li>
<li>C     ：替换从光标至行尾</li>
</ul>
<h4 id="剪贴-amp-复制"><a href="#剪贴-amp-复制" class="headerlink" title="剪贴&amp;复制"></a><strong>剪贴&amp;复制</strong></h4><ul>
<li>yw         拷贝词 </li>
<li>yy         拷贝行 ( 或 Y)</li>
<li>3yy  拷贝3行 </li>
<li>p         当前行下粘贴</li>
<li>:1,20co3         拷贝行 1 到行 20 在行 3 之后 </li>
<li>:3,5m6         移动行 3 到行 5 在行 6 之后</li>
</ul>
<h4 id="从输入模式到命令模式："><a href="#从输入模式到命令模式：" class="headerlink" title="从输入模式到命令模式："></a><strong>从输入模式到命令模式：</strong></h4><ul>
<li>:w         存盘 </li>
<li>:w newfile         存成新文件 </li>
<li>:wq     存盘退出 Vi( 或 ZZ ,或 :x) </li>
<li>:q!         强行退出不存盘</li>
</ul>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a><strong>查找</strong></h4><ul>
<li>/串 ：从当前行往下查找 </li>
<li>?串 ：    从当前行往上查找 </li>
<li>n     ：查找继续</li>
</ul>
<h4 id="跳转到指定行"><a href="#跳转到指定行" class="headerlink" title="跳转到指定行"></a><strong>跳转到指定行</strong></h4><ul>
<li>:set nu     显示行代码 (:set nonu) </li>
<li>:21     光标停在指定行(最低行模式下)  跳到21行 </li>
<li>21G      (在命令模式下)光标停在指定行 (G 到文件尾 ,1G 到文件头 ) 跳到21行   </li>
</ul>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a><strong>替换</strong></h4><p>在最低行模式下<br>格式：<br>:1,\$s/旧串 新串/g      替换全文 ( 或 :%s/ 旧串 / 新串 /g) 将旧串替换出新串;</p>
<p>$是范围，3,5 即第3行到第5行，不加/g只会替换一行中的一个旧串而不会全部替换本行。</p>
<p>eg:<br>:1,4,10s/hello/world/g   将本vi编辑器里内容的第4行到10行中的hello替换为world<br>:%s/hello/world/g  将vi编辑器里全部内容中的hello替换为world.    %s为替换为全文；</p>
<h4 id="分栏编辑"><a href="#分栏编辑" class="headerlink" title="分栏编辑"></a><strong>分栏编辑</strong></h4><ul>
<li>:vsplit (:vs) 文件名        水平方向 </li>
<li>:split 文件名            竖直方向 </li>
</ul>
<h4 id="切换："><a href="#切换：" class="headerlink" title="切换："></a>切换：</h4><ul>
<li>ctrl+w + 方向键切换分栏 </li>
<li>ctrl+w+w 顺序切换分栏 </li>
<li>:wqa 全部保存退出编辑栏</li>
</ul>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a><strong>其他命令</strong></h4><ul>
<li>~：     改变大小写 </li>
<li>J：     把当前行和下一行连起来 </li>
<li>u：     废除刚才的编辑操作 (undo)</li>
<li>:nohl： 取消语法高亮</li>
<li>:r file2 ：    在光标所在位置插入另一个文件  </li>
<li>ctrl+r：重做 </li>
<li>!： 执行外部命令 </li>
</ul>
<h3 id="设置VI配置："><a href="#设置VI配置：" class="headerlink" title="设置VI配置："></a><strong>设置VI配置：</strong></h3><p>vi ~/.vimrc  在里面配置</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell简单介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Shell%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Shell是UNIX/Linux 系统的重要组成部分。在UNIX/Linux 下，Shell扮演了一个双重角色。虽然它表面上和Windows 的命令提示符相似，但是它却具备完成执行复杂程序的强大功能。用户不仅可以通过它执行命令、调用Linux 工具，还可以把Shell作为一种编程语音，编写自己的程序。</p>
<hr>
<h2 id="Shell简介"><a href="#Shell简介" class="headerlink" title="Shell简介"></a>Shell简介</h2><p>用户登录Linux 系统时，可以进入基于XWindow的图形界面系统，如KDE 或GNOME。当然，很多工作可以在图形界面环境下完成，但是在服务器应用环境的很多情况下，需要远程连接到服务器进行管理配置，而使用命令行模式进行管理更加方便和简单。</p>
<h3 id="什么是Shell"><a href="#什么是Shell" class="headerlink" title="什么是Shell"></a>什么是Shell</h3><p>Shell 本身是一个用C 语言编写的程序，它是用户使用Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。作为命令语言，它互动式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高阶语言中才具有的控制结构，包括循环和分支。它虽然不是Linux 系统内核的一部分，但它调用了系统内核的大部分功能来执行程序、创建文档并以并行的方式协调各个程序的运行。</p>
<p>利用shell程序设计语言我们可以编写出来功能强大且代码简单的shell脚本程序，特别是通过把相关的linux命令和shell有机结合，我们可实现linux系统的自动化管理，大大简化我们的工作。</p>
<h3 id="常见-Shell-的种类"><a href="#常见-Shell-的种类" class="headerlink" title="常见 Shell 的种类"></a>常见 Shell 的种类</h3><p>Linux Shell的种类很多，目前流行的Shell包括ash、bash、ksh、csh、zsh等，用户可以通过查看/etc/shells 文件中的内容来查看自己主机中当前有哪些种类的Shell，命令如下（下面是在笔者Linux 主机中查看信息的结果）：</p>
<p><img src="http://img.blog.csdn.net/20160322093659004" alt="这里写图片描述"></p>
<p>使用下面的命令来查看Linux 当前正在使用的Shell 类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $SHELL</div></pre></td></tr></table></figure>
<p>显示/bin/bash(Ubuntu下)</p>
<p>$SHELL是一个环境变量，它记录了Linux 当前用户所使用的Shell类型。用户可以通过直接输入各种Shell的二进制文件名（因为这些二进制文件本身是可以被执行的），来进入到该Shell下，比如进入bash可以直接输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /bin/bash</div></pre></td></tr></table></figure>
<p>这个命令为用户又启动了一个Shell，这个Shell在最初登录的那个Shell之后，称为下级的Shell或子Shell。使用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exit</div></pre></td></tr></table></figure>
<p>可以退出这个子Shell。使用不同的Shell 的原因在于它们各自都有自己不同的特点，下面简单介绍Linux 下各种不同的Shell类型的特点。</p>
<p><strong>1.ash</strong><br>ash Shell是由Kenneth Almquist编写的，是Linux 中占用系统资源最少的一个小Shell，它只包含24个内部命令，因而使用起来很不方便。</p>
<p><strong>2. bash</strong><br>bash是Linux系统默认使用的Shell，它由Brian Fox 和Chet Ramey共同完成，是BourneAgain Shell的缩写，内部命令一共有40 个。Linux 使用它作为默认的Shell是因为它具有以下特色：</p>
<p>可以使用类似DOS下面的doskey的功能，用上下方向键查阅和快速输入并修改命令。</p>
<p>自动通过查找匹配的方式，给出以某字串开头的命令。</p>
<p>包含了自身的帮助功能，你只要在提示符下面键入help就可以得到相关的帮助信息。</p>
<p><strong>3. ksh</strong><br>ksh是Korn Shell的缩写，由Eric Gisin编写，共有42 条内部命令。该Shell最大的优点是几乎和商业发行版的ksh 完全相容，这样就可以在不用花钱购买商业版本的情况下尝试商业版本的性能了。</p>
<p><strong>4. csh</strong><br>csh 是Linux 比较大的内核，它由以William Joy 为代表的共计47 位作者编成，共有52个内部命令。该Shell其实是指向/bin/tcsh这样的一个Shell，也就是说，csh其实就是tcsh。</p>
<p><strong>5. zch</strong><br>zch是Linux 最大的Shell之一，由Paul Falstad完成，共有84 个内部命令。如果只是一般的用途，没有必要安装这样的Shell。</p>
<h3 id="Shell-命令的两种形式"><a href="#Shell-命令的两种形式" class="headerlink" title="Shell 命令的两种形式"></a>Shell 命令的两种形式</h3><p>1.内部命令<br>内部命令内置于Shell源码中，即存在于内存中，一般比较简短，代码量很少，执行起来速度快，经常会使用，比如cd、echo。它与shell本身处在同一进程内（它就写在Shell这个程序里面）,当打开Shell时，操作系统会将Shell程序放入内存 。</p>
<p>2.外部命令<br>外部命令一般功能比较强大，包含的代码量也较大，所以在系统加载时并不随系统一起被加载到内存中，而是在需要时才调用，它们是存在于文件系统中某个目录下的单独的程序，当执行外部命令时，会到文件系统中文件的目录中寻找，例如 cp 、rm。 </p>
<p>3.查看命令类型<br>type  command</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ type cd </div><div class="line">cd is a shell builtin(内部命令)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ type cp</div><div class="line">cp is /bin/cp(外部命令)</div></pre></td></tr></table></figure>
<h3 id="Shell初始化"><a href="#Shell初始化" class="headerlink" title="Shell初始化"></a>Shell初始化</h3><p>shell启动时将运行初始化文件来初始化自己，而具体选取哪些初始化文件，系统依据shell的类型来确定。</p>
<p><strong>Shell类型：</strong><br>登陆shell、交互式非登陆shell（通过命令bash启动一个子shell）、非交互式shell 。</p>
<p><strong>Shell类型的理解：</strong><br>登陆shell和非登陆shell 、 交互式shell与非交互式shell，首先这两个是从不同维度来划分的，一个是否交互式，一个是否登陆。</p>
<p>交互式模式就是shell等待你的输入，并立即执行你提交的命令，之所以被称为交互式是因为shell与用户进行了交互；</p>
<p>非交互式（执行shell脚本）：shell不与你进行交互，而是读取存放在文件中的命令，并执行他们，当读到文件尾时，shell结束。</p>
<h4 id="1-登录Shell"><a href="#1-登录Shell" class="headerlink" title="1.登录Shell"></a><strong>1.登录Shell</strong></h4><p>指的是当用户登录系统时所用的那个shell（Linux系统启动时候输入用户名、密码，然后会启动第一个shell）。</p>
<p>然后这个登录shell 将查找几个不同的启动文件来处理其中的命令（它的作用是初始化linux系统相关配置）, bash shell 处理文件的顺序如下：<br>1）系统登录后，shell首先执行/etc/profile中的命令(超级用户)。设置这个文件后，可以为系统内所有的bash用户建立默认的特征（不同版本的Linux在此文件放置的命令不尽相同）；</p>
<p>/etc/profile :系统级的初始化文件,如里面代码有：如果是超级用户则提示符用#，如果是普通用户则提示符用$.</p>
<p>2）当某个用户定路后，shell依次查找~/.bash_profile、~/.bash_login、～/.profile这几个文件，并执行它找到的第一个文件中的命令，可以将命令放在这些文件中，以重写/etc/profile文件中默认的设置；</p>
<p>3）当用户注销时，bash执行文件~/.bash_logout中的命令，这个文件包含了退出会话时执行的清理命令，退出等，如：exit退出。</p>
<h4 id="2-交互式非登录shell"><a href="#2-交互式非登录shell" class="headerlink" title="2.交互式非登录shell"></a>2.交互式非登录shell</h4><p>交互式非登录shell 就是指你在当前图形界面中打开“终端”出来的那种窗口程序，和登录shell相比，它是“非登录”的，你并不需要输入用户名和码；和非交互式shell相比，这是“交互式”的，就像你说的那它：你输入什么，它就解释出什么。</p>
<p>并不执行前面提到的初始化文件中的命令，继承了登录 shell 设置的 shell 变量。</p>
<p>在交互式非登录shell里，只读取/etc/bash.bashrc和~/.bashrc（该本件包含了专用于你的bash shell的shell信息，当登录时或者每次打开新shell时，该文件即被读取</p>
<h4 id="3-非交互式Shell"><a href="#3-非交互式Shell" class="headerlink" title="3.非交互式Shell"></a><strong>3.非交互式Shell</strong></h4><p>非交互式shell指的是以shell script(脚本)方式运行。在这种模式下运行时shell 并不与用户进行交互（除非在运行时需要用户指定运行参数），而是读取存放在文件中的命令并执行它们。当它读到文件的结尾，shell 也就终止了。这些shell从登陆时就继承了由这些启动文件设置的shell变量。</p>
<p>并不执行前面描述的初始化文件中的命令，继承了登录 shell 设置的 shell 变量。</p>
<p><strong>启动交互式shell:</strong><br>$/bin/sh filename或bash filename</p>
<p><strong>退出交互式shell:</strong><br>文件执行完自动退出</p>
<p><strong>运行shell脚本</strong><br>(1)编写一个脚本文件<br>文件名为：firsttest.sh ,vi firsttest.sh<br>内容为：<br>#！/bin/bash<br>data<br>who<br>(2)添加可执行权限<br>$chmod +x firsttext.sh  //因为刚创建的文件权限为0644,没有可执行权限<br>(3)运行脚本<br>执行方式一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./firsttext.sh //使用当前shell执行脚本</div></pre></td></tr></table></figure>
<p>执行方式二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bash firsttext.sh 或 /bin/sh firsttext.sh </div><div class="line">//使用新的shell(/bin/sh)执行脚本</div></pre></td></tr></table></figure>
<h4 id="为什么要分系统级初始化文件和用户级初始化文件？"><a href="#为什么要分系统级初始化文件和用户级初始化文件？" class="headerlink" title="为什么要分系统级初始化文件和用户级初始化文件？"></a>为什么要分系统级初始化文件和用户级初始化文件？</h4><p>/etc/profile:系统级初始化文件<br>~/.bashrc:用户级初始化文件</p>
<p>因为linux是多用户操作系统，系统级文件只初始化shell的大体。<br>而~/.bashrc每一个用户都可以配置它，不同的用户配置的~/.bashrc,则shell有不同的功能（即用户可以进行个性化设置）。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux基础（四）]]></title>
      <url>http://freeshow.github.io/2016/07/24/linux%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>#Setup Initialization Files</p>
<p>##Features of Initialization Files<br>Initialization files contain commands and variable settings that are executed when a shell is started .</p>
<p>Two levels: </p>
<ul>
<li>System-wide     – Reside in the /etc directory             (系统范围的放在/etc下)</li>
<li>User-specific     – Reside in a user’s home directory     (用户范围的放在～/下) </li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Shell</th>
<th style="text-align:center">System-wide(read first)</th>
<th style="text-align:center">User-specific(read second)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bash</td>
<td style="text-align:center">/etc/profile</td>
<td style="text-align:center">~/.bashrc</td>
</tr>
</tbody>
</table>
<p>###source<br>source 加载某个配置文件,使配置文件生效<br>source ~/.bashrc </p>
<p>注意：编辑配置文件后，只有source配置文件后，修改的配置文件才会生效。</p>
<p>###alias(别名)<br>alias   l=’ls -l’  (将ls -l设置成l)<br>alias   c=’clear’</p>
<p>unalias (取消设置)</p>
<p>###Variable<br>variable=value  (设置环境变量的值)</p>
<p>echo $PATH (显示PATH环境变量的值)</p>
<p>eg:<br>1.WTO=’uname -n’<br>    echo $WTO (则显示 uname -a)<br>2.WTO=<code>uname -n</code>  (`:数字键1左边的键，它会把uname -n的执行结果赋给环境变量）<br>echo &amp;WTO        （则显示uname -n的执行结果）    </p>
<p>###which&amp;whereis<br> which：查看命令在那个路径下</p>
<p>eg:<br>which vi    (则显示/user/bin/vi)</p>
<p>whereis 比which查找的更加详细，which只查找当前使用的命令的路径，whereis查找系统中所有与命令有关的文件中的路径。</p>
<p>###history<br>eg:<br>history (显示最近敲过的命令)<br>history 30 (显示最近敲过的30条命令)<br>！n  (执行最近敲过的以n开头的命令)<br>！！    (执行上次敲过的命令)</p>
<p>###umask(系统掩码)<br>umask 系统掩码 –&gt; 0002 </p>
<p>与文件的默认创建权限有关<br>文件创建权限=默认权限-umask掩码<br>文件 –&gt; 664 = 666 - 002<br>目录 –&gt; 775 = 777 - 002 </p>
<p>umask 022 (将系统掩码设置成022)</p>
<p>##用户组管理<br>/etc/group 系统中用户组的信息 </p>
<p>###创建组<br>参数: -g GID : 指定 GID 的值 </p>
<p>eg:<br>groupadd g1 (创建组名为g1的组)<br>groupadd g1 -g 2000 (创建组名为g1，组号为2000的组)</p>
<p>###删除组 </p>
<p>格式: groupdel 组名 </p>
<p>eg:<br> groupdel g1 </p>
<p>###修改组信息<br>格式: groupmod [ 参数 ] 组名 </p>
<p>参数:<br> -n 新组名:修改组的名字<br>-g GID :修改组的 GID </p>
<p>eg:<br>groupmod g1 -n g2 -g 2001 (将组名为g1的组修改组名为g2,组号为2001)</p>
<p>###添加/删除组成员<br>格式: gpasswd [ 参数 ] 组名 </p>
<p>参数:<br> -a 用户名 : 向指定组添加用户<br>-d 用户名 : 从指定组中删除用户 </p>
<p>eg:<br>gpasswd -a u1 root (向root组中添加用户u1)<br>gpasswd -d u1 root (向root组中删除用户u1)</p>
<p>###查看用户所属组<br>格式: groups [ 用户名 ] </p>
<p>eg:<br>groups root (显示 root 用户的所属组) </p>
<p>##用户管理</p>
<p>###创建用户<br>格式: useradd [ 参数 ] 用户名 </p>
<p>参数:<br> -u UID :指定用户的 UID 值 (默认为最小的可用ID)<br>-g 组名:指定用户的所属组 (不指定则默认创建与用户名相同的组)<br> -d 路径:指定用户主目录 (不指定则默认为/home/下与用户名同名的目录 )<br> -s SHELL :指定 SHELL 的类型 (默认为/bin/sh)<br> -m :建立用户主目录 </p>
<p>eg:<br>useradd -m -d /home/u1 -g other -s /bin/csh u1 </p>
<p>###删除用户<br>格式: userdel [ 参数 ] 用户名 </p>
<p>参数: -r : 删除用户主目录 </p>
<p>eg: userdel -r u1 </p>
<p>###修改用户信息<br>格式: usermod [ 参数 ] 用户名 </p>
<p>参数:<br> -l 新的用户名:修改用户名<br> -d 路径:修改用户主目录 </p>
<p>例:<br> usermod -d /home/u2 u1<br> usermod -l u2 u1 </p>
<p>##文件所属</p>
<p>###chown<br>功能:改变文件拥有者<br>格式: chown [ 参数 ]&lt; 用户名 &gt;&lt; 文件名 &gt; </p>
<p>参数:<br>-R :递归改变目录的拥有者<br>-f :不显示拥有者的详细信息 </p>
<p>例:<br> chown u1 file1<br> chown -R u1 /dir1<br>chown lisi:root a.txt (将文件a.txt的拥有者改为lisi,拥有组改为root)</p>
<p>###chgrp<br>功能:改变文件所属组 </p>
<p>格式: chgrp [ 参数 ]&lt; 组名 &gt;&lt; 文件名 &gt; </p>
<p>参数:<br>-R :递归改变目录的拥有者<br>-f :不显示拥有者的详细信息 </p>
<p>例:<br>chgrp g1 file1<br>chgrp -R g1 /dir1 </p>
<p>修改文件拥有者和所属组的限制 :<br>1.root全部都能改<br>2.文件的拥有者可以把文件递交给其他的人或组 </p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux基础（三）]]></title>
      <url>http://freeshow.github.io/2016/07/24/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>系统命令一般存在如下命令下：<br>/usr/bin, /usr/sbin, /usr/local/bin,… </p>
<p>###id<br>Displays the user name corresponding to the effective user ID .</p>
<p>格式: id [option(s)] user_name<br>-a: 显示所有信息</p>
<p>eg:<br>id          显示当前用户ID<br>id root         显示root用户的ID<br>id  -a root</p>
<p>###Finding People<br>who<br>w<br>finger </p>
<p>The who am i command displays information about your real user ID<br>who am I<br>whoami  </p>
<p>###find<br>Find files based on specific criteria, then execute a command on the matching files </p>
<p><strong>格式：</strong><br>find path expression [action]<br>path:路径，expression:表达式.</p>
<p>eg:<br>find / -name “perl<em>”          -name:命名        查找/目录下以 perl</em>命名的文件      </p>
<p>find . -mtime 10 –print          -mtime:最后修改时间  -print:打印    查找.目录下最后修改时间超过10的文件并打印     </p>
<p>find /etc -user 0 –size +400 –print<br>-user:用户ID，-size:块大小<br>查看/etc下 用户ID为0的用户块大小大于400的文件并打印</p>
<p>find ~ -perm 777 &gt; ~/holes<br>-perm:权限   把权限为777的文件重定入到~/holes下</p>
<p>find /export/home -type f -atime +365 -exec rm {} \<br>-type:类型 ，-atime：最后访问时间，-exec:执行命令,rm {} \:删除操作。  把/export/home下文件类型为f最后一次访问时间超过365天的文件，执行删除命令。<br>find /export/home -type f -atime +365 |     xargs rm (另一种删除方法)</p>
<p>find /export/home/html -name “*.html” -print | xargs perl -p -i .bak -e “s/Copyright 2004/Copyright 2005/g;”  将print出来的内容中的Copyright 2004替换成Copyright 2005并将未替换是的内容备份到.bak中</p>
<p>###du&amp;df</p>
<p>####du<br>du file1     查看文件和目录（即目录下文件）的实际大小<br>du –sk(-sh) file1     只查看本文件的实际大小<br>用ls -l 查看的目录大小全是4096</p>
<p>####df<br>df 查看但前挂载情况<br>df -k    以K为单位显示<br>df -h    以人类单位显示</p>
<p>###ps<br>ps (Process):list the processes currently running on the system .</p>
<p>-e: List every process now running (列出全部进程)<br>-f :Generates a full listing             （建成表）</p>
<p>ps –ef | grep telnet </p>
<p>###kill<br>Terminate unwanted command processes that you cannot quit in the normal way </p>
<p>格式：<br>kill [-signal] pid  给进程发信号<br>pkill 进程名</p>
<p>eg:<br>如运行程序：sleep 100<br>pkill sleep<br>kill 12932<br>kill -9 12418<br>sleep 100 &amp;        &amp;:后台运行    </p>
<p>PID        进程号<br>PPID    父进程号</p>
<p> ###Job Control(任务管理)</p>
<p>jobs     Display which jobs are currently running </p>
<p>fg %n ：Place a job in the foreground （调度到前台）   n:任务号<br>bg %n     ：Place a job in the background （调度到后台）<br>kill -stop %n ：Suspend（悬挂，暂停） a background job （挂起后台）<br>kill %n ：Abort（中断） the specified background job<br>Control+c ：Abort the foreground job<br>Control+z ：Suspend the foreground job. 挂起前台任务，就会被调度到后台，但以停止.</p>
<p>###Port numbers （端口号）<br>所有端口信息都存在于/etc/services文件中</p>
<p>ping -s host2     测试连通性<br>ifconfig         查看IP信息等<br>netstat –rn         查看路由表<br>traceroute www.sina.com.cn 查看路由信息</p>
<p>###telnet&amp;ftp</p>
<p>####telnet: 远程登录<br>与ftp不同之一是telnet不能从服务器上进行传输功能 即不能下载<br>telnet 172.16.0.50  远程登录后仍然可以使用shell命令</p>
<p>####ftp<br>FTP的文件传输共享等    ftp登录后不可以使用shell命令了,有自己的命名</p>
<p>ftp 172.16.0.50</p>
<p>Commands: </p>
<ul>
<li>cd（sever）, lcd (本地)</li>
<li>dir       = ls</li>
<li>bye    结束</li>
<li>bin, asc     传输方式  bin:以二进制形式传输 asc:asc码文本形式传输  </li>
<li>get, put, mget, mput     get:下载，put：上传，mget,mput(针对目录)</li>
<li>hash     打开和关闭hash图功能</li>
<li>prompt 打开和关闭提示功能 </li>
</ul>
<p><strong>User Communication Programs(=QQ)</strong><br><strong>wall （广播）</strong><br>格式：<br>1.wall<br>标准输入<br> ctrl+d 结束输入 </p>
<p>2.echo “hello” | wall<br>管道 </p>
<p>3.wall &lt; /etc/passwd<br>重定向 </p>
<p>write:向某个用户发信息</p>
<p>格式：<br>write user_name</p>
<p>将wall换成user_name用法与wall相同</p>
<p>mesg y ：接受信息<br>mesg n:不接受信息</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux基础（二）]]></title>
      <url>http://freeshow.github.io/2016/07/24/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>###通配符</p>
<ol>
<li>*：represents zero or more characters<br>eg:找出/etc下包含init关键字的文件  ls -l <em>init</em></li>
<li>？：represents any single character<br>eg：ls ?.txt</li>
<li>[]：match a set or range of characters to a single character position<br>eg:ls [b-f]b<em>  [b-f]代表bcdef中的任意一个字符<br>ls [fF]f</em>a   [fF]代表fF中的任意一个字符</li>
<li>;：enter multiple commands on a command line<br>eg: cd;ls<br>date(显示时间);cal（日历）;pwd</li>
<li>|：(piping(管道))：Takes the output of one command and passes it<br>as input into a following command （把一个命令的输出结果作为输入传递给下一个命令）<br>eg: ls -l /etc | more<br>more代表分页显示，即把ls -l /etc的结果，作为more的输入，将结果分页显示在屏幕上</li>
</ol>
<hr>
<p>###重定向</p>
<ol>
<li>&lt;    输入重定向 </li>
<li>>    输出重定向 </li>
<li>>&gt;  输出重定向(追加)</li>
<li>2&gt;    错误重定向(输出)</li>
</ol>
<p>cat 把标准输入（键盘）的内容输出到标准输出（屏幕或终端）上<br>标准输入（键盘） –&gt; 标准输出（屏幕或终端）</p>
<p>cat &gt; a.txt<br>标准输入 –&gt; a.txt（输出重定向为a.txt） </p>
<p>cat &lt; /etc/passwd &gt; a.txt 将/etc/passwd内容写入a.txt<br>/etc/passwd –&gt; a.txt （输出重定向为a.txt）<br>(输入重定向为/etc/passwd)</p>
<p>cat &gt;&gt; a.txt(a.txt的内容不会被覆盖，而是追加)<br>(cat /etc/passwd;ls -l aaa.txt)&gt;a.txt 2&gt;err.log (假设没有aaa.txt文件)</p>
<p>ls -l aaa.txt 输出为 ls:无法访问aaa.txt:没有那个文件和目录<br>将/etc/passwd的内容输入到a.txt，</p>
<p>将ls -l aaa.txt的错误信息输入到err.log</p>
<p>/dev/null 黑洞,即将无用的文件等仍在里面。</p>
<hr>
<p>###awk(分割)</p>
<p>cat /etc/passwd | awk -F: ‘{print \$1 “\t” $6}’ \<br>| sort &gt; ~/userinfo </p>
<p>awk -F: ‘{print \$1 “\t” \$6}’<br>awk为分割命令，-F是以什么分割，print是打印 ，\是续行符<br>$1表示分割后的第一个字符，\$6分割后的第六个字符<br>即将cat /etc/passwd的内容以:分割，并以\$1 “\t” \$6的形式打印<br>sort是排序，把排序后的内容重定向到~/userinfo下</p>
<p>eg：将当前系统中所有的用户组及GID过滤出来并排序输出到一个文件grp.log中<br>cat /etc/passwd |awk -F:’{print \$6 “\t” \$4}’ \<br>| sort &gt; grp.log</p>
<hr>
<p>###more(分页)</p>
<p>more(分页)：Displays the contents of a text file one screen at a time</p>
<p>格式 : more filename(s）</p>
<p>分页后的操作:<br>Spacebar  Scroll to the next screen<br>Return    Scroll one line at a time<br>b         Move back one screen<br>f         Move forward one screen<br>h         Display a Help menu of more features<br>q         Quit and return to the shell prompt<br>/string   Search forward for string<br>n         Find next occurrence of string</p>
<hr>
<p>###head&amp;tail</p>
<p>Displays the first or last n lines of one or more<br>files.<br>Displays first or last 10 lines by default (不加[-n]即默认情况下去10行)</p>
<p>格式：head [-n] filename(s)<br>tail [-n] filename(s)</p>
<p>eg: head -30 a.txt 取a.txt内容的前30行</p>
<hr>
<p>###sort<br>sort(分类) but does not change the original file.<br>格式： sort [-option] filename</p>
<p>-u:Generates a sorted list in which each line is  unique (no duplicates). 即取出重复行 unique</p>
<hr>
<p>###uniq</p>
<p>uniq(取出重复行) but does not change the original file.</p>
<p>格式：uniq filename</p>
<hr>
<p>###diff<br>Compares two files and displays a list of thedifferences between them.It is useful when you want to compare two versions of a letter or a report or two versions of the source code for a program.</p>
<p>diff [-u] filename1 filename2<br>diff –u file1 file2</p>
<hr>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>Learn about the contents of any file on a file system without having to open and examine the file yourself.</p>
<p>格式：file filename</p>
<hr>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>Copies anything you put on the command line, after echo, to the screen.Copies A good tool for learning about the shell</p>
<p>echo [-option] message:<br>-e:Enables the interpretation of backslash escape<br>sequences such as \n. (使转义字符可用)</p>
<p>-n:Suppresses the NEWLINE terminating the message. （不换行）<br>echo “hello world.”<br>echo –e “hello\tworld.”<br>echo –n “hello world.”</p>
<hr>
<h3 id="sricpt"><a href="#sricpt" class="headerlink" title="sricpt"></a>sricpt</h3><p>Records(记录) all or part of a login session, including your input and the system’s responses（回应）.</p>
<p>格式：<br>script [-a] filename<br>例如：<br>script file1  (script记录开始，将屏幕上的命令记录到file1)<br>…commands<br>exit  （退出script,注意只有退出后，才能查看到file1中的记录内容）<br>cat file1</p>
<hr>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>Searches a file for a specified text string and prints all lines that contain that pattern to the screen .</p>
<p>格式：grep [option(s)] string filename</p>
<p>case sensitive (大小写敏感)<br>-i Ignore case of string when searching （忽略大写小敏感）<br>-v Search for all lines that do not match string (反选)</p>
<p>eg: grep root /etc/passwd  查找/etc/passwd中包含root的内容<br>ls -la | grep -i ’sep 1’ 查找ls -la下最后修改时间为9月1号的内容</p>
<hr>
<h3 id="wc-一般用于统计"><a href="#wc-一般用于统计" class="headerlink" title="wc(一般用于统计)"></a>wc(一般用于统计)</h3><p>Displays a line, word, or character count（数目） of a file.</p>
<p>格式：wc [options] filename(s)<br>-l: Counts lines<br>-w: Counts words<br>-c: Counts characters</p>
<p>eg: grep wang /etc/passwd | wc -l</p>
<p>统计出当前系统中所有使用bash登录的用户数<br>grep bash /etc/passwd | wc -l</p>
<hr>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux基础（一）]]></title>
      <url>http://freeshow.github.io/2016/07/24/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>uname -a：查看内核版本<br>uname -n：查看主机名</p>
<p>lsb_release -a:查看发行版本</p>
<p>echo $SHELL:查看使用的是什么shell</p>
<hr>
<p>####挂载点：入口<br>df -h:查看当前挂载情况<br>sudo fdisk -l:查看当前系统下硬盘的分区情况<br>sudo tune2fs -l 分区名(或路径):查看单个分区状况</p>
<hr>
<p>####touch:</p>
<ol>
<li>创建文件 eg:touch a.txt</li>
<li>update access(访问) and modification(修改) times<br>作用：用于数据库管理和系统文件的管理<br>eg:<br>7:00时  touch a.txt;则a.txt的修改时间为7：00<br>8：00时在touch a.txt;则a.txt的修改时间为8:00<br>touch 虽然改变文件修改时间但不会改变文件内容</li>
</ol>
<p>###cat:<br>cat主要有三大功能：</p>
<ol>
<li>一次显示整个文件:cat filename</li>
<li>从键盘创建一个文件:cat &gt; filename</li>
<li>将几个文件合并为一个文件:cat file1 file2 &gt; file</li>
</ol>
<p>cat命令参数：<br>-A, –show-all           等价于 -vET<br>-b, –number-nonblank    对非空输出行编号<br>-e                       等价于 -vE<br>-E, –show-ends          在每行结束处显示 $<br>-n, –number     对输出的所有行编号,由1开始对所有输出的行数编号<br>-s, –squeeze-blank  有连续两行以上的空白行，就代换为一行的空白行<br>-t                       与 -vT 等价<br>-T, –show-tabs          将跳格字符显示为 ^I<br>-u                       (被忽略)<br>-v, –show-nonprinting   使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</p>
<p>实例一：把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里<br>命令：cat -n log2012.log log2013.log</p>
<p>实例二：把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里。<br>命令：cat -b log2012.log log2013.log log.log</p>
<hr>
<p>####user account(用户信息):</p>
<p>cat /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>briup:x:1000:1000:briup,,,:/home/briup:/bin/bash </p>
<p>每项以：分割,系统用户ID是从0到999，非系统用户ID在1000以后;<br>root(用户名):x:0(用户ID):0(组ID):root(组名):/root(家目录):/bin/bash(什么SHELL即echo $SHELL)</p>
<p>UID:用户ID user<br>GID:组ID group<br>sudo cat /etc/shadow: 密码（密码放在阴影（shadow）的地方）</p>
<p>whoami:显示当前登录用户名<br>who am i:显示登录情况<br>which:查看程序在哪执行的</p>
<p>####文件类型：<br>-    普通文件(normal)<br>d    目录文件(directory)<br>c    字符设备文件(character) 以字符为单位读取<br>b    块设备文件(block)    以块单位读取<br>l    链接文件(link)<br>s    套节字文件(socket)    用于网络通信<br>p    管道文件(pipe)</p>
<p>file filename:显示文件类型</p>
<p>####ls:查看显示<br>ls -a:显示隐藏文件（hidden file): 以.作为文件名开头的文件为隐藏文件。 图形界面下用ctrl+h显示隐藏文件<br>ls -R:显示带有递归的（recursive）列表<br>ls -t:以文件最后一次修改时间的顺序显示<br>ls -l:显示详细信息 (以字节为单位显示文件大小)<br>ls -lh（以人类（human）习惯的方式显示文件大小）<br>ls -l -t =ls -lt<br>ls -l -h =ls -lh</p>
<p>-rw-rw-r– 1 user group 15  3月 21 09:16 a.txt<br>-rw(拥有者权限)-rw(同组人权限)-r(其他人权限)– 1(链接号) user(拥有者) group(拥有组) 1024(文件大小)  3月 21 09:16(最后一次修改时间) a.txt(文件名)<br>其中:<br>拥有者:生成文件时登录的人,权限最高,u表示<br>同组人:系统管理员分配的同组的一个或几个人,g表示<br>其它人:除拥有者,同组人外的人,o表示<br>所有人:包括拥有者、同组人及其它人,a表示</p>
<p>####r:读权限<br>w:写权限,对目录来说,可生成文件与子目录或删除文件与子目录<br>x:执行权限,对目录来说,可查找该目录下内容<br>-:没有权限<br>例如:-rw-rw-r–</p>
<p>####chmod:修改权限（change permissions）<br>eg:<br>chmod g-r file1<br>chmod u+x,go+r file1<br>chmod a=rw file1</p>
<p>=:Set permissions<br>-:Remove access<br>+:Give access</p>
<p>rwx rwx rwx<br>000 000 000    chmod 000 a.txt</p>
<p>111 111 111<br>  7     7     7<br>chmod 777 a.txt</p>
<p>r-x rw- –x<br>101 110 001<br> 5     6     1<br> chmod 561 a.txt</p>
<p>eg:<br>某文件的组外成员的权限为只读；所有者有全部权限；组内的权限为读与写，则该文件的权限为(D) 。<br>A. 467  B. 674   C. 476   D. 764</p>
<hr>
<p>####cp(复制)：<br>操作需要对源文件有读权限，拷贝后的文件权限和源文件无关，和新文件的创建权限有关<br><strong>1.copy files</strong><br>cp [-i]:提示信息 source_file destination_file<br>cp [-i]:提示信息source_file(s) destination_directory<br>eg:cp -i b.txt a.txt 如果a.txt存在且有内容则会提示是否覆盖a.txt的内容，如果不加-i 则不会提示，直接覆盖;<br><strong>2.copy directories</strong>  需要加-r:不跳过目录<br>eg:cp -r src a.txt bin 如果不加-r只会把a.txt拷贝到bin目录下 src目录不会被拷贝</p>
<p>####rm(删除)<br><strong>1.remove files</strong><br>rm [-i] filename(s) : rm a.txt b.txt<br><strong>2.Removing Directories</strong><br>rmdir directory_name(s)  只能用来删目录且目录必须为空<br>rm -r[i] directory_name(s) -r不跳过目录且不管目录是否为空都删除</p>
<hr>
<p>####compress &amp; uncompress</p>
<p><strong>Compress file（压缩文件）</strong></p>
<p>gzip filename 压缩后格式：filename.gz<br>解压： gunzip filename.gz</p>
<p>bzip2 filename  压缩后格式：filename.bz2<br>解压：bunzip2 filename.bz2</p>
<p>zip filename.zip filename(s) 压缩后格式:.zip</p>
<p>eg:<br>gzip file1  对单个文件进行压缩且压缩后原文件不再了<br>bzip2 file1 对单个文件进行压缩且压缩后原文件不再了<br>zip my.zip file1 file2 可以把多个文件进行打包，打包后原文件还存在；</p>
<p>压缩：对单个文件进行压缩成单个文件，压缩后文件变小<br>打包：对多个文件进行打包成单个文件，只打包不压缩文件大小不变</p>
<p>####Uncompress file（解压文件）<br>gunzip filename<br>bunzip2 filename<br>unzip filename<br>eg:<br>gunzip file1.gz<br>bunzip2 file1.bz2<br>unzip my.zip</p>
<p><strong>pack &amp; unpack</strong><br><strong>Pack file （打包文件）</strong><br>tar [cvfz] package_name filename(s)<br>[cvf]中 c表示打包 ,vf表示提示信息，z表示压缩<br>例: tar cvf all.tar file1 file2 file3 (打包，带提示信息，不压缩)<br>tar cvfz all.tar.gz file1 file2 file3 (打包，带提示信息，压缩)</p>
<p><strong>Unpack file （解压文件）</strong><br>tar [xvfz] package_name<br>[xvfz]中x表示解压，vf表示带提示信息，z表示压缩文件。<br>例: tar xvf all.tar<br>tar xvfz all.tar.gz 默认解压到当前目录</p>
<p><strong>若解压到其他地方（路径），格式为:tar xvfz all.tar.gz -C路径</strong></p>
<hr>
<p>####链接文件：<br><strong>硬链接</strong>:文件的另一个入口，和原文件一样指向硬盘上的数据块<br><strong>软链接:</strong>保存了路径信息，大小和路径长度相同<br>ln [-s] source_file destination_file<br>[-s] 加-s创建软链接，不加默认创建硬链接。</p>
<p>touch 可不可以去创建已丢失的链接目标?<br>eg:<br>slink –&gt; a.txt<br>a.txt的软链接为slink，但a.txt以删除；<br>touch slink 则会创建a.txt（里面没有内容了）,不会更新时间，但会创建丢失的链接目标。</p>
<hr>
<p>####man :查看命令的详细信息即用法<br>eg:mam touch即可查看touch的用法<br>或者用：touch –help 也可查看touch的用法</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Handler详解（一）---关联到UI线程]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BHandler%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89-%E5%85%B3%E8%81%94%E5%88%B0UI%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>此文转载自<a href="http://www.cnblogs.com/shirley-1019/p/3557800.html" target="_blank" rel="external">http://www.cnblogs.com/shirley-1019/p/3557800.html</a><br><a href="http://www.cnblogs.com/shirley-1019/p/3566730.html" target="_blank" rel="external">http://www.cnblogs.com/shirley-1019/p/3566730.html</a></p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><ul>
<li>Handler， 它直接继承自Object，一个Handler允许发送和处理Message或者Runnable对象，并且会关联到所属线程的MessageQueue 中。每个Handler具有一个单独的线程，并且关联到一个消息队列的线程，就是说一个Handler有一个固有的消息队列。当实例化一个Handler 的时候，它就承载在一个线程和消息队列的线程，这个Handler可以把Message或Runnable压入到消息队列，并且从消息队列中取出 Message或Runnable，进而操作它们。</li>
<li>Handler主要有两个作用：<br>1.从其他线程中发送消息。<br>2.在handler所关联的线程中获取、处理消息。</li>
</ul>
<p>注:<br>    <strong><em>Handler与谁相关联不是看声明在什么地方，是看与哪个线程的looper挂钩。默认是主线程的looper.因为主线程中默认就有了looper,消息循环队列。</em></strong></p>
<p>Handler可以把一个Message对象或者Runnable对象压入到消息队列中，进而在Handler所关联线程中获取Message或者执行Runnable对象，所以Handler把压入消息队列有两大体系，Post和sendMessage：</p>
<p><strong>Post</strong>：Post允许把一个Runnable对象入队到消息队列中。它的方法有：post(Runnable)、<br>postAtTime(Runnable,long)、<br>postDelayed(Runnable,long)。</p>
<p><strong>sendMessage</strong>：sendMessage允许把一个包含消息数据的Message对象压入到消息队列中。它的方法 有：<br>sendEmptyMessage(int)、<br>sendMessage(Message)、<br>sendMessageAtTime(Message,long)、<br>sendMessageDelayed(Message,long)。</p>
<p>　　从上面的各种方法可以看出，不管是post还是sendMessage都具有多种方法，它们可以设定Runnable对象和Message对象被入队到消息队列中，是立即执行还是延迟执行。</p>
<p>Post<br>　　对于Handler的Post方式来说，它会传递一个Runnable对象到消息队列中，在这个Runnable对象中，重写run()方法。一般在这个run()方法中写入需要在UI线程上的操作。</p>
<p>在Handler中，关于Post方式的方法有：</p>
<ol>
<li>boolean post(Runnable r)：把一个Runnable入队到消息队列中，UI线程从消息队列中取出这个对象后，立即执行。</li>
<li>boolean postAtTime(Runnable r,long uptimeMillis)：把一个Runnable入队到消息队列中，UI线程从消息队列中取出这个对象后，在特定的时间执行。</li>
<li>boolean postDelayed(Runnable r,long delayMillis)：把一个Runnable入队到消息队列中，UI线程从消息队列中取出这个对象后，延迟delayMills秒执行</li>
<li>void removeCallbacks(Runnable r)：从消息队列中移除一个Runnable对象。</li>
</ol>
<pre><code>下面通过一个Demo，讲解如何通过Handler的post方式在新启动的线程中修改UI组件的属性：
（在Android项目中经常有碰到这样的问题，在子线程中完成耗时操作之后要更新UI）
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        final TextView textView = (TextView) findViewById(R.id.textView);</div><div class="line">        Button updateBtn = (Button) findViewById(R.id.updateBtn);</div><div class="line">        Button cancleBtn = (Button) findViewById(R.id.cancleBtn);</div><div class="line">        final Handler handler = new Handler();</div><div class="line">        final Runnable run = new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                textView.setText(&quot;After Update&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        updateBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">            /*</div><div class="line">                //这里可以处理耗时的操作</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(5000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                //把一个Runnable入队到消息队列中，handler关联的线程从消息队列中取出这个对象后，立即执行。</div><div class="line">                handler.post(run);</div><div class="line">			*/</div><div class="line">                //将run放入handler关联的消息队列中，hander关联的线程从消息队列中取出5秒后执行。</div><div class="line">                handler.postDelayed(run,5000);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        cancleBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                //从消息队列中移除一个Runnable对象。不能移除放入消息队列中立即执行的post(run),</div><div class="line">                //可以移除postDelayed(run,5000)中的run对象。</div><div class="line">                handler.removeCallbacks(run);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://img.blog.csdn.net/20150819202530789" alt="这里写图片描述"><br>1.如果UPDATE按钮执行的是注释/<em> handler.post(run) </em>/里面的代码<br>(1)点击UPDATE按钮,5s之后 TextView中Before Update变为After Update。<br>(2)点击UPDATE按钮后，5s之前点击CANCLE UPDATE按钮，TextView中Before Update还是会变为After Update，移除不掉run对象，因为handler.post(run)是立即执行run对象。<br>2.如果UPDATE按钮执行的是handler.postDelayed(run,5000)方法，5s之前点击CANCLE UPDATA按钮，则可以将run对象从消息队列中移除，因为postDelayed(run,5000) 5s之后才会执行run对象，post(run)是立即执行run对象。</p>
<p>Message:</p>
<p>　　Handler如果使用sendMessage的方式把消息入队到消息队列中，需要传递一个Message对象，而在Handler中，需要重 写handleMessage()方法，用于获取工作线程传递过来的消息，此方法运行在handler关联的线程上。下面先介绍一下Message。</p>
<p>　　Message是一个final类，所以不可被继承。Message封装了线程中传递的消息，如果对于一般的数据，Message提供了getData()和setData()方法来获取与设置数据，其中操作的数据是一个Bundle对 象，这个Bundle对象提供一系列的getXxx()和setXxx()方法用于传递基本数据类型的键值对，对于基本数据类型，使用起来很简单，这里不 再详细讲解。而对于复杂的数据类型，如一个对象的传递就要相对复杂一些。在Bundle中提供了两个方法，专门用来传递对象的，但是这两个方法也有相应的 限制，需要实现特定的接口，当然，一些Android自带的类，其实已经实现了这两个接口中的某一个，可以直接使用。方法如下：</p>
<pre><code>    putParcelable(String key,Parcelable value)：需要传递的对象类实现Parcelable接口。

pubSerializable(String key,Serializable value)：需要传递的对象类实现Serializable接口。
</code></pre><p>　　还有另外一种方式在Message中传递对象，那就是使用Message自带的obj属性传值，它是一个Object类型，所以可以传递任意类型的对象，Message自带的有如下几个属性：</p>
<p>int arg1：参数一，用于传递不复杂的数据，复杂数据使用setData()传递。<br>int arg2：参数二，用于传递不复杂的数据，复杂数据使用setData()传递。<br>Object obj：传递一个任意的对象。</p>
<p> 　　对于Message对象，一般并不推荐直接使用它的构造方法得到，而是建议通过使用Message.obtain()这个静态的方法或者 Handler.obtainMessage()获取。Message.obtain()会从消息池中获取一个Message对象，如果消息池中是空的， 才会使用构造方法实例化一个新Message，这样有利于消息资源的利用。并不需要担心消息池中的消息过多，它是有上限的，上限为10个。 Handler.obtainMessage()具有多个重载方法，如果查看源码，会发现其实Handler.obtainMessage()在内部也是 调用的Message.obtain()。　　</p>
<p>　　Message是在线程间传递消息，将上面的post demo转化为sendMessage的形式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button sendBtn;</div><div class="line">    Handler handler;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        sendBtn = (Button) findViewById(R.id.sendBtn);</div><div class="line">        handler = new Handler()&#123;</div><div class="line">            @Override</div><div class="line">            public void handleMessage(Message msg) &#123;</div><div class="line">                super.handleMessage(msg);</div><div class="line">                if (msg.what == 1)</div><div class="line">                &#123;</div><div class="line">                    textView.setText(msg.obj.toString());</div><div class="line">//                    textView.setText(&quot;After Message&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        sendBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        //此处可处理耗时操作</div><div class="line">                        try &#123;</div><div class="line">                            Thread.sleep(5000);</div><div class="line">                        &#125; catch (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        //耗时操作完成之后发送Message</div><div class="line">                        Message msg = Message.obtain();</div><div class="line">                        msg.what = 1;</div><div class="line">                        msg.obj = &quot;After Message&quot;;</div><div class="line">                        handler.sendMessage(msg);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://img.blog.csdn.net/20150820085945025" alt="这里写图片描述"></p>
<p>点击SENDMESSAGE按钮，5s后Before Message变为After Message</p>
<p>工作流程：</p>
<ol>
<li>Handler默认关联到UI线程(主线程),在非UI线程中调用handler向自己发送message,将Message发送到handler所关联的线程的MessageQueue.</li>
<li>通过handler.sendMessage()回调handler中的回调函数handleMessage(),在handleMessage()中更新UI.</li>
</ol>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Handler详解（二）---关联到非UI线程]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BHandler%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%85%B3%E8%81%94%E5%88%B0%E9%9D%9EUI%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Handler、Loop、MessageQueue的工作原理"><a href="#Handler、Loop、MessageQueue的工作原理" class="headerlink" title="Handler、Loop、MessageQueue的工作原理"></a>Handler、Loop、MessageQueue的工作原理</h2><p>先介绍一下与Handler一起工作的几个组件。</p>
<ul>
<li>Message: Handler接受和处理的消息对象。</li>
<li>Looper: 每个线程只能拥有一个Looper。它的loop方法负责读取MessageQueue中的消息，读到消息之后就把消息交给发送该消息的Handler进行处理。</li>
<li>MessageQueue: 消息队列，它采用先进先出的方式来管理Message。程序创建Looper对象时，会在它的构造器中创建MessageQueue对象。</li>
<li>Handler: 它的作用有两个—发送消息和处理消息，程序使用Handler发送消息，由Handler发送的消息必须发送到指定的MessageQueue中，也就是说如果希望Handler正常工作，必须在handler所关联的线程中有一个MessageQueue,而MessageQueue是由Looper来管理的，故Handler关联的线程中必须有一个Looper对象。</li>
</ul>
<p>为了保证Handler关联的线程有Looper对象，可分一下两种情况：</p>
<ol>
<li>在主UI线程中，系统已经初始化了一个Looper对象，因此程序直接创建Handler即可，然后就可以通过Handler来发送消息、处理消息了。(即之前写的博客：Handler详解(一)—关联到UI线程，<strong>非UI线程向UI线程中发送消息</strong>)</li>
<li>程序员自己启动的子线程，必须自己创建一个Looper对象，并启动它。创建Looper对象调用它的prepare()方法即可。prepare()方法保证每个线程最多只有一个Looper对象。<strong>UI线程向非UI线程发送消息</strong>。</li>
</ol>
<p>调用Looper的静态loop()方法可以启动Looper对象。loop()方法使用一个死循环不断的取出MessageQueue中的消息，并将取出的消息发给给消息对应的Handler进行处理。</p>
<p>归纳，Looper、MessageQueue、Handler各自的作用如下：</p>
<ol>
<li>Looper： 每个线程只有一个Looper,它负责管理MessageQueue，会不断的从MessageQueue中取出消息，并将消息分给对应的Handler处理。</li>
<li>MessageQueue： 有Looper负责管理。它采用先进先出的方式来管理Message.</li>
<li>Handler: 它能把消息发送给Looper管理的MessageQueue，并负责处理Looper分给它的消息。</li>
</ol>
<p>在自己创建的线程中使用Handler的步骤:</p>
<ol>
<li>调用Looper的prepare方法为当前线程创建Looper对象，创建Looper对象时，它的构造器会创建与之配套的MessageQueue。</li>
<li>有了Looper后创建Handler子类的实例，重写handleMessage()方法，该方法处理来自于其他线程的消息。</li>
<li>调用Looper的loop()方法启动Looper.</li>
</ol>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button showButton;</div><div class="line">    CallThread callThread;</div><div class="line">    Handler handler;</div><div class="line"></div><div class="line">    class CallThread extends Thread</div><div class="line">    &#123;</div><div class="line">        @Override</div><div class="line">        public void run()</div><div class="line">        &#123;</div><div class="line">            Looper.prepare();</div><div class="line">            handler = new Handler()</div><div class="line">            &#123;</div><div class="line">                @Override</div><div class="line">                public void handleMessage(Message msg) &#123;</div><div class="line">                    super.handleMessage(msg);</div><div class="line">                    if (msg.what == 1)</div><div class="line">                    &#123;</div><div class="line">                        try &#123;</div><div class="line">                            Thread.sleep(5000);</div><div class="line">                        &#125; catch (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        Toast.makeText(MainActivity.this,textView.getText(),LENGTH_LONG).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            Looper.loop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        showButton = (Button) findViewById(R.id.showBtn);</div><div class="line"></div><div class="line">        callThread = new CallThread();</div><div class="line">        callThread.start();</div><div class="line"></div><div class="line">        showButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                //callThread在此处初始化不行，必须放到上面初始化，</div><div class="line">                // 否则导致程序无法运行，本人刚学Android，等以后知道了才解释吧。</div><div class="line">//                callThread = new CallThread();</div><div class="line">//                callThread.start();</div><div class="line">                Message msg = Message.obtain();</div><div class="line">                msg.what = 1;</div><div class="line">                handler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://img.blog.csdn.net/20150820135129361" alt="这里写图片描述"><br>点击SHOW TOAST按钮,5s后按钮下面显示Toast的内容为Hello World.</p>
<p>如果将上述代码该为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">showButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onClick(View view) &#123;</div><div class="line">            new Thread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(5000);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    Toast.makeText(MainActivity.this,textView.getText(),LENGTH_LONG).show();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>点击SHOW TOAST按钮,5s后不会出现Toast,程序运行失败，怎么回事？<br>报的错误为：</p>
<blockquote>
<p>java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</p>
</blockquote>
<p>当然，有人会问UI线程向非UI线程之间进行通信时，每次都得写Looper对象，那岂不是很麻烦。故Android已经帮我们实现好了自带Looper的线程，那就是HandlerThread类。</p>
<h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>Android对HandlerThread的描述：</p>
<blockquote>
<p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>
</blockquote>
<p>使用HandlerThread的步骤：</p>
<ol>
<li>创建一个HandlerThread，即创建了一个包含Looper的线程。<br>`handlerThread = new HandlerThread(“handlerThread”);<pre><code>//创建handlerThread后一定要记得start.
handlerThread.start();`
</code></pre></li>
<li><p>获取HandlerThread的Looper</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Looper looper = handlerThread.getLooper();</div></pre></td></tr></table></figure>
<p>3   创建Handler，通过Looper初始化<br>handler = new Handler(looper);</p>
<p>通过以上三步我们就成功创建HandlerThread。通过handler发送消息，就会在子线程中执行。如果想让HandlerThread退出，则需要调用handlerThread.quit();</p>
<p>注：如果hander传递的是Message,则需要重写handlerMessage(）函数。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">handler = new Handler(looper)</div><div class="line">       &#123;</div><div class="line">           @Override</div><div class="line">           public void handleMessage(Message msg) &#123;</div><div class="line">               super.handleMessage(msg);</div><div class="line">               if (msg.what == 1)</div><div class="line">               &#123;</div><div class="line">                   //要处理的事情</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div></pre></td></tr></table></figure>
<p>或者自己创建个线程类继承HandlerThread类并实现CallBack接口以重写CallBack里面的handlerMessage方法，在handlerMessage方法中来处理自己的逻辑。</p>
<p>如果hander传递的是Runnable对象，则不需要重写handlerMessage()函数。</p>
<p>使用HandlerThread重写上面的Demo:<br>public class MainActivity extends Activity {<br>    private TextView textView;<br>    private Button showBtn;<br>    private HandlerThread handlerThread;<br>    private Handler handler;</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    handlerThread = new HandlerThread(&quot;handlerThread&quot;);
    //创建handlerThread后一定要记得start.
    handlerThread.start();

    Looper looper = handlerThread.getLooper();

    //handler与谁关联不是看在哪创建handler，而是看handler创建时与哪个线程的looper挂钩。
    handler = new Handler(looper)
    {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.what == 1)
            {
                Toast.makeText(getApplicationContext(),textView.getText()
                ,Toast.LENGTH_LONG).show();
            }
        }
    };

    textView = (TextView) findViewById(R.id.textView);
    showBtn = (Button) findViewById(R.id.showBtn);

    showBtn.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            handler.sendEmptyMessageDelayed(1,5000);
        }
    });
}
</code></pre><p>}</p>
<h2 id="HandlerThread和普通Thread的比较"><a href="#HandlerThread和普通Thread的比较" class="headerlink" title="HandlerThread和普通Thread的比较"></a>HandlerThread和普通Thread的比较</h2><ul>
<li>HandlerThread继承自Thread，当线程开启时，也就是它run方法运行起来后，线程同时创建了一个含有消息队列的Looper，并对外提供自己这个Looper对象的get方法。</li>
<li><p>为什么要使用HandlerThread。</p>
<p> 1.开发中如果多次使用类似new Thread(){…}.start()。这种方式开启一个子线程，会创建多个匿名线程，使得程序运行起来越来越慢，<br> 而HandlerThread自带Looper使他可以通过消息来多次重复使用当前线程，节省开支；</p>
<p> 2.android系统提供的Handler类内部的Looper默认绑定的是UI线程的消息队列，对于非UI线程又想使用消息机制，那么HandlerThread内部的Looper是最合适的，它不会干扰或阻塞UI线程。</p>
</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之更新UI的方法]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8B%E6%9B%B4%E6%96%B0UI%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>出于性能优化考虑，Android的UI操作并不是线程安全的，这意味着如果有多个线程并发操作UI组件，则可能导致线程安全问题。为了解决这个问题，Android制定了一条简单的规则：只允许UI线程修改Activity里的UI组件。<br>如果不明白的，可以看这篇博客：<br><a href="http://www.cnblogs.com/qingblog/archive/2012/07/18/2597802.html" target="_blank" rel="external">http://www.cnblogs.com/qingblog/archive/2012/07/18/2597802.html</a></p>
<h2 id="方法一：使用Handler实现线程之间的通信"><a href="#方法一：使用Handler实现线程之间的通信" class="headerlink" title="方法一：使用Handler实现线程之间的通信"></a>方法一：使用Handler实现线程之间的通信</h2><p>此方法在在这篇博客中已经将的很清楚了：<br><a href="http://blog.csdn.net/u011026329/article/details/47785701" target="_blank" rel="external">http://blog.csdn.net/u011026329/article/details/47785701</a></p>
<p>Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button updateBtn;</div><div class="line">    private Handler handler;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        updateBtn = (Button) findViewById(R.id.updateBtn);</div><div class="line">        handler = new Handler();</div><div class="line"></div><div class="line">        updateBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">	                    //耗时操作，完成之后发送Runnable对象</div><div class="line">                        try &#123;</div><div class="line">                            Thread.sleep(5000);</div><div class="line">                        &#125; catch (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        handler.post(new Runnable() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void run() &#123;</div><div class="line">	                            //更新UI</div><div class="line">                                textView.setText(&quot;After Update&quot;);     </div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法Handler必须关联到UI线程。</p>
<h2 id="方法二：View-post-Runnable"><a href="#方法二：View-post-Runnable" class="headerlink" title="方法二：View.post(Runnable)"></a>方法二：View.post(Runnable)</h2><p>Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button updateBtn;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        updateBtn = (Button) findViewById(R.id.updateBtn);</div><div class="line"></div><div class="line">        updateBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        try &#123;</div><div class="line">                            Thread.sleep(5000);</div><div class="line">                        &#125; catch (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">	                     //函数调用</div><div class="line">                        textView.post(new Runnable() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void run() &#123;</div><div class="line">                                textView.setText(&quot;After Update&quot;);</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View.post(Runnable)方法。在post(Runnable run)方法里，View获得当前线程（即UI线程）的Handler，然后将run对象post到Handler里。<br>即view.post()方法内部会创建一个handler，并调用handler.post()。故其本质是Hander方法的实现。</p>
<p><strong>这种方法更简单，但需要传递要更新的View过去；</strong></p>
<h2 id="方法三：Activity-runOnUiThread-Runnable"><a href="#方法三：Activity-runOnUiThread-Runnable" class="headerlink" title="方法三：Activity.runOnUiThread(Runnable)"></a>方法三：Activity.runOnUiThread(Runnable)</h2><p>利用Activity.runOnUiThread(Runnable)把更新ui的代码创建在Runnable中，然后在需要更新ui时，把这个Runnable对象传给Activity.runOnUiThread(Runnable)。 这样Runnable对像就能在ui程序中被调用。如果当前线程是UI线程,那么行动是立即执行。如果当前线程不是UI线程,操作是发布到事件队列的UI线程</p>
<p>Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button updateBtn;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        updateBtn = (Button) findViewById(R.id.updateBtn);</div><div class="line"></div><div class="line">        updateBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        try &#123;</div><div class="line">                            Thread.sleep(5000);</div><div class="line">                        &#125; catch (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        //函数调用</div><div class="line">                        runOnUiThread(new Runnable() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void run() &#123;</div><div class="line">                                textView.setText(&quot;After Update&quot;);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在非上下文类中（Activity），可以通过传递上下文实现调用；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Activity activity = (Activity) textView.getContext();</div><div class="line">      activity.runOnUiThread(new Runnable() </div><div class="line">      &#123;</div><div class="line">          @Override</div><div class="line">          public void run() </div><div class="line">          &#123;</div><div class="line">              textView.setText(&quot;After Update&quot;);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>这种方法使用比较灵活，但如果Thread定义在其他地方，需要传递Activity对象；</p>
<h2 id="方法四：AsyncTask"><a href="#方法四：AsyncTask" class="headerlink" title="方法四：AsyncTask"></a>方法四：AsyncTask</h2><p>此方法在下一篇博客中单独列出来讲解。</p>
<p>更多关于Android更新UI的方法请看这篇博客：<br><a href="http://www.cnblogs.com/wenjiang/p/3180324.html#undefined" target="_blank" rel="external">探讨android更新UI的几种方法</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之延迟执行某个任务]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8B%E5%BB%B6%E8%BF%9F%E6%89%A7%E8%A1%8C%E6%9F%90%E4%B8%AA%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>本博客转载自<a href="http://blog.csdn.net/qinde025/article/details/6828723" target="_blank" rel="external">android中延迟执行某个任务</a><br>android中延迟执行某个任务<br>android App开发在某些情况下需要有延时功能，比如说App首页显示定格3秒，然后自动跳到登录页的情况，这就好比是一个预加载，但是这个预加载可能瞬间就完成了，撑不到3秒钟，这是就要求你做延时处理。</p>
<p>下面是三种方法：<br>一、线程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new Thread(new Runnable()</div><div class="line">&#123;</div><div class="line">	public void run()</div><div class="line">	&#123;    </div><div class="line">    	Thread.sleep(XXXX);    </div><div class="line">    	handler.sendMessage();----告诉主线程执行任务    </div><div class="line">     &#125;    </div><div class="line">&#125;).start</div></pre></td></tr></table></figure>
<p>二、延时器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">TimerTask task = new TimerTask()</div><div class="line">&#123;    </div><div class="line">    public void run()</div><div class="line">	&#123;    </div><div class="line">    	//execute the task     </div><div class="line">    &#125;    </div><div class="line">&#125;;    </div><div class="line">Timer timer = new Timer();  </div><div class="line">timer.schedule(task, delay);</div></pre></td></tr></table></figure>
<p>三、android消息处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">new Handler().postDelayed(new Runnable()&#123;    </div><div class="line">    public void run() </div><div class="line">	&#123;    </div><div class="line">    	//execute the task    </div><div class="line">    &#125;    </div><div class="line"> &#125;, delay);</div></pre></td></tr></table></figure>
<p>推荐使用第三种</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初次安装AndroidStudio之环境设置]]></title>
      <url>http://freeshow.github.io/2016/07/24/%E5%88%9D%E6%AC%A1%E5%AE%89%E8%A3%85AndroidStudio%E4%B9%8B%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li>设置背景主题<br><img src="http://img.blog.csdn.net/20150820220445240" alt="这里写图片描述"></li>
</ol>
<ol>
<li><p>设置字体大小<br><img src="http://img.blog.csdn.net/20150820220655248" alt="这里写图片描述"><br>字体大小Size设置为18</p>
</li>
<li><p>显示行号和显示函数分割线<br><img src="http://img.blog.csdn.net/20150820221040655" alt="这里写图片描述"></p>
</li>
</ol>
<p>设置完这3项后，在开始变成感觉舒服多了，哈哈。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java里如何正确计算检验和]]></title>
      <url>http://freeshow.github.io/2016/07/24/java%E9%87%8C%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%AE%A1%E7%AE%97%E6%A3%80%E9%AA%8C%E5%92%8C/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">byte[] Check_Sum(byte[] Data, int Len) </div><div class="line">&#123;</div><div class="line">	byte CheckSum = 0;</div><div class="line">	for (int i = 0; i &lt; Len; i++)</div><div class="line">	CheckSum += Data[i] &amp; 0xFF;</div><div class="line">	return Sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要让java字节参加无符号运算，需要&amp;0xFF，等于不要让最高位变成符号位.<br>Java没有无符号数据类型。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之AsyncTask介绍]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BAsyncTask%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="android-AsyncTask介绍"><a href="#android-AsyncTask介绍" class="headerlink" title="android AsyncTask介绍"></a>android AsyncTask介绍</h2><p>AsyncTask和Handler对比</p>
<ul>
<li><p>AsyncTask实现的原理,和适用的优缺点</p>
<ul>
<li>AsyncTask是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</li>
<li>使用的优点: 简单,快捷，过程可控。</li>
<li>使用的缺点: 在使用多个异步操作和并需要进行Ui变更时,就变得复杂起来.</li>
</ul>
</li>
<li><p>Handler异步实现的原理和适用的优缺点</p>
<ul>
<li>在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。</li>
<li>使用的优点：(1)结构清晰，功能定义明确 (2)对于多个后台任务时，简单，清晰 </li>
<li>使用的缺点：在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）</li>
</ul>
</li>
</ul>
<p><strong>AsyncTask介绍</strong></p>
<p>Android的AsyncTask比Handler更轻量级一些，适用于简单的异步处理。<br>首先明确Android之所以有Handler和AsyncTask，都是为了不阻塞主线程（UI线程），且UI的更新只能在主线程中完成，因此异步处理是不可避免的。</p>
<p>Android为了降低这个开发难度，提供了AsyncTask。AsyncTask就是一个封装过的后台任务类，顾名思义就是异步任务。</p>
<p>AsyncTask直接继承于Object类，位置为android.os.AsyncTask。要使用AsyncTask工作我们要提供三个泛型参数，并重载几个方法(至少重载一个)。</p>
<p>AsyncTask定义了三种泛型类型 Params，Progress和Result。</p>
<ul>
<li>Params 启动任务执行的输入参数，比如HTTP请求的URL。</li>
<li>Progress 后台任务执行的百分比。</li>
<li>Result 后台执行任务最终返回的结果，比如String.</li>
<li>在特定场合下，并不是所有类型都被使用，如果没有被使用，可以用java.lang.Void类型代替。</li>
</ul>
<p>使用过AsyncTask 的同学都知道一个异步加载数据最少要重写以下这两个方法：</p>
<ul>
<li>doInBackground(Params…) 后台执行，比较耗时的操作都可以放在这里。注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作，通常需要较长的时间。在执行过程中可以调用publishProgress(Progress…)来更新任务的进度。publishProgress(Progress…)执行后会触发onProgressUpdate(Progress…) 方法，doInBackground(Params…)方法接受后会系统调用onPostExecute(Result) 方法。</li>
<li>onPostExecute(Result)  相当于Handler 处理UI的方式，在这里面可以使用在doInBackground得到的结果处理操作UI。 此方法<strong><em>在主线程执行</em></strong>，任务执行的结果作为此方法的参数返回</li>
</ul>
<p>有必要的话你还得重写以下这三个方法，但不是必须的：</p>
<ul>
<li>onProgressUpdate(Progress…)   可以使用进度条增加用户体验度。 此方法<strong>在主线程执行</strong>，用于显示任务执行的进度。</li>
<li>onPreExecute()        这里是最终用户调用Excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。<strong>Runs on the UI thread</strong> before doInBackground.</li>
<li>onCancelled()             用户调用取消时，要做的操作</li>
</ul>
<p>一个异步任务的执行一般包括以下几个步骤：</p>
<ol>
<li>execute(Params… params)，执行一个异步任务，需要我们在代码中调用此方法，触发异步任务的执行。<ol>
<li>onPreExecute()，在execute(Params… params)被调用后立即执行，一般用来在执行后台任务前对UI做一些标记。</li>
<li>doInBackground(Params… params)，在onPreExecute()完成后立即执行，用于执行较为费时的操作，此方法将接收输入参数和返回计算结果。在执行过程中可以调用publishProgress(Progress… values)来更新进度信息。publishProgress(Progress… values)的任务是传递参数values到函数onProgressUpdate(Progress… values)的形参values中。</li>
<li>onProgressUpdate(Progress… values)，在调用publishProgress(Progress… values)时，此方法被执行，直接将进度信息更新到UI组件上。</li>
<li>onPostExecute(Result result) 接受doInBackground(Params… params)的函数返回结果传入到result中，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，直接将结果显示到UI组件上。</li>
</ol>
</li>
</ol>
<p>使用AsyncTask类，以下是几条必须遵守的准则：</p>
<ul>
<li>Task的实例必须在UI thread中创建；</li>
<li>execute方法必须在UI thread中调用；</li>
<li>不要手动调用onPreExecute(), onPostExecute(Result)，doInBackground(Params…), onProgressUpdate(Progress…)这几个方法；</li>
<li>该task只能被执行一次，否则多次调用时将会出现异常；</li>
</ul>
<p>Demo: 是用异步任务下载网络资源。该Demo的界面布局很简单，只包含两个组件：一个文本框用于显示从网络下载的页面代码；一个按钮用于激发下载任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button downloadBtn;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line">        downloadBtn = (Button) findViewById(R.id.downloadBtn);</div><div class="line"></div><div class="line">        downloadBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">	            //必须在UI线程中创建AsyncTask的实例</div><div class="line">                DownTask downTask = new DownTask(MainActivity.this);</div><div class="line">                try &#123;</div><div class="line">	                //必须在UI线程中调用AsyncTask实例的execute()方法</div><div class="line">                    downTask.execute(new URL(&quot;http://www.csdn.net&quot;));</div><div class="line">                &#125; catch (MalformedURLException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class DownTask extends AsyncTask&lt;URL,Integer,String&gt;</div><div class="line">    &#123;</div><div class="line">        ProgressDialog progressDialog;</div><div class="line">        //记录已经读取行的数量</div><div class="line">        int hasRead = 0;</div><div class="line">        Context context;</div><div class="line">		//构造函数</div><div class="line">        public DownTask(Context context) &#123;</div><div class="line">            this.context = context;</div><div class="line">        &#125;</div><div class="line">		//这里是最终用户调用Excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。在UI线程中执行,主要用于完成一些初始化工作。</div><div class="line">        @Override</div><div class="line">        protected void onPreExecute() &#123;</div><div class="line">	        //创建对话框</div><div class="line">            progressDialog = new ProgressDialog(context);</div><div class="line">            //设置对话框标题</div><div class="line">            progressDialog.setTitle(&quot;任务正在进行中&quot;);</div><div class="line">            //设置对话框显示的内容</div><div class="line">            progressDialog.setMessage(&quot;任务正在执行中，敬请等待...&quot;);</div><div class="line">            //设置对话框不能用取消按钮关闭</div><div class="line">            progressDialog.setCancelable(false);</div><div class="line">            //设置进度条的最大进度值</div><div class="line">            progressDialog.setMax(100);</div><div class="line">			//设置对话框的进度条风格 progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">			//设置对话框的进度条是否显示进度</div><div class="line">            progressDialog.setIndeterminate(false);</div><div class="line">            //显示对话框</div><div class="line">            progressDialog.show();</div><div class="line">        &#125;</div><div class="line">		</div><div class="line">		//后台耗时任务在这里执行，此处不可以更新UI界面</div><div class="line">        @Override</div><div class="line">        protected String doInBackground(URL... params) &#123;</div><div class="line">            StringBuilder sb = new StringBuilder();</div><div class="line">            try &#123;</div><div class="line">                URLConnection conn = params[0].openConnection();</div><div class="line">                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));</div><div class="line">                String line = null;</div><div class="line">                while ((line = br.readLine()) != null)</div><div class="line">                &#123;</div><div class="line">                    Thread.sleep(1000);</div><div class="line">                    sb.append(line + &quot;\n&quot;);</div><div class="line">                    hasRead++;</div><div class="line">	                //讲hasRead传到onProgressUpdate(Integer... values)函数中</div><div class="line">                    publishProgress(hasRead);</div><div class="line">                &#125;</div><div class="line">                //将返回值传递到onPostExecute(String s)函数中</div><div class="line">                return sb.toString();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">		//此函数在UI线程中执行，用于更新进度条</div><div class="line">        @Override</div><div class="line">        protected void onProgressUpdate(Integer... values) &#123;</div><div class="line">            progressDialog.setProgress(values[0]);</div><div class="line">            textView.setText(&quot;已经读取了【&quot;+ values[0] +&quot;】行!&quot;);</div><div class="line">        &#125;</div><div class="line">		//在UI线程中执行，主要用于更新UI</div><div class="line">        @Override</div><div class="line">        protected void onPostExecute(String s) &#123;</div><div class="line">            textView.setText(s);</div><div class="line">            progressDialog.dismiss();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://img.blog.csdn.net/20150821164158166" alt="这里写图片描述"><br>下载完成后将下载的代码显示在TextView中</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Fragment（一）--简介]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BFragment%EF%BC%88%E4%B8%80%EF%BC%89-%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Fragment是Android 3.0引入的新API。Fragment代表了Activity的子模块，因此可以把Fragment理解成Activity的片段。Fragment拥有自己的生命周期，也可以接受它自己的输入事件。</p>
<h2 id="Fragment概述"><a href="#Fragment概述" class="headerlink" title="Fragment概述"></a>Fragment概述</h2><p>Fragment必须被嵌入到Activity中才能使用，因此，虽然Fragment拥有自己的生命周期，但Fragment的生命周期会受它所在的Activity的生命周期控制。例如，当Activity暂停时，该Activity内的所有Fragment都会暂停；当Activity被销毁时，该Activity内的所有Fragment都会被销毁。只有当Activity处于活动状态时，程序员才可以通过方法独立的操作Fragment。</p>
<p>关于Fragment,可以归纳出如下几个特征。</p>
<ul>
<li>Fragment总是作为Activity界面的组成部分。Fragment可以调用getActivity()方法获取它所在的Activity，Activity可调用FragmentManager的findFragmentById()或findFragmentByTag()方法来获取Fragment。</li>
<li>在Activity运行过程中，可调用FragmentManager的add()、remove()、replace()方法动态的添加、删除或替换Fragment。</li>
<li>一个Activity可以同时组合多个Fragment；反过来，一个Fragment也可以被多个Activity复用。</li>
<li>Fragment可以相应自己的输入事件，并拥有自己的生命周期，但它们的生命周期直接被其所属的Activity的生命周期控制。</li>
</ul>
<h2 id="Fragment设计初衷"><a href="#Fragment设计初衷" class="headerlink" title="Fragment设计初衷"></a>Fragment设计初衷</h2><p> Android 3.0引入Fragment的初衷是为了使用屏幕的平板电脑，由于平板电脑的屏幕比手机屏幕更大，因此可以容纳更多的UI组件，且这些UI组件之间存在交互关系。Fragment简化了大屏幕UI的设计，它不需要开发者管理组件包换关系的复杂变化，开发者使用Fragment对UI组件进行分组、模块化管理，把一个Activity分解成不同的Fragment，就可以更方便的在运行过程中动态更新Activity的用户界面。</p>
<p>例如，如下图所示：<br><img src="http://img.blog.csdn.net/20150821193839469" alt="在平板电脑中怎样把Fragment定义的两个UI模块组合到一个Activity，而在手持设备中又是如何分开例子。"></p>
<p>如图所示的因为浏览界面，该界面需要在屏幕左边显示新闻列表，并在屏幕右边显示新闻内容，此时可以在Activity中显示两个并排的Fragment：左边的Fragment显示新闻列表，右边的Fragment显示新闻内容。由于每个Fragment都拥有自己的生命周期，并可相应输入事件，因此可非常方面的实现：当用户单击左边列表中的指定新闻列表项时，右边的Fragment会显示相应的新闻内容。如图左边的平板电脑显示了这种UI界面。</p>
<p>通过上面的Fragment设计机制，可以取代传统的让一个Activity显示新闻列表，另一个Activity显示新闻内容的设计。</p>
<p><strong><em>由于Fragment是可复用的组件</em></strong>，因此如果需要在正常尺寸的手机屏幕上运行该应用，则可改为使用两个Activity：ActivityA包含FragmentA、ActivityB包含FragmentB。其中ActivityA仅包含显示新闻列表的FragmentA，而当用户选择一个新闻项时，它会启动包含新闻内容的ActivityB。如图右边所示，由此可见，Fragment可以很好的支持如图所示的两种设计模式。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Fragment（二）--使用]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BFragment%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://www.cnblogs.com/mengdd/archive/2013/01/08/2851368.html" target="_blank" rel="external">Android Fragment 基本介绍</a></p>
<h2 id="创建Fragment"><a href="#创建Fragment" class="headerlink" title="创建Fragment"></a>创建Fragment</h2><p>与创建Activity类似，开发者实现的Fragment必须继承Fragment基类，Android提供了如下图所示的Fragment继承体系。</p>
<p><img src="http://img.blog.csdn.net/20150822100223601" alt="这里写图片描述"></p>
<p>开发者实现的Fragment可以根据需要继承上图所示的Fragment基类或它的任意子类。接下来实现Fragment与实现Activity非常相似，它们都需要实现与Activity类似的回调方法，如onCreate()、onCreateView()、onStart()、onResume()、onPause()、onStop()等。</p>
<p>通常来说，创建Fragment需要实现如下三个方法：</p>
<ul>
<li>onCreate()：系统创建Fragment对象后回调该方法，在实现代码中只初始化想要在Fragment中保持的必要组件，当Fragment被暂停或者停止后可以恢复。</li>
<li>onCreateView()：当Fragment绘制界面时回调该方法。该方法必须返回一个View,该View也就是该Fragment所显示的View.</li>
<li>onPause():当用户离开该Fragment时将回调该方法。</li>
</ul>
<p>对于大部分Fragment而言，通常都可以重写上面的这三个方法。但实际开发者可以根据需要重写Fragment的任意回调方法。</p>
<p><strong><em>实现Fragment的UI</em></strong></p>
<p>提供Fragment的UI，必须实现onCreateView()方法。<br>假设Fragment的布局设置写在example_fragment.xml资源文件中，那么onCreateView()方法可以如下写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static class ExampleFragment extends Fragment</div><div class="line">&#123;</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">　　Bundle savedInstanceState)</div><div class="line">    &#123;</div><div class="line">        // Inflate the layout for this fragment</div><div class="line">        return inflater.inflate(R.layout.example_fragment, container, false);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> onCreateView()中container参数代表该Fragment在Activity中的父控件；savedInstanceState提供了上一个实例的数据。</p>
<p>inflate()方法的三个参数：</p>
<ul>
<li>第一个是resource ID，指明了当前的Fragment对应的资源文件；</li>
<li>第二个参数是父容器控件；</li>
<li>第三个布尔值参数表明是否连接该布局和其父容器控件，在这里的情况设置为false，因为系统已经插入了这个布局到父控件，设置为true将会产生多余的一个View Group。</li>
</ul>
<h2 id="把Fragment加入Activity"><a href="#把Fragment加入Activity" class="headerlink" title="把Fragment加入Activity"></a>把Fragment加入Activity</h2><p>当Fragment被加入Activity中时，它会处在对应的View Group中。</p>
<ul>
<li>一种是在Activity的layout中使用标签<fragment>声明；</fragment></li>
<li>另一种方法是在代码中把它加入到一个指定的ViewGroup中。</li>
<li>另外，Fragment它可以并不是Activity布局中的任何一部分，它可以是一个不可见的部分。这部分内容先略过。</li>
</ul>
<hr>
<p><strong><em>静态的使用Fragment</em></strong><br>这是使用Fragment最简单的一种方式，把Fragment当成普通的控件，直接写在Activity的布局文件中。</p>
<p>在Activity的布局文件中，将Fragment作为一个子标签加入即可。<br>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;fragment android:name=&quot;com.example.news.ArticleListFragment&quot;</div><div class="line">            android:id=&quot;@+id/list&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot; /&gt;</div><div class="line">    &lt;fragment android:name=&quot;com.example.news.ArticleReaderFragment&quot;</div><div class="line">            android:id=&quot;@+id/viewer&quot;</div><div class="line">            android:layout_weight=&quot;2&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>其中android:name属性填上你自己创建的fragment的完整类名。</p>
<p>当系统创建这个Activity的布局文件时，系统会实例化每一个fragment，并且调用它们的onCreateView()方法，来获得相应fragment的布局，并将返回值插入fragment标签所在的地方。</p>
<p>有三种方法为Fragment提供ID：</p>
<ol>
<li>android:id属性：唯一的id</li>
<li>android:tag属性：唯一的字符串</li>
<li>如果上面两个都没提供，系统使用容器view的ID。</li>
</ol>
<p>Demo:</p>
<ol>
<li>首先创建Fragment及其布局文件，ExampleFragment.java:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class ExampleFragment extends Fragment &#123;</div><div class="line">    private TextView textView;</div><div class="line">    private Button showBtn;</div><div class="line"></div><div class="line">    public ExampleFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_example, container, false);</div><div class="line">        textView = (TextView) view.findViewById(R.id.textView);</div><div class="line">        showBtn = (Button) view.findViewById(R.id.showBtn);</div><div class="line"></div><div class="line">        showBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                textView.setText(&quot;This is a Fragment!&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件，fragment_example.xml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:gravity=&quot;center|top&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;com.example.songxitang.fragmentexample.ExampleFragment&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- TODO: Update blank fragment layout --&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/textView&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginTop=&quot;20dp&quot;</div><div class="line">        android:text=&quot;Hello Fragment&quot;</div><div class="line"></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/showBtn&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginTop=&quot;20dp&quot;</div><div class="line">        android:text=&quot;Click&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>2.将Fragment添加到Activity中，MainActivity.java:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>及其布局文件，activity_main.xml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;fragment</div><div class="line">        android:id=&quot;@+id/exampleFragment&quot;</div><div class="line">        android:name=&quot;com.example.songxitang.fragmentexample.ExampleFragment&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;&lt;/fragment&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://img.blog.csdn.net/20150822125224775" alt="这里写图片描述"><br>点击CLICK按钮后：<br><img src="http://img.blog.csdn.net/20150822125321653" alt="这里写图片描述"></p>
<p>所有事件及绘图都在Fragment中实现，Activity中看起来非常干净。</p>
<hr>
<p><strong><em>动态的使用Fragment</em></strong></p>
<p>通过编程的方式将Fragment加入到一个ViewGroup中</p>
<p>当Activity处于Running状态下的时候，可以在Activity的布局中动态地加入Fragment，只需要指定加入这个Fragment的父View Group即可。因此Activity中的布局文件需要将静态加载Fragment的fragment元素替换为可以容纳组件的容器，如LineLayout、Include、FragmentLayout等，将Fragment对象放入容器中。</p>
<p>首先，需要一个FragmentTransaction实例：</p>
<blockquote>
<p>FragmentManager fragmentManager = getFragmentManager()</p>
<p>FragmentTransaction fragmentTransaction<br> = fragmentManager.beginTransaction();</p>
</blockquote>
<p>(注,如果import android.support.v4.app.FragmentManager;那么使用的是：FragmentManager fragmentManager = getSupportFragmentManager();）</p>
<p>之后，用add()方法加上Fragment的对象：</p>
<blockquote>
<p>ExampleFragment fragment = new ExampleFragment();</p>
<p>fragmentTransaction.add(R.id.fragment_container, fragment);</p>
<p>fragmentTransaction.commit();</p>
</blockquote>
<p>其中add()函数第一个参数是这个fragment的容器，即父控件组。<br>最后需要调用commit()方法使得FragmentTransaction实例的改变生效。</p>
<p>Demo:<br>动态使用Fragment修改上面的静态使用Fragment的Demo</p>
<p>ExampleFragment.java及其布局文件不变。<br>修改Activity的布局文件，activity_main.xml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/fragmLayout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;&lt;/FrameLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>修改MainActivity.java:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        FragmentManager fragmentManager = getFragmentManager();</div><div class="line">        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class="line"></div><div class="line">        ExampleFragment exampleFragment = new ExampleFragment();</div><div class="line">        fragmentTransaction.add(R.id.fragmLayout,exampleFragment);</div><div class="line">        fragmentTransaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果和上面的一样。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Fragment（三）--生命周期与回退栈]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BFragment%EF%BC%88%E4%B8%89%EF%BC%89-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E5%9B%9E%E9%80%80%E6%A0%88/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>本博客转载自：<br><a href="http://blog.csdn.net/lmj623565791/article/details/37970961" target="_blank" rel="external">Android Fragment 真正的完全解析（上）</a>、<br><a href="http://blog.csdn.net/lmj623565791/article/details/37992017" target="_blank" rel="external">Android Fragment 真正的完全解析（下）</a></p>
<h2 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h2><p>与Activity类似，Fragment也存在如下状态。</p>
<ul>
<li>运行状态：当前Fragment位于前台，用户可见，可以获得焦点。</li>
<li>暂停：其他Activity位于前台，该Fragment依然可见，只是不能获得焦点。</li>
<li>停止状态：该Fragment不可见，失去焦点。</li>
<li>销毁状态：该Fragment完全被删除，或该Fragment所在的Activity被结束。</li>
</ul>
<p>如下图官方给出的Fragment生命周期图：<br><img src="http://img.blog.csdn.net/20150823091935563" alt="The lifecycle of a fragment (while its activity is running)."></p>
<ul>
<li>onAttach():当该Fragment被添加到Activity时被调用。该方法只会被调用一次。</li>
<li>onCreate()：创建Fragment时被调用。该方法只会被调用一次。</li>
<li>onCreateView()：每次创建、绘制该Fragment的View组件时回调该方法，Fragment将会显示该方法返回的View组件。</li>
<li>onActivityCreated()：当Fragment所在的Activity被启动完成后回调该方法。</li>
<li>onStart()：启动Fragment时被回调。</li>
<li>onResume():恢复Fragment时被回调。</li>
<li>onPause()：暂停Fragment时被回调。</li>
<li>onStop():停止Fragment时被回调。</li>
<li>onDestroyView():销毁该Fragment所包含的View组件时被调用。</li>
<li>onDestroy():销毁Fragment时被回调。该方法之后被调用一次。</li>
<li>onDetach():将该Fragment从Activity中删除、替换完成时回调该方法，在onDestroy()方法后一定会回调onDetach()方法。该方法只会被调用一次。</li>
</ul>
<p>从上图可以看出：</p>
<ol>
<li><p>当使用Activity加载Fragment时，执行的函数为：<br> onAttach()<br>onCreate()<br>onCreateView()<br>onActivityCreated()<br>onStart()<br>onResume()</p>
<p>2.在Activity上启动一个对话框，Activity将转入暂停状态时，Fragment也会进入暂停状态。执行的函数为：onPause()</p>
<p>3.关闭对话框，Activity进入运行状态，Fragment将会再次进入运行状态，执行的函数为：onResume()<br><strong><em>即由2到3，执行的函数为：onPause()—&gt;onResume(),没有重构界面布局。因此，如果当按回退键，不想重构Fragment，要保存原来Fragment中的数据，可以将Fragment隐藏(使用hide()函数)，处于暂定状态</em></strong></p>
<p>4.如上图左边那条流程线，替换Fragment不加入回退栈或按退出按钮，则Fragment实例会被销毁。执行的函数为：<br>onPause()<br>onStop()<br>onDestroyView()<br>onDestroy()<br>onDetach()</p>
<p>5.如上图右边的那条流程线，替换Fragment并加入回退栈，Fragment的实例不会销毁，只会销毁Fragment的界面布局。执行的函数为：<br>onPause()<br>onStop()<br>onDestroyView()<br>当按下手机的回退键时，Fragment将会再次显示出来，执行的函数为：<br>onCreateView()<br>onActivityCreated()<br>onStart()<br>onResume()</p>
</li>
</ol>
<hr>
<p><strong><em>回退栈</em></strong></p>
<p>介绍回退栈之前先介绍下Fragment家族常用的API：<br>Fragment常用的三个类：</p>
<ul>
<li><p>android.app.Fragment 主要用于定义Fragment</p>
</li>
<li><p>android.app.FragmentManager 主要用于在Activity中操作Fragment</p>
</li>
<li><p>android.app.FragmentTransaction 保证一些列Fragment操作的原子性，熟悉事务这个词，一定能明白~</p>
</li>
</ul>
<p>a、获取FragmentManage的方式：</p>
<p>getFragmentManager() // v4中，getSupportFragmentManager</p>
<p>b、主要的操作都是FragmentTransaction的方法</p>
<ul>
<li><p>FragmentTransaction transaction = fm.benginTransatcion();//开启一个事务</p>
</li>
<li><p>transaction.add()： 往Activity中添加一个Fragment</p>
</li>
<li><p>transaction.remove() ：从Activity中移除一个Fragment，如果被移除的Fragment没有添加到回退栈，这个Fragment实例将会被销毁。如果添加到回退栈，则这个Fragment的实例不会销毁，但是它的布局视图会被销毁。</p>
</li>
<li><p>transaction.replace()：使用另一个Fragment替换当前的，实际上就是remove()然后add()的合体~</p>
</li>
<li><p>transaction.hide()：隐藏当前的Fragment，仅仅是设为不可见，实例并不会销毁，Fragment的布局视图也不会销毁。</p>
</li>
<li><p>transaction.show()：显示之前隐藏的Fragment</p>
</li>
<li><p>detach()：会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护。</p>
</li>
<li><p>attach()：重建view视图，附加到UI上并显示。</p>
</li>
<li><p>transatcion.commit()//提交一个事务</p>
</li>
</ul>
<p>注意：常用Fragment的哥们，可能会经常遇到这样Activity状态不一致：State loss这样的错误。主要是因为：commit方法一定要在Activity.onSaveInstance()之前调用。</p>
<p>上述，基本是操作Fragment的所有的方式了，在一个事务开启到提交可以进行多个的添加、移除、替换等操作。</p>
<p>注：此处的FragmentTransaction(事务)是一个状态变化的过程，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// Create new fragment and transaction</div><div class="line">Fragment newFragment = new ExampleFragment();</div><div class="line">FragmentTransaction transaction = getFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">// Replace whatever is in the fragment_container view with this fragment,</div><div class="line">// and add the transaction to the back stack</div><div class="line">transaction.replace(R.id.fragment_container, newFragment);</div><div class="line">transaction.addToBackStack(null);</div><div class="line"></div><div class="line">// Commit the transaction</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure>
<p>如上面代码，<strong><em>transaction只是记录了从一个状态到另一个状态的变化过程，即比如从FragmentA替换到FragmentB的过程，当通过函数transaction.addToBackStack(null)将这个事务添加到回退栈，则会记录这个事务的状态变化过程，如从FragmentA —&gt;FragmentB,当用户点击手机回退键时，因为transaction的状态变化过程被保存，则可以将事务的状态变化过程还原，即将FragmentB —&gt; FragmentA.</em></strong></p>
<p>添加到回退栈的函数：transaction.addToBackStack(null);<br>官方解释为：</p>
<blockquote>
<p>Before you call commit(), however, you might want to call addToBackStack(), in order to add the transaction to a back stack of fragment transactions. This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button.</p>
<p>For example, here’s how you can replace one fragment with another, and preserve the previous state in the back stack:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// Create new fragment and transaction</div><div class="line">Fragment newFragment = new ExampleFragment();</div><div class="line">FragmentTransaction transaction = getFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">// Replace whatever is in the fragment_container view with this fragment,</div><div class="line">// and add the transaction to the back stack</div><div class="line">transaction.replace(R.id.fragment_container, newFragment);</div><div class="line">transaction.addToBackStack(null);</div><div class="line"></div><div class="line">// Commit the transaction</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure>
<p>In this example, newFragment replaces whatever fragment (if any) is currently in the layout container identified by the R.id.fragment_container ID. By calling addToBackStack(), the replace transaction is saved to the back stack so the user can reverse the transaction and bring back the previous fragment by pressing the Back button.</p>
<p>当Activity的回退栈中没有事务时，在按返回键则会退出Activity。</p>
<p>类似与Android系统为Activity维护一个任务栈，我们也可以通过Activity维护一个回退栈来保存每次Fragment事务发生的变化。如果你将Fragment任务添加到回退栈，当用户点击后退按钮时，将看到上一次的保存的Fragment。一旦Fragment完全从后退栈中弹出，用户再次点击后退键，则退出当前Activity。</p>
<p>Demo:看如下效果<br><img src="http://img.blog.csdn.net/20150823103925121" alt="这里写图片描述"></p>
<p>在文本框中输入”one”,点击按钮，切换到第二个界面; 在文本框中输入”two”,点击按钮，切换到第三个界面；点击按钮出现Toast提示消息；然后点击Back键依次回退到FragmentTwo,文本框中的数据”two”还存在，再次点击Back键会退到FragmentOne,文本框中的数据”one”不存在了。</p>
<p>代码：一共3个Fragment和一个Activity</p>
<p>先看Activity：activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/frameLayout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;&lt;/FrameLayout&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>不同的Fragment就在这个FrameLayout中显示。</p>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        FragmentManager fragmentManager = getFragmentManager();</div><div class="line">        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class="line"></div><div class="line">        FragmentOne fragmentOne = new FragmentOne();</div><div class="line">        fragmentTransaction.add(R.id.frameLayout,fragmentOne,&quot;One&quot;);</div><div class="line">        fragmentTransaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，直接将FragmentOne添加到布局文件中的FrameLayout中，注意这里并没有调用FragmentTransaction.addToBackStack(String)，因为我不喜欢在当前显示时，点击Back键出现白板。而正确的时点击相应Back键，即退出我们的Activity.</p>
<p>下面时3个Fragment的布局文件，大体相同，就只写一个，fragment_one.xml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;com.example.songxitang.fragmenttest.FragmentOne&quot;&gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/fragOneBtn&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:text=&quot;FragmentOne&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>FragmentOne.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class FragmentOne extends Fragment &#123;</div><div class="line">    private Button fragOneBtn;</div><div class="line"></div><div class="line">    public FragmentOne() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_one, container, false);</div><div class="line">        fragOneBtn = (Button) view.findViewById(R.id.fragOneBtn);</div><div class="line">        fragOneBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                FragmentTwo fragmentTwo = new FragmentTwo();</div><div class="line">                FragmentManager fragmentManager = getFragmentManager();</div><div class="line">                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class="line">                fragmentTransaction.replace(R.id.frameLayout,fragmentTwo,&quot;Two&quot;);</div><div class="line">                //将事务添加到回退栈中</div><div class="line">                fragmentTransaction.addToBackStack(&quot;FragmentTwo&quot;);</div><div class="line">                fragmentTransaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在点击FragmentOne中的按钮时，使用了replace方法，replace是remove和add的合体，并且如果不添加事务到回退栈，前一个Fragment实例会被销毁。这里很明显，我们调用tx.addToBackStack(null);将当前的事务添加到了回退栈，<strong>所以FragmentOne实例不会被销毁，但是视图层次依然会被销毁，即会调用onDestoryView和onCreateView，</strong>证据就是：仔细看上面的效果图，我们在跳转前在文本框输入的内容，在用户Back得到第一个界面的时候不见了。</p>
<p>FragmentTwo.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class FragmentTwo extends Fragment &#123;</div><div class="line">    private Button fragTwoBtn;</div><div class="line"></div><div class="line">    public FragmentTwo() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two, container, false);</div><div class="line">        fragTwoBtn = (Button) view.findViewById(R.id.fragTwoBtn);</div><div class="line">        fragTwoBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                FragmentThree fragmentThree = new FragmentThree();</div><div class="line">                FragmentManager fragmentManager = getFragmentManager();</div><div class="line">                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class="line">                fragmentTransaction.hide(FragmentTwo.this);</div><div class="line">                fragmentTransaction.add(R.id.frameLayout,fragmentThree,&quot;Three&quot;);</div><div class="line">                fragmentTransaction.addToBackStack(null);</div><div class="line">                fragmentTransaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里点击时，我们没有使用replace，而是先隐藏了当前的Fragment，然后添加了FragmentThree的实例，最后将事务添加到回退栈。这样做的目的是为了给大家提供一种方案：如果不希望视图重绘该怎么做，请再次仔细看效果图，我们在FragmentTwo的EditText填写的内容，用户Back回来时，数据还在~~~</p>
<p>最后FragmentThree就是简单的Toast了,FragmentThree.java:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class FragmentThree extends Fragment &#123;</div><div class="line">    private Button fragThreeBtn;</div><div class="line"></div><div class="line">    public FragmentThree() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        // Inflate the layout for this fragment</div><div class="line">        View view = inflater.inflate(R.layout.fragment_three, container, false);</div><div class="line">        fragThreeBtn = (Button) view.findViewById(R.id.fragThreeBtn);</div><div class="line">        fragThreeBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Toast.makeText(getActivity(),&quot;I am a Button in FragmentThree!&quot;</div><div class="line">                ,Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>值得注意的是：如果你喜欢使用Fragment，一定要清楚这些方法，哪个会销毁视图，哪个会销毁实例，哪个仅仅只是隐藏，这样才能更好的使用它们。</p>
<p>a、比如：我在FragmentA中的EditText填了一些数据，当切换到FragmentB时，如果希望会到A还能看到数据，则适合你的就是hide和show；也就是说，希望保留用户操作的面板，你可以使用hide和show，当然了不要使劲在那new实例，进行下非null判断。</p>
<p>b、再比如：我不希望保留用户操作，你可以使用remove()，然后add()；或者使用replace()这个和remove,add是相同的效果。</p>
<p>c、remove和detach有一点细微的区别，在不考虑回退栈的情况下，remove会销毁整个Fragment实例，而detach则只是销毁其视图结构，实例并不会被销毁。那么二者怎么取舍使用呢？如果你的当前Activity一直存在，那么在不希望保留用户操作的时候，你可以优先使用detach。</p>
<p><a href="http://download.csdn.net/detail/u011026329/9037503" target="_blank" rel="external">代码下载</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java运行时多态性：继承和接口的实现]]></title>
      <url>http://freeshow.github.io/2016/07/24/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E5%A4%9A%E6%80%81%E6%80%A7%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载地址：<a href="http://developer.51cto.com/art/200909/153887.htm" target="_blank" rel="external">Java运行时多态性：继承和接口的实现</a><br>Java做为一个面向对象语言的最强大机制：运行时多态性。两个实现方式分别是继承和接口。</p>
<p>Java是面向对象的语言，而运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制，下面就继承和接口实现两方面谈谈java运行时多态性的实现。</p>
<p><strong>一、通过继承中超类对象引用变量引用子类对象来实现</strong><br>举例说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//定义超类superA  </div><div class="line">class superA  </div><div class="line">&#123;  </div><div class="line">	int i = 100;  </div><div class="line">	void fun()  </div><div class="line">	&#123;  </div><div class="line">		System.out.println(“This is superA”);  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//定义superA的子类subB  </div><div class="line">class subB extends superA  </div><div class="line">&#123;  </div><div class="line">	int m = 1;  </div><div class="line">	void fun()  </div><div class="line">	&#123;      </div><div class="line">		System.out.println(“This is subB”);  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//定义superA的子类subC  </div><div class="line">class subC extends superA  </div><div class="line">&#123;  </div><div class="line">	int n = 1;  </div><div class="line">	void fun()  </div><div class="line">	&#123;      </div><div class="line">		System.out.println(“This is subC”);  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">class Test  </div><div class="line">&#123;  </div><div class="line">	public static void main(String[] args)  </div><div class="line">	&#123;  </div><div class="line">		//定义超类对象引用变量</div><div class="line">		superA a;</div><div class="line">		//子类对象  </div><div class="line">		subB  b = new subB();  </div><div class="line">		subC  c = new subC();</div><div class="line">		//超类对象引用变量 引用 子类对象  </div><div class="line">		a=b;  </div><div class="line">		a.fun();  (1)  </div><div class="line">		a=c;  </div><div class="line">		a.fun();  (2)  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<p>This is subB<br>This is subC</p>
<p>上述代码中subB和subC是超类superA的子类，我们在类Test中声明了3个引用变量a, b, c，通过将子类对象引用赋值给超类对象引用变量来实现动态方法调用。也许有人会问：“为什么(1)和(2)不输出：This is superA”。<strong>java 的这种机制遵循一个原则：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。</strong></p>
<p>另外，如果子类继承的超类是一个抽象类，虽然抽象类不能通过new操作符实例化，但是可以创建抽象类的对象引用指向子类对象，以实现运行时多态性。具体的实现方法同上例。</p>
<p>不过，抽象类的子类必须覆盖实现超类中的所有的抽象方法，否则子类必须被abstract修饰符修饰，当然也就不能被实例化了。</p>
<hr>
<p><strong>二、通过接口类型变量引用实现接口的类的对象来实现</strong></p>
<p>接口的灵活性就在于“规定一个类必须做什么，而不管你如何做”。我们可以定义一个接口类型的引用变量来引用实现接口的类的实例，当这个引用调用方法时，它会根据实际引用的类的实例来判断具体调用哪个方法，这和上述的超类对象引用访问子类对象的机制相似。</p>
<p>举例说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//定义接口InterA  </div><div class="line">interface InterA  </div><div class="line">&#123;  </div><div class="line">	void fun();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//实现接口InterA的类B  </div><div class="line">class B implements InterA  </div><div class="line">&#123;  </div><div class="line">	public void fun()  </div><div class="line">	&#123;      </div><div class="line">		System.out.println(“This is B”);  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//实现接口InterA的类C  </div><div class="line">class C implements InterA  </div><div class="line">&#123;  </div><div class="line">	public void fun()  </div><div class="line">	&#123;      </div><div class="line">		System.out.println(“This is C”);  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">class Test  </div><div class="line">&#123;  </div><div class="line">	public static void main(String[] args)  </div><div class="line">	&#123;  </div><div class="line">		//定义接口</div><div class="line">		InterA  a;</div><div class="line">		//接口类型变量引用实现接口的类的对象 </div><div class="line">		a= new B();  </div><div class="line">		a.fun();   </div><div class="line">		a = new C();   </div><div class="line">		a.fun();   </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<p>This is B<br>This is C</p>
<p>上例中类B和类C是实现接口InterA的两个类，分别实现了接口的方法fun()，通过将类B和类C的实例赋给接口引用a而实现了方法在运行时的动态绑定，充分利用了“一个接口，多个方法”展示了Java的动态多态性。</p>
<p>需要注意的一点是：Java在利用接口变量调用其实现类的对象的方法时，该方法必须已经在接口中被声明，而且在接口的实现类中该实现方法的类型和参数必须与接口中所定义的精确匹配。</p>
<hr>
<p><strong>结束语</strong>：以上就是java运行时多态性的实现方法，大家在编程过程中可以灵活运用，但是在性能要求较高的代码中不提倡运用运行时多态，毕竟Java的运行时动态方法调用较之普通的方法调用的系统开销是比较大的。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Fragment（四）--Fragment与Activity通讯]]></title>
      <url>http://freeshow.github.io/2016/07/24/Android%E4%B9%8BFragment%EF%BC%88%E5%9B%9B%EF%BC%89-Fragment%E4%B8%8EActivity%E9%80%9A%E8%AE%AF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>本博客参考自：<br><a href="http://blog.csdn.net/t12x3456/article/details/8119607" target="_blank" rel="external">Android Fragment详解(五)：Fragment与Activity通讯</a></p>
<p>将Fragment添加到Activity之后，Fragment必须与Activity交互信息，这就需要Fragment获取它所在的Activity，Activity也能获取它所包含的任意的Fragment。可按如下方式进行：</p>
<ul>
<li>Fragment获取它所在的Activity：调用Fragment的getActivity()方法即可返回它所在的Activity。</li>
<li>Activity获取它包含的Fragment：调用Activity关联的FragmentManager的findFragmentById(int id)或findFragmentByTag(String tag)方法即可获取指定的Fragment。</li>
</ul>
<p>提示：在界面布局文件中使用fragment元素添加Fragment时，可以为fragment元素指定android:id或android:tag属性，这两个属性都可以用于标识该Fragment，接下来Activity经可以通过findFragmentById(int id)或findFragmentByTag(String tag)方法来获取该Fragment。</p>
<p>除此之外，Fragment与Activity可能还需要相互传递数据，可按如下方式进行。</p>
<ul>
<li>Activity向Fragment传递数据：在Activity中创建Bundle数据包，并调用Fragment的setArguments(Bundle bundle)方法即可将Bundle数据包传给Fragment。<br>例如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//创建Bundle，准备向Fragment传入参数</div><div class="line">Bundle arguments = new Bundle();</div><div class="line">arguments.putInt(&quot;index&quot;,1);</div><div class="line">ExampleFragment fragment = new ExampleFragment();</div><div class="line">//向Fragment传入参数</div><div class="line">fragment.setArguments(arguments);</div><div class="line">getFragmentManager().beginTransaction().</div><div class="line">	replace(R.id.container,fragment).commit();</div></pre></td></tr></table></figure>
<ul>
<li>Fragment向Activity传递数据或Activity需要在Fragment运行中进行实时通信：在Fragment中定义一个内部回调接口，在让包含该Fragment的Activity实现该回调接口，这样Fragment即可调用该回调方法将数据传递给Activity。(<strong><em>仔细想想，其实就是Java中利用接口实现多态，不了解多态的请看这篇博客：</em></strong><a href="http://blog.csdn.net/u011026329/article/details/47945829" target="_blank" rel="external">Java运行时多态性：继承和接口的实现</a>)</li>
</ul>
<p>请看下面的Demo:<br>演示效果：<br><img src="http://img.blog.csdn.net/20150824143658019" alt="这里写图片描述"><br>它有一个activity，activity中含有两个Fragment。LeftFragment显示3个Button，RightFragment显示当点击LeftFragment中的Button时显示的对应内容。LeftFragment必须在用户点击了某个Button时告诉activity，然后activity再告诉RightFragment，RightFragment就显示出对应的内容（为什么这么麻烦？直接LeftFragment告诉RightFragment不就行了？也可以啊，但是你的Fragment就减少了可重用的能力。现在我只需把我的事件告诉宿主，由宿主决定如何处置，这样是不是重用性更好呢？）。如下例，OnFragmentInteractionListener接口在LeftFragment中定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class LeftFragment extends Fragment implements View.OnClickListener</div><div class="line">&#123;</div><div class="line">    public interface OnFragmentInteractionListener</div><div class="line">    &#123;</div><div class="line">        public void showMessage(int index);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>然后activity实现接口OnFragmentInteractionListener，在方法showMessage()中通知RightFragment。当LeftFragment添加到activity中时，会调用Fragment的方法onAttach()，这个方法中适合检查activity是否实现了OnArticleSelectedListener接口，检查方法就是对传入的activity的实例进行类型转换，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class LeftFragment extends Fragment implements View.OnClickListener</div><div class="line">&#123;</div><div class="line">    public interface OnFragmentInteractionListener</div><div class="line">    &#123;</div><div class="line">        public void showMessage(int index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private OnFragmentInteractionListener mListener;</div><div class="line"></div><div class="line">    public LeftFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        super.onAttach(activity);</div><div class="line">        try &#123;</div><div class="line">            mListener = (OnFragmentInteractionListener) activity;</div><div class="line">        &#125; catch (ClassCastException e) &#123;</div><div class="line">            throw new ClassCastException(activity.toString()</div><div class="line">                    + &quot; must implement OnFragmentInteractionListener&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于在android的实现机制中fragment和activity会被分别实例化为两个不相干的对象,他们之间的联系由activity的一个成员对象fragmentmanager来维护.fragment实例化后会到activity中的fragmentmanager去注册一下,这个动作封装在fragment对象的onAttach中,所以你可以在fragment中声明一些回调接口,当fragment调用onAttach时,将这些回调接口实例化,这样fragment就能调用各个activity的成员函数了,当然activity必须implements这些接口,否则会包classcasterror</p>
<p>如果activity没有实现那个接口，fragment抛出ClassCastException异常。如果成功了，mListener成员变量保存OnFragmentInteractionListener的实例。于是LeftFragment就可以调用mListener的方法来与activity共享事件。例如，如果单击LeftFragment中的按钮，就会调用LeftFragment的onClick(View v)方法，在这个方法中调用mListener.showMessage()来与activity共享事件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onClick(View v) </div><div class="line">    &#123;</div><div class="line">        switch (v.getId())</div><div class="line">        &#123;</div><div class="line">            case R.id.firstBtn:</div><div class="line">                mListener.showMessage(1);</div><div class="line">                break;</div><div class="line">            case R.id.secondBtn:</div><div class="line">                mListener.showMessage(2);</div><div class="line">                break;</div><div class="line">            case R.id.thirdBtn:</div><div class="line">                mListener.showMessage(3);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>整体代码如下：<br>Activity与Fragment的布局文件：<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=&quot;@+id/left_layout&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;&gt;&lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=&quot;@+id/right_layout&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:layout_weight=&quot;10&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;&gt;&lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>fragment_left.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;com.example.songxitang.fragmentcommunication.LeftFragment&quot;&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/firstBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;FirstButton&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/secondBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;SecondBtn&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/thirdBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;ThirdButton&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>fragment_right.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    tools:context=&quot;com.example.songxitang.fragmentcommunication.RightFragment&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/right_show_message&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:background=&quot;@android:color/holo_orange_dark&quot;</div><div class="line">        android:textColor=&quot;@android:color/white&quot;</div><div class="line">        android:textSize=&quot;30dp&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>然后就是Activity与Fragment的java文件：<br>LeftFragment.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public class LeftFragment extends Fragment implements View.OnClickListener</div><div class="line">&#123;</div><div class="line">    public interface OnFragmentInteractionListener</div><div class="line">    &#123;</div><div class="line">        public void showMessage(int index);</div><div class="line">    &#125;</div><div class="line">    private Button buttonOne;</div><div class="line">    private Button buttonTwo;</div><div class="line">    private Button buttonThree;</div><div class="line"></div><div class="line">    private OnFragmentInteractionListener mListener;</div><div class="line"></div><div class="line">    public LeftFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line"></div><div class="line">        View view = inflater.inflate(R.layout.fragment_left, container, false);</div><div class="line">        buttonOne = (Button) view.findViewById(R.id.firstBtn);</div><div class="line">        buttonTwo = (Button) view.findViewById(R.id.secondBtn);</div><div class="line">        buttonThree = (Button) view.findViewById(R.id.thirdBtn);</div><div class="line">        buttonOne.setOnClickListener(this);</div><div class="line">        buttonTwo.setOnClickListener(this);</div><div class="line">        buttonThree.setOnClickListener(this);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        super.onAttach(activity);</div><div class="line">        try &#123;</div><div class="line">            mListener = (OnFragmentInteractionListener) activity;</div><div class="line">        &#125; catch (ClassCastException e) &#123;</div><div class="line">            throw new ClassCastException(activity.toString()</div><div class="line">                    + &quot; must implement OnFragmentInteractionListener&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDetach() &#123;</div><div class="line">        super.onDetach();</div><div class="line">        mListener = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId())</div><div class="line">        &#123;</div><div class="line">            case R.id.firstBtn:</div><div class="line">                mListener.showMessage(1);</div><div class="line">                break;</div><div class="line">            case R.id.secondBtn:</div><div class="line">                mListener.showMessage(2);</div><div class="line">                break;</div><div class="line">            case R.id.thirdBtn:</div><div class="line">                mListener.showMessage(3);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity implements LeftFragment.OnFragmentInteractionListener&#123;</div><div class="line">    private TextView showMessageView;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        System.out.println(&quot;Activity---&gt;onCreate&quot;);</div><div class="line"></div><div class="line">        FragmentManager manager = getFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line"></div><div class="line">        LeftFragment leftFragment = new LeftFragment();</div><div class="line">        RightFragment rightFragment = new RightFragment();</div><div class="line">        transaction.add(R.id.left_layout, leftFragment, &quot;leftFragment&quot;);</div><div class="line">        transaction.add(R.id.right_layout, rightFragment, &quot;rightFragment&quot;);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        System.out.println(&quot;Activity---&gt;onResume&quot;);</div><div class="line">        showMessageView = (TextView) findViewById(R.id.right_show_message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showMessage(int index) &#123;</div><div class="line">        switch (index)</div><div class="line">        &#123;</div><div class="line">            case 1:</div><div class="line">                showMessageView.setText(&quot;First Button Show Content!&quot;);</div><div class="line">                break;</div><div class="line">            case 2:</div><div class="line">                showMessageView.setText(&quot;Second Button Show Content!&quot;);</div><div class="line">                break;</div><div class="line">            case 3:</div><div class="line">                showMessageView.setText(&quot;Third Button Show Content!&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RightFragment.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class RightFragment extends Fragment &#123;</div><div class="line"></div><div class="line"></div><div class="line">    public RightFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        // Inflate the layout for this fragment</div><div class="line">        return inflater.inflate(R.layout.fragment_right, container, false);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后说一下，其实Android Studio已经帮我们实现好了带有回调函数的Fragment模本，创建方法如下：<br><img src="http://img.blog.csdn.net/20150824111637710" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20150824111714183" alt="这里写图片描述"></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之RAM、ROM和SD卡]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BRAM%E3%80%81ROM%E5%92%8CSD%E5%8D%A1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ul>
<li>RAM(内存)：物理位置是位于手机内部的随机存储器上，断电后资料丢失。相当于电脑的内存。</li>
<li><p>ROM：物理位置是位于手机内部的非易失性存储器上，断电后依然能够保存资料。主要包括：系统存储、系统缓存、内部存储。</p>
<p>而android系统是基于linux系统建立的，它的分区结构跟windows不同，没有C盘D盘的，系统存储、系统缓存、内部存储分别都是不同的分区，每个分区的大小是在系统建立的时候就分配好了的，一般人是无法更改的。</p>
</li>
</ul>
<p>系统存储相当于是windows的C盘，系统缓存相当于windows的临时文件夹<br>内部存储就相当于windows的其他盘。</p>
<ul>
<li>android系统中，“/”以及“/system”等目录是用于系统存储的，（“/”是系统的根目录），比如“/system/app”是指系统软件的存放目录。</li>
<li>系统缓存是存放在”/cache”下的</li>
<li>内部存储一般是指用户可以使用的空间位于”/data”。</li>
</ul>
<p>SD卡：手机的外部存储空间，这个我们可以理解成电脑的外接移动硬盘，U盘也行。</p>
<p>所有的Android设备都有两个文件存储区域：“内部”和“外部”存储器。这两个名称来自早期的Android，当时大多数设备都提供内置的固定的内存（内置存储器）即上面介绍的ROM中的内部存储，外加一个可移动的存储介质，如micro SD卡（外部存储器）。但也有些设备把固定不变的存储空间分成“内部”和“外部”两部分，这样即使没有可移动的存储介质，也总会有两个存储空间，并且不管外部存储器是可移动的，还是固定的，API的行为是相同的。</p>
<hr>
<p>内部存储器与外部存储器的区别：</p>
<p>所有的安卓设备都有外部存储和内部存储，这两个名称来源于安卓的早期设备，那个时候的设备内部存储确实是固定的，而外部存储确实是可以像U盘一样移动的。但是在后来的设备中，很多中高端机器都将自己的机身存储扩展到了8G以上，他们将存储在概念上分成了”内部internal” 和”外部external” 两部分，但其实都在手机内部。所以不管安卓手机是否有可移动的sdcard，他们总是有外部存储和内部存储。最关键的是，我们都是通过相同的api来访问可移动的sdcard或者手机自带的存储（外部存储）。</p>
<p><strong>外部存储虽然概念上有点复杂，但也很好区分，你把手机连接电脑，能被电脑识别的部分就一定是外部存储。</strong></p>
<p>内部存储器：</p>
<ul>
<li>Android系统能够直接把文件存在设备的内部存储内。</li>
<li>默认情况下，保存在内部存储内的文件是应用程序私有的，其他应用程序（或用户）是无法访问的。</li>
<li>当用户卸载此应用程序时，内部存储的数据会一并清除。</li>
<li>Shared Preferences和SQLite数据库都是存储在内部存储空间上的。内部存储一般用Context来获取和操作。</li>
<li>内部存储一般保存在“/data/”目录下</li>
</ul>
<p>外部存储器：</p>
<ul>
<li>使用sdcard存储的数据，不限制只有本应用访问，任何可以有访问Sdcard权限的应用均可以访问，而Sdcard相对于设备的内部存储空间而言，会大很多，所以一般比较大的数据，均会存放在外部存储中。</li>
<li>要向外部存储器写入数据，你必须在清单文件中申请WRITE_EXTERNAL_STORAGE权限</li>
<li>外部存储中的文件是可以被用户或者其他应用程序修改的，有两种类型的文件（或者目录）：<ul>
<li>.公共文件Public files：文件是可以被自由访问，且文件的数据对其他应用或者用户来说都是由意义的，当应用被卸载之后，其卸载前创建的文件仍然保留。比如camera应用，生成的照片大家都能访问，而且camera不在了，照片仍然在。</li>
<li>私有文件Private files：其实由于是外部存储的原因即是是这种类型的文件也能被其他程序访问，只不过一个应用私有的文件对其他应用其实是没有访问价值的（恶意程序除外）。外部存储上，应用私有文件的价值在于卸载之后，这些文件也会被删除。类似于内部存储。</li>
</ul>
</li>
<li>外部存储一般保存在“/mnt/sdcard/Android/data/”下。</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之使用全局变量的两种方法]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p> 转载自：<a href="http://blog.csdn.net/sir_zeng/article/details/8198249" target="_blank" rel="external">Android之项目全局变量的定义</a></p>
<ol>
<li>使用静态类：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Data&#123;</div><div class="line">	private static String a =&quot;Hello Android&quot;;</div><div class="line">	</div><div class="line">	public static String getA() &#123;</div><div class="line">		return a;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void setA(String a) &#123;</div><div class="line">		Data.a = a;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用就不再写了，直接使用类名.变量名就可以调用！</p>
<p>static修饰的静态变量，使用很方便，在不同的类和包中都可以使用，在虚拟机中单独占用内存，没错，这些都是它们的优点，不过在项目上线后，才发现static有一些不太好的地方。</p>
<p>在查看项目的崩溃信息时，发现很多地方莫明的出现空指针异常的错误，经过排查，发现可能就是static的问题。我们在项目中，将用户的信息也就是User对象保存成了一个静态变量，而在报错的地方，也都发现有使用过这种变量，因此，可以大致推断出与这种保存的方式有一定的联系。同时，有不少用户反映在打开应用的情况下，接个电话或者长时间待机后，再回到应用也会出现崩溃的现象，而这些崩溃都与静态变量的空指针有关系。</p>
<p>如此来说的话，static静态修饰在Android的开发中是不是很危险？或许我们可以说如果是static User u = new User();这样定义的话，那么应该不会有太大问题，而如果是static User u;这样定义的话，那么很可以会出现NULL的现象。当然，前面的方法里面的属性也可能会现空的情况，但是这个可以用封装来避免空指针。另外静态常量还是很好用的。</p>
<p>  那么应该如何保存登录或者全局的信息呢？根据Google官方的推荐以及百度到的各位大神的推荐，我们应该尽量使用继承自Application的自定义类，在我们继承的类中定义需要全局使用的变量，并通过getApplicationContext()来获取和保存相关的变量即可。</p>
<hr>
<p>2.使用Application</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 自定义的MyApplication继承Application</div><div class="line">*</div><div class="line">* @author way</div><div class="line">*</div><div class="line">*/ </div><div class="line">public class MyApplication extends Application &#123; </div><div class="line">    /**</div><div class="line">     * 引发异常：在一些不规范的代码中经常看到Activity或者是Service当中定义许多静态成员属性。这样做可能会造成许多莫名其妙的 null pointer异常。</div><div class="line">     */ </div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 异常分析：Java虚拟机的垃圾回收机制会主动回收没有被引用的对象或属性。在内存不足时，虚拟机会主动回收处于后台的Activity或</div><div class="line">     * Service所占用的内存。当应用再次去调用静态属性或对象的时候，就会造成null pointer异常</div><div class="line">     */ </div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 解决异常：Application在整个应用中，只要进程存在，Application的静态成员变量就不会被回收，不会造成null pointer异常</div><div class="line">     */ </div><div class="line">    private int number; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    public void onCreate() &#123; </div><div class="line">        // TODO Auto-generated method stub </div><div class="line">        super.onCreate(); </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    public int getNumber() &#123; </div><div class="line">        return number; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    public void setNumber(int number) &#123; </div><div class="line">        this.number = number; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，为了让我们的MyApplication取代android.app.Application的地位，在我们的代码中生效，我们需要修改AndroidManifest.xml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;application android:name=&quot;.MyApplication&quot; ...&gt; </div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p>下面我们就可以在Activity或Service中灵活使用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MyApplication application = (MyApplication)this.getApplicationContext();  </div><div class="line">//保存变量 </div><div class="line">application.setNumber(5); </div><div class="line">//取出变量 </div><div class="line">application.getNumber();</div></pre></td></tr></table></figure>
<ul>
<li>而且按照Java及C#的种编辑思想的话，还是建议使用第二种试，这样对于系统的安全是好的！而且我查了一些资料显示，这样也是符合Android这种思想的，因此建议使用第二种方式，设置公共变量！</li>
<li>Application是与应用同时存在的，也就是应用在它就在，并不会被GC给莫名其妙的回收掉，因此，使用此方法更加安全。</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之数据存储--SharedPreference]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-SharedPreference/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>SharedPreference是Android提供的一种轻量级的数据存储方式，主要用来存储一些简单的配置信息，例如，默认欢迎语，登录用户名和密码等。其以键值对(key-value对)的方式存储,使得我们能很方便进行读取和存入。</p>
<p>1.读取Preferences数据：<br>SharedPreference接口主要负责读取应用程序的Preferences数据，它提供了如下常用的方法：</p>
<ul>
<li>boolean contains(String key)：判断SharedPreferences是否包含特定key的数据。</li>
<li>abstract Map&lt; String,?&gt; getAll() : 获取SharedPreferences数据里全部的key-value对。</li>
<li>boolean getXxx(String key,Xxx defValue)：其中Xxx可以是boolean、float、int、long、String等各种基本类型的值。</li>
</ul>
<p>2.写入Preferences数据：<br>SharedPreferences接口本身并没有提供写入数据的能力，而是通过SharedPreferences的内部接口，SharedPreferences调用edit()方法即可获取它所对应的Editor对象。Editor提供如下方法来向Preferences写入数据。</p>
<ul>
<li>SharedPreferences.Editor clear()：清空SharedPreferences里所有数据。</li>
<li>SharedPreferences.Editor putXxx(String key,xxx value)：向SharedPreferences存入指定key对应的数据。</li>
<li>SharedPreferences.Editor remove(String key)：删除SharedPreferences里指定的key对应的数据项。</li>
<li>boolean commit()：当Editor编辑完成后，调用该方法提交修改。</li>
</ul>
<p>从用法角度看，SharedPreferences和SharedPreferences.Editor组合起来非常像Map,其中SharedPreferences负责根据key读取数据，而SharedPreferences.Editor则用于写入数据。</p>
<hr>
<p>SharedPreferences本身是一个接口，程序无法直接创建SharedPreferences实例，只能通过Context提供的getSharedPreferences(String name,int mode)方法来获取SharedPreferences实例，该方法第一个参数为：保存键值对的文件名，第二个参数支持如下几个值。</p>
<ul>
<li>Context.MODE_PRIVATE：指定SharedPreferences数据只能被本应用程序读写。</li>
<li>Context.MODE_WORLD_READABLE：指定SharedPreferences数据能被其他应用程序读，但不能写。</li>
<li>Context.MODE_WORLD_WRITEABLE：指定SharedPreferences数据能被其他应用程序读写。</li>
<li>使用0或者MODE_PRIVATE作为默认的操作权限模式。</li>
</ul>
<p>提示：从Android 4.2 开始，Android不在推荐使用Context.MODE_WORLD_READABLE和Context.MODE_WORLD_WRITEABLE，因为这两种模式允许其他应用程序来读或写本应用创建的数据，因此容易导致安全漏洞。如果应用程序确实需要把内部数据暴露出来提供给其他应用访问，则应该使用ContentProvider.</p>
<p>下面是一个保存用户名和密码的例子，先看效果：<br><img src="http://img.blog.csdn.net/20150826144313327" alt="这里写图片描述"></p>
<p>刚开始输入用户名和密码，点击保存密码，登录后关闭程序，让后在启动程序，则自动保存了用户名和密码。</p>
<p>代码如下：</p>
<p>activity_login.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    tools:context=&quot;.LoginActivity&quot;&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:id=&quot;@+id/userName&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:hint=&quot;UserName:&quot;/&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:hint=&quot;PassWord:&quot;</div><div class="line">        android:id=&quot;@+id/passWord&quot;</div><div class="line">        android:password=&quot;true&quot;/&gt;</div><div class="line">    &lt;CheckBox</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Save Password&quot;</div><div class="line">        android:id=&quot;@+id/savePassWord&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Login&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot;</div><div class="line">        android:id=&quot;@+id/login&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>LoginActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class LoginActivity extends AppCompatActivity &#123;</div><div class="line">    private EditText userName;</div><div class="line">    private EditText passWord;</div><div class="line">    private CheckBox savePassword;</div><div class="line">    private Button loginBtn;</div><div class="line"></div><div class="line">    private SharedPreferences preferences;</div><div class="line">    private SharedPreferences.Editor editor;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line"></div><div class="line">        userName = (EditText) findViewById(R.id.userName);</div><div class="line">        passWord = (EditText) findViewById(R.id.passWord);</div><div class="line">        savePassword = (CheckBox) findViewById(R.id.savePassWord);</div><div class="line">        loginBtn = (Button) findViewById(R.id.login);</div><div class="line"></div><div class="line">        preferences = getSharedPreferences(&quot;UserInfo&quot;,MODE_PRIVATE);</div><div class="line">        editor = preferences.edit();</div><div class="line"></div><div class="line">        savePassword.setChecked(preferences.getBoolean(&quot;savePassword&quot;, false));</div><div class="line">        if (savePassword.isChecked())</div><div class="line">        &#123;</div><div class="line">	        //读取数据</div><div class="line">            userName.setText(preferences.getString(&quot;userName&quot;, null));</div><div class="line">            passWord.setText(preferences.getString(&quot;passWord&quot;, null));</div><div class="line">        &#125;</div><div class="line">        loginBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">		            //写入数据</div><div class="line">	                editor.putString(&quot;userName&quot;,     userName.getText().toString());</div><div class="line">                    editor.putString(&quot;passWord&quot;, passWord.getText().toString());</div><div class="line">                    editor.putBoolean(&quot;savePassword&quot;, savePassword.isChecked());</div><div class="line">                    //// 千万不要忘记commit。否则，如果文件存在，那么写入的内容不会保存。如果文件不存在，则不会创建文件。</div><div class="line">                    editor.commit();</div><div class="line">                Intent intent = new Intent(LoginActivity.this,HomeActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击登录按钮跳转到主界面的代码就不写了，主界面显示“Login Sucess”.</p>
<p>运行完上面程序，点击Android Studio的Android Device Monitor中的DDMS的 File Explorer面板，然后展开浏览树，如图：<br><img src="http://img.blog.csdn.net/20150826150453984" alt="这里写图片描述"></p>
<p>发现SharedPreferences数据总是保存在/data/data/&lt; package name&gt;/shared_prefs目录下，因此SharedPreferences数据保存在内部存储器中，SharedPreferences数据总是以XML格式保存。通过File Explorer面板的导出文件按钮导出该XML文档，打开该XML文档卡伊看到如下文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;true&quot;?&gt;</div><div class="line">-&lt;map&gt;</div><div class="line">	&lt;boolean value=&quot;true&quot; name=&quot;savePassword&quot;/&gt;</div><div class="line">	&lt;string name=&quot;userName&quot;&gt;Android&lt;/string&gt;</div><div class="line">	&lt;string name=&quot;passWord&quot;&gt;123456&lt;/string&gt;</div><div class="line">&lt;/map&gt;</div></pre></td></tr></table></figure>
<p>几点说明：</p>
<ul>
<li><p>SharedPreferences的获取有两种方法：一是上面提到的通过Activity自带（本质来讲是Context的）的getSharedPreferences方法，可以得到SharedPreferences对象。这种方法的好处是可以指定保存的xml文件名。另一种是通过PreferenceManager.getSharedPreferences(Context)获取SharedPreferences对象。这种方法不能指定保存的xml文件名，文件名使用默认的：<package name="">+”_preferences.xml”的形式，不过如果在一个包里面采用这种方式需要保存多个这样的xml文件，可能会乱掉。建议采用第一种指定xml文件名的形式。</package></p>
</li>
<li><p>数据的存入必须通过SharedPreferences对象的编辑器对象Editor来实现，存入（put）之后与写入数据库类似一定要commit。</p>
</li>
</ul>
<hr>
<p>记录应用程序的使用次数Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity</div><div class="line">&#123;</div><div class="line">	SharedPreferences preferences;</div><div class="line">	@Override</div><div class="line">	public void onCreate(Bundle savedInstanceState)</div><div class="line">	&#123;</div><div class="line">		super.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		preferences = getSharedPreferences(&quot;count&quot;</div><div class="line">			, MODE_PRIVATE);</div><div class="line">		// 读取SharedPreferences里的count数据</div><div class="line">		int count = preferences.getInt(&quot;count&quot;, 0);</div><div class="line">		// 显示程序以前使用的次数</div><div class="line">		Toast.makeText(this, &quot;程序以前被使用了&quot; + count + &quot;次。&quot;</div><div class="line">				, Toast.LENGTH_LONG).show();</div><div class="line">		SharedPreferences.Editor editor = preferences.edit();</div><div class="line">		// 存入数据</div><div class="line">		editor.putInt(&quot;count&quot;, ++count);</div><div class="line">		// 提交修改</div><div class="line">		editor.commit();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>为SharedPreferences添加监听器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 如果test.xml文件不存在，则会在editor.commit()时创建。</div><div class="line">    	// 如果没有调用commit()方法，写入的内容不会保存，而且不会创建文件。</div><div class="line">    	SharedPreferences prefs = getSharedPreferences(&quot;test&quot;, MODE_PRIVATE);</div><div class="line">    	SharedPreferences.Editor editor = prefs.edit();</div><div class="line">    	editor.putBoolean(&quot;bVal&quot;, true);</div><div class="line">    	editor.putString(&quot;sVal&quot;, &quot;allei&quot;);</div><div class="line">    	editor.putFloat(&quot;fVal&quot;, 10.12f);</div><div class="line">    	editor.putInt(&quot;iVal&quot;, 1000);</div><div class="line">    	editor.putLong(&quot;lVal&quot;, 100l);</div><div class="line">    	editor.commit(); // 千万不要忘记commit。否则，如果文件存在，那么写入的内容不会保存。如果文件不存在，则不会创建文件。</div><div class="line">    	</div><div class="line">    	Log.i(&quot;xxxxxxxxxx&quot;, &quot;bVal: &quot; + prefs.getBoolean(&quot;bVal&quot;, false));</div><div class="line">    	Log.i(&quot;xxxxxxxxxx&quot;, &quot;sVal: &quot; + prefs.getString(&quot;sVal&quot;, &quot;&quot;));</div><div class="line">    	Log.i(&quot;xxxxxxxxxx&quot;, &quot;fVal: &quot; + prefs.getFloat(&quot;fVal&quot;, 0.0f));</div><div class="line">    	Log.i(&quot;xxxxxxxxxx&quot;, &quot;iVal: &quot; + prefs.getInt(&quot;iVal&quot;, 0));</div><div class="line">    	Log.i(&quot;xxxxxxxxxx&quot;, &quot;lVal: &quot; + prefs.getLong(&quot;lVal&quot;, 0l));</div><div class="line">    	</div><div class="line">    	prefs.registerOnSharedPreferenceChangeListener(myListener); // 注册</div><div class="line">    	</div><div class="line">    	editor = prefs.edit();</div><div class="line">    	editor.putString(&quot;sVal&quot;, &quot;boss&quot;);</div><div class="line">    	editor.commit();  // 不要忘记commit。否则不会触发监听器。</div><div class="line">    	</div><div class="line">    	prefs.unregisterOnSharedPreferenceChangeListener(myListener);  // 解除注册，不会再相应改变</div><div class="line">    	editor = prefs.edit();</div><div class="line">    	editor.putString(&quot;sVal&quot;, &quot;bosssss&quot;);</div><div class="line">    	editor.commit(); // 因为监听器已经解除注册，所以不会再触发监听器。</div></pre></td></tr></table></figure>
<p>监听器定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private OnSharedPreferenceChangeListener myListener = new OnSharedPreferenceChangeListener() &#123;</div><div class="line">		@Override</div><div class="line">		public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) &#123;</div><div class="line">			Log.i(&quot;xxxxxxxx&quot;, &quot;key: &quot; + key + &quot; = &quot; + sharedPreferences.getString(key, &quot;default&quot;));</div><div class="line">		&#125;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>参考自：<a href="http://blog.csdn.net/ydpl2007/article/details/7590349" target="_blank" rel="external">http://blog.csdn.net/ydpl2007/article/details/7590349</a><br>             <a href="http://blog.csdn.net/zhangqijie001/article/details/5838213" target="_blank" rel="external">http://blog.csdn.net/zhangqijie001/article/details/5838213</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之数据存储--File内部存储]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-File%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Java提供了一套完整的IO流体系，包括FileInputStream、FileOutputStream等，通过这些IO流可以非常方便的访问磁盘上的内容。Android同样支持以这种方式来访问手机存储器上的文件。</p>
<p>Context提供了如下两种方法来打开应用程序的数据文件夹里的文件IO流。</p>
<ul>
<li>FileInputStream openFileInput(String name)：打开应用程序的数据文件夹下的name文件对应的输入流。</li>
<li>FileOutputStream openFileOutput(String name，int mode)：打开应用程序的数据文件夹下的name文件对应的输入流。</li>
</ul>
<p>以上两个方法默认打开的文件路径为：/data/data/&lt; package name&gt;/files目录下的name文件。即应用程序的数据文件夹是/data/data/&lt; package name&gt;/files,故此时File存储的数据位于内部存储器上。</p>
<p>上面两种方法分别用于打开文件输入流、输出流，其中第二个参数mode指定打开文件的模，该模式支持如下值：</p>
<ul>
<li>MODE_PRIVATE参数：指示要创建这个文件（或者，如果有同名文件存在，则会替换旧文件），并且让这个文件是应用程序的私有文件。</li>
<li>MODE_APPEND：如果文件已经存在，则在后面追加数据</li>
<li>MODE_WORLD_READABLE：让其他应用有读的权限</li>
<li>MODE_WORLD_WRITEABLE：让其他应用有写的权限</li>
</ul>
<p>注：MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE已经在Android 4.2（API level 17）废弃了，因为这样危险，安全性不高。</p>
<p>1.<strong>往内部存储内写文件（写入到/data/data/com.xxx.xxx/files目录下，com.xxx.xxx为应用程序包名）：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String FILE_NAME = &quot;hello_file&quot;;</div><div class="line">String FILE_TEXT = &quot;hello world!!!&quot;;</div><div class="line">FileOutputStream fos = openFileOutput(FILE_NAME, Context.MODE_PRIVATE);</div><div class="line">fos.write(FILE_TEXT.getBytes());</div><div class="line">fos.close();</div></pre></td></tr></table></figure>
<p>运行上面代码，发现/data/data/com.xxx.xxx/files目录下多了个hello_file文件。</p>
<p>2.<strong>读取内部存储内的文件（也就是从/data/data/com.xxx.xxx/files目录下读取文件）:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String FILE_NAME = &quot;hello_file&quot;;</div><div class="line">byte[] b = new byte[1024];</div><div class="line">StringBuffer sb = new StringBuffer();</div><div class="line">FileInputStream fis = openFileInput(FILE_NAME);</div><div class="line">int num;</div><div class="line">while ((num = fis.read(b)) != -1) &#123;</div><div class="line">    sb.append(new String(b, 0, num));</div><div class="line">&#125;</div><div class="line">fis.close();</div><div class="line">Log.d(&quot;xxx&quot;, sb.toString());</div></pre></td></tr></table></figure>
<p>运行一下，成功打印hello world!!!</p>
<p>除此之外，Context还提供了如下几个方法来访问应用程序的数据文件夹。</p>
<ul>
<li>getDir(String name,int mode)：在应用程序数据文件夹下获取或创建name对应的子目录。</li>
<li>File getFileDir()：获取应用程序的数据文件夹的绝对路径。</li>
<li>String[] fileList()：返回应用程序数据文件夹下的全部文件。</li>
<li>deleteFile(String name)：删除应用程序数据文件夹下的制定文件。</li>
</ul>
<hr>
<p>下面示范如何读取应用程序数据文件夹得内容。给程序界面布局只有两个文本框和两个按钮，其中第一组文本框和按钮用于处理写入，文本框用于接收用户输入，当用户单击”写入”按钮时，程序会把文本框中的数据写入文件；第二组文本框和按钮用于处理读取，当用户点击“读取”按钮时，该文本框显示文件中的数据，效果如下：<br><img src="http://img.blog.csdn.net/20150826212853365" alt="这里写图片描述"></p>
<p>代码如下：</p>
<p>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:id=&quot;@+id/writeEditText&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:id=&quot;@+id/writeButton&quot;</div><div class="line">        android:text=&quot;Write File&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:id=&quot;@+id/readButton&quot;</div><div class="line">        android:text=&quot;Read File&quot;</div><div class="line">        android:textAllCaps=&quot;false&quot;/&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:id=&quot;@+id/readEditText&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    final String FILE_NAME = &quot;file.test&quot;;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        System.out.println(new StringBuffer(&quot;a&quot;).append(&quot;b&quot;).append(&quot;c&quot;));</div><div class="line"></div><div class="line">        Button writeButton = (Button) findViewById(R.id.writeButton);</div><div class="line">        Button readButton = (Button) findViewById(R.id.readButton);</div><div class="line"></div><div class="line">        final EditText writeEditText = (EditText) findViewById(R.id.writeEditText);</div><div class="line">        final EditText readEditText = (EditText) findViewById(R.id.readEditText);</div><div class="line">        Log.i(&quot;FILE&quot;,getFilesDir().toString());</div><div class="line">        writeButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                write(writeEditText.getText().toString());</div><div class="line">                writeEditText.setText(&quot;&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        readButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                readEditText.setText(read());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String read() &#123;</div><div class="line">        try &#123;</div><div class="line">	        //从文件读取数据</div><div class="line">            FileInputStream fileInputStream = openFileInput(FILE_NAME);</div><div class="line">            byte[] buffer = new byte[1024];</div><div class="line">            int hasRead = 0;</div><div class="line">            StringBuilder stringBuilder = new StringBuilder(&quot;&quot;);</div><div class="line">            while ((hasRead = fileInputStream.read(buffer)) &gt; 0 )</div><div class="line">            &#123;</div><div class="line">                stringBuilder.append(new String(buffer,0,hasRead));</div><div class="line">            &#125;</div><div class="line">            fileInputStream.close();</div><div class="line">            return stringBuilder.toString();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void write(String s) &#123;</div><div class="line">        try &#123;</div><div class="line">	        //向文件写入数据</div><div class="line">            FileOutputStream fileOutputStream = openFileOutput(FILE_NAME,MODE_APPEND);</div><div class="line">            PrintStream printStream = new PrintStream(fileOutputStream);</div><div class="line">            printStream.println(s);</div><div class="line">            printStream.close();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>3.<strong>在内存存储内保存缓存文件(也就是将数据保存在/data/data/&lt; package name&gt;/cache目录下的文件中)</strong></p>
<p>如果只是要缓存一些数据，而不是要持久的保存它，那么应该使用getCacheDir()方法来打开一个File对象，它代表了应用程序要保存临时缓存文件的内部目录。</p>
<p>当设备的内部存储空间不足的时候，Android可能会删除这些缓存文件来回收存储空间。但是，不应该依赖系统来给你清理这些文件，应该始终自己来维护缓存文件，并且要把存储空间的耗费限定在合理的范围内，如1MB。当用户卸载应用程序时，这些文件会被删除。</p>
<p>getCacheDir()：获取应用程序的缓存目录文件夹，即/data/data/&lt; package name&gt;/cache目录。</p>
<p>将上面的Demo改为向应用程序的缓存目录下下程序只需：</p>
<p>//向文件写入数据：<br>            FileOutputStream fileOutputStream = openFileOutput(FILE_NAME,MODE_APPEND);<br>改为：<br>FileOutputStream fileOutputStream =<br>new FileOutputStream(getCacheDir()+ File.separator+FILE_NAME);</p>
<p>//从文件读取数据：<br>FileInputStream fileInputStream = openFileInput(FILE_NAME);<br>改为：<br>FileInputStream fileInputStream =<br> new FileInputStream(getCacheDir()+ File.separator+FILE_NAME);</p>
<p>注：</p>
<ul>
<li>openFileOutput()和openFileInput()函数属于Android中定义的函数，文件默认保存的路径为/data/data/&lt; package name&gt;/files目录下。</li>
<li>new FileOutputStream()和new FileInputStream()函数属于Java中定义的函数，没有默认的文件保存路径，故需要制定文件路径。</li>
</ul>
<p>转载自：<a href="http://blog.csdn.net/tianjf0514/article/details/8271114#" target="_blank" rel="external">http://blog.csdn.net/tianjf0514/article/details/8271114#</a><br>参考自：《疯狂Java讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之数据存储--外部存储（SD卡）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%EF%BC%88SD%E5%8D%A1%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>使用外部存储实现数据持久化，这里的外部存储一般就是指的是sdcard。使用sdcard存储的数据，不限制只有本应用访问，任何可以有访问Sdcard权限的应用均可以访问，而Sdcard相对于设备的内部存储空间而言，会大很多，所以一般比较大的数据，均会存放在外部存储中。</p>
<p>使用SdCard存储数据的方式与内部存储的方式基本一致，但是有三点需要注意的：</p>
<ul>
<li>需要首先判断是否存在可用的Sdcard，调用Environment的getExternalStorageState()方法判断手机上是否插入了SD卡，并且应用程序具有读写SD卡的权限。使用如下代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//如果手机已插入SD卡，且应用程序具有读写SD卡的能力，下面语句返回true。</div><div class="line">Environment.getExternalStorageState().</div><div class="line">			equals(Environment.MEDIA_MOUNTED)</div></pre></td></tr></table></figure>
<blockquote>
<p>使用的Environment.getExternalStorageState()方法，返回的是一个字符串数据，Environment封装好了一些final对象进行匹配，除了Environment.MEDIA_MOUNTED外，其他均为有问题，所以只需要判断是否是Environment.MEDIA_MOUNTED状态即可。</p>
</blockquote>
<ul>
<li><p>既然转向了Sdcard，那么存储的文件路径就需要相对变更,<br>可通过Environment.getExternalStorageDirectory()函数获得Sdcard的根目录。</p>
<p> 标准手机的SD卡根目录是:/mnt/sdcard/<br> 其他国产手机SD卡的根目录各不相同，如/storage/emulated/0/，下面写的程序已标注SD卡目录，即/mnt/sdcard/目录讲解为主。</p>
</li>
<li><p>为了读写SD卡上的数据，不许在应用程序的清单文件(AndroidManifest.xml)中添加读写权限。例如如下配置：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//在SD卡中创建与删除文件权限</div><div class="line">&lt;uses-permission </div><div class="line">	android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;&gt;</div><div class="line">&lt;/uses-permission&gt;</div><div class="line"></div><div class="line">//向SD卡中写入数据权限</div><div class="line">&lt;uses-permission</div><div class="line">	 android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;</div><div class="line">&lt;/uses-permission&gt;</div></pre></td></tr></table></figure>
<hr>
<p>外部存储中的文件是可以被用户或者其他应用程序修改的，有两种类型的文件（或者目录）：</p>
<p><strong><em>1.私有文件Private files：</em></strong></p>
<p>其实由于是外部存储的原因即是是这种类型的文件也能被其他程序访问，只不过一个应用私有的文件对其他应用其实是没有访问价值的（恶意程序除外）。外部存储上，应用私有文件的价值在于卸载之后，这些文件也会被删除。类似于内部存储。</p>
<p>所有应用程序的外部存储的私有文件都放在SD卡根目录的Android/data/下，目录形式为：<strong>/mnt/sdcard/Android/data/&lt; package_name&gt;/files</strong>,可以通过函数Context.getExternalFilesDir()函数获得该目录.</p>
<p>往外部存储内读写文件和判断文件是否存在（写入到<br>/mnt/sdcard/Android/data/com.xxx.xxx/files目录下）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//往外部存储器写文件，将String s 写入文件Extral.test中</div><div class="line">private void write(String s)</div><div class="line">&#123;</div><div class="line">        if(Environment.getExternalStorageState().</div><div class="line">		        equals(Environment.MEDIA_MOUNTED))</div><div class="line">        &#123;</div><div class="line">            File file = new File(Environment.getExternalStorageDirectory(),&quot;Extral.test&quot;);</div><div class="line">            OutputStream outputStream = null;</div><div class="line">            try &#123;</div><div class="line">                outputStream = new FileOutputStream(file);</div><div class="line">                outputStream.write(s.getBytes());</div><div class="line">                outputStream.close();</div><div class="line">            &#125; catch (FileNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//从外部存储器中的Extral.test文件中读取内容。</div><div class="line">private String read() </div><div class="line">&#123;</div><div class="line">        File file = new File(Environment.getExternalStorageDirectory(),&quot;Extral.test&quot;);</div><div class="line">        InputStream inputStream = null;</div><div class="line">        try &#123;</div><div class="line">            inputStream = new FileInputStream(file);</div><div class="line">            byte[] data = new byte[1024];</div><div class="line">            inputStream.read(data);</div><div class="line">            return new String(data);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行上面代码会发现/mnt/sdcard/Android/data/&lt; package_name&gt;/files/目录下多了个Extral.test文件。</p>
<p>如果你的api 版本低于8，那么不能使用getExternalFilesDir()，而是使用Environment.getExternalStorageDirectory()获得根路径之后，自己再想办法操作/Android/data/&lt; package_name&gt;/files下的文件。</p>
<p>也就是说api 8以下的版本在操作文件的时候没有专门为私有文件和公共文件的操作提供api支持。你只能先获取根目录，然后自行想办法。</p>
<blockquote>
<p><strong><em>在外部存储器上存储缓存文件：</em></strong></p>
</blockquote>
<p>如果将应用程序的外部存储的私有文件作为缓存文件的话，可放在目录/mnt/sdcard/Android/data/&lt; package_name&gt;/cache下，可以通过函数：Context.getExternalCacheDir()</p>
<p>如果你的api 版本低于8，那么不能使用getExternalCacheDir()，而是使用Environment.getExternalStorageDirectory()获得根路径之后，自己再想办法操作/Android/data/&lt; package_name&gt;/files下的文件。</p>
<p>也就是说api 8以下的版本在操作文件的时候没有专门为私有文件和公共文件的操作提供api支持。你只能先获取根目录，然后自行想办法,例如下面代码，获取外部存储缓存的目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public static String getExternalCacheDir(Context context) &#123;</div><div class="line"></div><div class="line">      if (!isMounted())</div><div class="line">           return null;</div><div class="line"></div><div class="line">      StringBuilder sb = new StringBuilder();</div><div class="line"></div><div class="line">      File file = context.getExternalCacheDir();</div><div class="line"></div><div class="line">      // In some case, even the sd card is mounted,</div><div class="line">      // getExternalCacheDir will return null</div><div class="line">      // may be it is nearly full.</div><div class="line"></div><div class="line">      if (file != null) &#123;</div><div class="line">           sb.append(file.getAbsolutePath()).append(File.separator);</div><div class="line">      &#125; </div><div class="line">      else &#123;//如果api低于8,通过如下方法获取外部存储缓存目录</div><div class="line">           sb.append(Environment.getExternalStorageDirectory().getPath()).</div><div class="line">           append(&quot;/Android/data/&quot;).</div><div class="line">           append(context.getPackageName()).</div><div class="line">           append(&quot;/cache/&quot;).</div><div class="line">           append(File.separator).toString();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      return sb.toString();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong><em>2.公共文件Public files：</em></strong></p>
<p>文件是可以被自由访问，且文件的数据对其他应用或者用户来说都是由意义的，当应用被卸载之后，其卸载前创建的文件仍然保留。比如camera应用，生成的照片大家都能访问，而且camera不在了，照片仍然在。</p>
<p>如果保存的文件不是应用程序所专有的，并且在应用程序被卸载时，不删除这些文件，那么就要把它们保存到外部存储器上的一个公共的目录上。这些目录位于外部存储器的根目录下，如：</p>
<p>/mnt/sdcard/Music/—媒体扫描器把在这个目录中找到所有媒体文件作为用户音乐。<br>/mnt/sdcard/Podcasts/—媒体扫描器把在这个目录中找到的所有媒体文件作为音/视频的剪辑片段。<br>/mnt/sdcard/Ringtones/—媒体扫描器把在这个目录中找到的所有媒体文件作为铃声。<br>/mnt/sdcard/Alarms/—媒体扫描器把在这个目录中找到的所有媒体文件作为闹钟的声音。<br>/mnt/sdcard/Pictures/—所有的图片（不包括那些用照相机拍摄的照片）。<br>/mnt/sdcard/Movies/—所有的电影（不包括那些用摄像机拍摄的视频）。<br>/mnt/sdcard/Download/—其他下载的内容。</p>
<p>如果你想在外存储上放公共文件你可以使用<br>Environment.getExternalStoragePublicDirectory(Sting type)</p>
<p>例子的话只需要把上面例子中的getExternalFilesDir(null)替换为Environment.getExternalStoragePublicDirectory()，此方法需要一个参数来指定公共目录类型（如Environment.DIRECTORY_MUSIC、Environment.DIRECTORY_PICTURES、Environment.DIRECTORY_RINGTONES或其他的类型。如果需要，这个方法会创建适当的目录）</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC),&quot;Extral.test&quot;)</div></pre></td></tr></table></figure>
<p>在/mnt/sdcard/Music/目录下创建Extral.test文件。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://img.blog.csdn.net/20150828110343803" alt="这里写图片描述"></h2><p>补充：对于现在市面上很多Android设备，自带了一个大的存储空间，一般是8GB或16GB，并且又支持了Sdcard扩展，对于这样的设备，使用Enviroment.<br>getExternalStorageDirectory()方法只能获取到设备自带的存储空间，对于另外扩展的Sdcard而言，需要修改路径。</p>
<p>注：<br>在没有安装SDcard的 华为荣耀6手机上(3RAM，16GROM）：<br>通过以下函数获得的路径:<br>Environment.getExternalStorageDirectory()：<br>/storage/emulated/0</p>
<p>getExternalFilesDir(null)：<br>/storage/emulated/0/Android/data/com.example.filetest/files</p>
<p>getExternalCacheDir()：<br>/storage/emulated/0/Android/data/com.example.filetest/cache</p>
<p>Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC):<br> /storage/emulated/0/Music</p>
<p> 但用以上函数存储文件时，获得的根目录为/storage/emulated/0，实际存储在/mnt/shell/emulated/0/目录下，<br> 如：/mnt/shell/emulated/0//Android/data/com.example.filetest/files<br> 不知道怎么回事？</p>
<p>参考：<a href="http://blog.csdn.net/tianjf0514/article/details/8271114#" target="_blank" rel="external">http://blog.csdn.net/tianjf0514/article/details/8271114#</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之音频播放（MediaPlayer和SoundPool）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E9%9F%B3%E9%A2%91%E6%92%AD%E6%94%BE%EF%BC%88MediaPlayer%E5%92%8CSoundPool%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Android提供简单的API来播放音频。</p>
<blockquote>
<p><strong>使用MediaPlayer播放音频</strong></p>
</blockquote>
<ul>
<li>此类适合播放较大文件，此类文件应该存储在SD卡上，而不是在资源文件里，还有此类每次只能播放一个音频文件。</li>
<li>缺点：资源占用量较高，延迟时间较长；不支持多个音频同时播放。</li>
</ul>
<p>使用MediaPlayer非常简单，当程序控制MediaPlayer对象装载音频完成后，程序可以调用MediaPlayer的如下三个方法进行播放控制。</p>
<ul>
<li>start()：开始或恢复播放。</li>
<li>stop()：停止播放。</li>
<li>pause():暂停播放。</li>
</ul>
<p>为了让MediaPlayer来装载指定的音频文件，MediaPlayer提供如下简单的静态方法。</p>
<ul>
<li>static MediaPlayer create(Context context, Uri uri):从执定Uri来装载音频文件，并返回新创建的MediaPlayer对象。</li>
<li>static MediaPlayer create(Context context, int resid)：从resid资源的ID对应的资源文件中装载音频文件，并返回新创建的对象。<br>上面方法用起来非常方便，但这两个方法每次都会返回新创建的MediaPlayer对象，如果程序需要使用MediaPlayer循环播放多个音频文件，使用MediaPlayer的静态create()方法就不太合适了，此时可通过MediaPlayer的setDataSource()方法来装载指定的音频文件。MediaPlayer提供了如下方法来指定装载相应的音频文件。</li>
<li>void setDataSource(String path):指定装载path路径所代表的文件。</li>
<li>void setDataSource(FileDescriptor fd, long offset, long length):指定装载fd所代表的的文件中从offset开始、长度为length的文件内容。</li>
<li>void setDataSource(Context context, Uri uri):指定装载uri所代表的文件。</li>
<li>void setDataSource(FileDescriptor fd)：指定装载fd所代表的的文件。</li>
</ul>
<p>执行上面所示的setDataSource()方法后，MediaPlayer并未真正的去装载那些音频文件，还需要调用MediaPlayer的prepare()方法去准备音频。所谓“准备”是让MediaPlayer真正去装载音频文件。</p>
<p>除此之外，MediaPlayer还提供了一些绑定事件监听器的方法，用于监听MediaPlayer播放过程中所发生的特定事件。绑定事件监听器的方法如下。</p>
<ul>
<li>setOnCompletionListener():为MediaPlayer的播放完成事件绑定事件监听器。</li>
<li>setOnErrorListener():为MediaPlayer的播放错误事件绑定事件监听器</li>
<li>setOnPreparedListener()：为MediaPlayer调用Prepare()方法时触发该监听器。</li>
</ul>
<p>使用MediaPlayer播放不同来源的音频文件的方式：</p>
<p><strong>1.播放应用中的资源文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MediaPlayer </div><div class="line">mediaPlayer = MediaPlayer.create(this,R.raw.incomingcall);</div><div class="line">       mediaPlayer.start();</div></pre></td></tr></table></figure>
<p>提示：音频资源文件一般放在Android应用的/res/raw目录下</p>
<p><strong>2.播放应用原始资源文件</strong><br>播放应用原始资源的步骤：</p>
<ul>
<li>调用Context的getAssets()方法获取应用的AssetManager。</li>
<li>调用AssertManager对象的openFd(String name)方法代开指定的原始资源，该方法返回一个AssetFileDescriptor对象。</li>
<li>调用AssetFileDescriptor的getFileDescriptor()、getStartOffset和getLength()方法来获取音频文件的FileDescriptor、开始位置、长度等。</li>
<li>创建MediaPlayer对象(或利用已有的MediaPlayer对象)，并调用MediaPlayer对象的setDataSource(FileDescriptor fd, long offset, long length)方法来装载音频资源。</li>
<li>调用MediaPlayer对象的prepare()方法准备音频。</li>
<li>调用MediaPlayer的start()、pause()、stop()等方法控制播放即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">AssetManager am = getAssets();</div><div class="line">//打开指定音乐文件</div><div class="line">AssetFileDescriptor afd = am.openFd(music);</div><div class="line">MediaPlayer mediaPlayer = new MediaPlayer();</div><div class="line">//使用MediaPlayer装载指定的声音文件</div><div class="line">mediaPlayer.setDataSource(afd.getFileDescriptor(),</div><div class="line">               afd.getStartOffset(),afd.getLength());</div><div class="line">//准备声音</div><div class="line">mediaPlayer.prepare();</div><div class="line">//播放</div><div class="line">mediaPlayer.start();</div></pre></td></tr></table></figure>
<p><strong>3.播放外部存储器上的音频文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MediaPlayer mediaPlayer = new MediaPlayer();</div><div class="line">mediaPlayer.setDataSource(&quot;/mnt/sdcard/mysong.mp3&quot;);</div><div class="line">mediaPlayer.prepare();</div><div class="line">mediaPlayer.start();</div></pre></td></tr></table></figure>
<p>4.播放来自网络的音频文件</p>
<p>有两种方式:<br>(1)直接使用MediaPlayer的静态方法create(Context context, Uri uri).<br>(2)调用MediaPlayer的setDataSource(Context context, Uri uri)方法装载Uri对对应的音频文件。<br>第(2)中方式的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Uri uri = Uri.parse(&quot;http://www.xxx.cn/abc.mp3&quot;);</div><div class="line">MediaPlayer mediaPlayer = new MediaPlayer();</div><div class="line">mediaPlayer.setDataSource(this,uri);</div><div class="line">mediaPlayer.prepare();</div><div class="line">mediaPlayer.start();</div></pre></td></tr></table></figure>
<p>另外，MediaPlayer除了调用prepare()方法来准备声音之外，还可以调用prepareAsync()来准备声音。prepareAsync()与prepare()方法的区别在于，prepareAsync()是异步的，它不会阻塞当前的UI线程。</p>
<p>以上MediaPlayer的只是转载自：《Android疯狂讲义》</p>
<hr>
<blockquote>
<p><strong>使用SoundPool播放音频</strong></p>
</blockquote>
<p>SoundPool主要用与播放一些较短的声音片段，与MediaPlayer相比，SoundPool的优势在于CPU资源占用率低和反映延迟小。SoundPool使用音效池的概念来管理多个短促的音效，因此适合实时同时播放多个声音，反复播放的声音，如游戏中炸弹的爆炸音等小资源文件，此类音频比较适合放到资源文件夹 res/raw下和程序一起打成APK文件。另外SoundPool还支持自行设置声音的品质、音量、播放比率等参数。</p>
<p><strong>1.创建SoundPool对象：</strong></p>
<p><img src="http://img.blog.csdn.net/20150831081604024" alt="这里写图片描述"></p>
<p>SoundPool提供一个Builder内部类，该内部类专门用于创建SoundPool。<br>注：从Android5.0开始，SoundPool的构造器被设为过时了，因此推荐使用SoundPool.Builder来创建SoundPool对象。</p>
<p>Android 5.0之前：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">soundPool = new SoundPool(10, AudioManager.STREAM_RING,100);</div></pre></td></tr></table></figure>
<p>Android 5.0之后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> //设置音效池的属性</div><div class="line"> AudioAttributes audioAttributes = new AudioAttributes.Builder()</div><div class="line">				 //设置音效使用场景</div><div class="line">                .setUsage(AudioAttributes.USAGE_NOTIFICATION)</div><div class="line">//设置音效类型					                 .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)</div><div class="line">                .build();</div><div class="line">                </div><div class="line"> //创建SoundPool对象               </div><div class="line"> soundPool = new SoundPool.Builder()</div><div class="line">				 //设置音效池属性</div><div class="line">                .setAudioAttributes(audioAttributes)</div><div class="line">                //设置音效类型</div><div class="line">                .setMaxStreams(10)</div><div class="line">                .build();</div></pre></td></tr></table></figure></p>
<p><strong>2.加载声音</strong></p>
<p>一旦得到SoundPool对象后，接下来就可调用SoundPool的多个重载的load()方法来加载声音了。SoundPool提供了如下load()方法。</p>
<ul>
<li>public int load (Context context, int resId, int priority)：从resId加载声音。</li>
<li>public int load (FileDescriptor fd, long offset, long length, int priority)：从fd所对应的文件加载声音。</li>
<li>public int load (AssetFileDescriptor afd, int priority)</li>
<li>public int load (String path, int priority)</li>
</ul>
<p>上面的方法中都有一个priority参数，该参数目前还没有任何作用，Android建议将该参数设置为1，保持和未来的兼容性。</p>
<p>Returns：<br>a sound ID. This value can be used to play or unload the sound.<br>即load()函数返回该声音的ID。</p>
<p>为了更好的管理SoundPool所加载的每个声音的ID，程序一般会使用HashMap&lt; Interger,Interger&gt;对象来管理声音。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;Integer,Integer&gt; soundMap = new HashMap&lt;&gt;();</div><div class="line">soundMap.put(1,soundPool.load(this,R.raw.one,1));</div><div class="line">soundMap.put(2,soundPool.load(this,R.raw.two,1));</div></pre></td></tr></table></figure>
<p>通过soundMap.get(1)就可以拿到，soundPool.load(this,R.raw.one,1)的返回值得声音ID。<br>同理，soundMap.get(2)就可以拿到，soundPool.load(this,R.raw.two,1)的返回值得声音ID。</p>
<p><strong>3.播放声音</strong></p>
<p>同过load()方法加载声音后，都会返回该声音的ID，以后程序就可以通过该声音的ID来播放声音了。SoundPool提供的播放指定声音的方法如下：<br>public final int play (int soundID, float leftVolume, float rightVolume, int priority, int loop, float rate)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public final int play (int soundID, float leftVolume, float rightVolume, int priority, int loop, float rate)</div><div class="line"></div><div class="line">Parameters</div><div class="line">soundID	a soundID returned by the load() function</div><div class="line">leftVolume	left volume value (range = 0.0 to 1.0)</div><div class="line">rightVolume	right volume value (range = 0.0 to 1.0)</div><div class="line">priority	stream priority (0 = lowest priority)</div><div class="line">loop	loop mode (0 = no loop, -1 = loop forever)</div><div class="line">rate	playback rate (1.0 = normal playback, range 0.5 to 2.0)</div><div class="line"></div><div class="line">Returns</div><div class="line">non-zero streamID if successful, zero if failed</div></pre></td></tr></table></figure>
<p>注：有时候play()函数的返回值为0,DDMS报的错是sample not ready的问题，也就是说是在load加载音乐文件出错，导致在play播放音乐时显示not ready； 在SoundPool中有setOnLoadCompleteListener方法用来判断音乐加载是否完成，因此解决方法如下：<br>(1)在音乐加载完成时间完成后播放</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() </div><div class="line">&#123;</div><div class="line">            @Override</div><div class="line">            public void onLoadComplete(SoundPool soundPool,</div><div class="line">			&#123;</div><div class="line">                streamIdOne </div><div class="line">                = soundPool.play(soundMap.get(1),1,1,0,-1,1);</div><div class="line">            &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>(2)可直接在load后面加sleep（1000），具体时间根据加载的文件的多少大小而定，给程序足够的时间去加载初始化音频文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 将加载的声音资源id放进此Map</div><div class="line">soundPoolMap.put(1, soundPool.load(this, R.raw.gamestart, 1));</div><div class="line">try </div><div class="line">&#123;</div><div class="line">	Thread.sleep(1000);// 给予初始化音乐文件足够时间</div><div class="line">&#125; </div><div class="line">catch (InterruptedException e)</div><div class="line">&#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.暂停</strong></p>
<p>public final void stop (int streamID)</p>
<p>Parameters：<br>streamID    a streamID returned by the play() function</p>
<p>Demo：</p>
<p><img src="http://img.blog.csdn.net/20150831110735909" alt="这里写图片描述"></p>
<p>界面布局很简单我就不上传了，点击PlayOne按钮播放第一个音乐，点击StopOne按钮第一个音乐播放结束。点击PlayTwo按钮播放第二个音乐，点击StopTwo按钮第二个音乐暂停。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity implements View.OnClickListener &#123;</div><div class="line">    private Button playOneBtn;</div><div class="line">    private Button stopOneBtn;</div><div class="line">    private Button playTwoBtn;</div><div class="line">    private Button stopTwoBtn;</div><div class="line"></div><div class="line">    SoundPool soundPool;</div><div class="line">    HashMap&lt;Integer,Integer&gt; soundMap = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    int streamIdOne;</div><div class="line">    int streamIdTwo;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        playOneBtn = (Button) findViewById(R.id.playOneBtn);</div><div class="line">        stopOneBtn = (Button) findViewById(R.id.stopOneBtn);</div><div class="line">        playTwoBtn = (Button) findViewById(R.id.playTwoBtn);</div><div class="line">        stopTwoBtn = (Button) findViewById(R.id.stopTwoBtn);</div><div class="line">        playOneBtn.setOnClickListener(this);</div><div class="line">        stopOneBtn.setOnClickListener(this);</div><div class="line">        playTwoBtn.setOnClickListener(this);</div><div class="line">        stopTwoBtn.setOnClickListener(this);</div><div class="line">        //创建SoundPool对象并设置属性</div><div class="line">        /*AudioAttributes audioAttributes = new AudioAttributes.Builder()</div><div class="line">                .setUsage(AudioAttributes.USAGE_NOTIFICATION)</div><div class="line">                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)</div><div class="line">                .build();</div><div class="line">        soundPool = new SoundPool.Builder()</div><div class="line">                .setAudioAttributes(audioAttributes)</div><div class="line">                .setMaxStreams(10)</div><div class="line">                .build();*/</div><div class="line"></div><div class="line">        soundPool = new SoundPool(10, AudioManager.STREAM_RING,100);</div><div class="line">        //加载声音</div><div class="line">        soundMap.put(1,soundPool.load(this,R.raw.one,1));</div><div class="line">        soundMap.put(2,soundPool.load(this,R.raw.two,1));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId())</div><div class="line">        &#123;</div><div class="line">            case R.id.playOneBtn:</div><div class="line">                streamIdOne = soundPool.play(soundMap.get(1),1,1,0,-1,1);</div><div class="line">                break;</div><div class="line">            case R.id.playTwoBtn:</div><div class="line">                streamIdTwo = soundPool.play(soundMap.get(2),1,1,0,-1,1);</div><div class="line">                break;</div><div class="line">            case R.id.stopOneBtn:</div><div class="line">                soundPool.stop(streamIdOne);</div><div class="line">                break;</div><div class="line">            case R.id.stopTwoBtn:</div><div class="line">                soundPool.stop(streamIdTwo);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之话筒、听筒、扬声器]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E8%AF%9D%E7%AD%92%E3%80%81%E5%90%AC%E7%AD%92%E3%80%81%E6%89%AC%E5%A3%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>话筒是输入（麦克风），听筒、扬声器是输出（喇叭）</p>
<p><strong>听筒/扬声器：</strong></p>
<ul>
<li>听筒是用来听对方传送过来的声音，手机放的MP3和开机铃声是从喇叭发出的。</li>
<li>听筒模式,就是手机上一般听电话的内置小耳机,声音较小。 </li>
<li>扬声器模式,就是声音外放,声音较大</li>
</ul>
<p><strong>话筒：</strong></p>
<ul>
<li>传声器是一个声-电转换器件（也可以称为换能器或传感器），是和喇叭正好相反的一个器件（电→声）。是声音设备的两个终端，传声器是输入，喇叭是输出。</li>
<li>麦克风，学名为传声器，由Microphone翻译而来。传声器是将声音信号转换为电信号的能量转换器件，也称话筒，麦克风，微音器</li>
</ul>
<hr>
<p>AudioManger对象通过getSystemService(Service.AUDIO_SERVICE)获取<br>AudioManger常用的几个方法void android.media.AudioManager.adjustStreamVolume(int streamType, int direction, int flags)：第二个表示调整音乐的大小，第三个参数表示显示调整是的标志 AudioManager.FLAG_SHOW_UI；调整手机类型的声音；第一个参数的几个值<br>    STREAM_ALARM：手机闹铃的声音<br>    STREAM_MUSIC：手机音乐的声音<br>     STREAM_DTMF：DTMF音调的声音<br>     STREAM_RING：电话铃声的声音<br>     STREAM_NOTFICATION：系统提示的声音<br>      STREAM_SYSTEM：系统的声音<br>      STREAM_VOICE_CALL：语音电话声音</p>
<p>void android.media.AudioManager.setMicrophoneMute(boolean on)设置是否让麦克风设置静音<br>// 打开扬声器<br>audioManager.setSpeakerphoneOn(true);</p>
<p>void android.media.AudioManager.setRingerMode(int ringerMode)：设置手机电话铃声的模式；支持的几个属性值<br>   RINGER_MODE_NORMAL：正常的手机铃声<br>   RINGER_MODE_SILENT：手机铃声静音<br>   RING_MODE_VIBATE：手机震动<br>void android.media.AudioManager.setStreamMute(int streamType, boolean state)将指定的音量类型调整为静音</p>
<p>Android中打开扬声器关闭麦克风的代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//获取音频服务  </div><div class="line">AudioManager audioManager = (AudioManager) this.getSystemService(Context.AUDIO_SERVICE);  </div><div class="line">//设置声音模式  </div><div class="line">audioManager.setMode(AudioManager.STREAM_MUSIC);  </div><div class="line">//关闭麦克风  </div><div class="line">audioManager.setMicrophoneMute(false);  </div><div class="line">// 打开扬声器  </div><div class="line">audioManager.setSpeakerphoneOn(true);  </div><div class="line">//实例化一个SoundPool对象  </div><div class="line">SoundPool soundPool =new SoundPool(10, AudioManager.STREAM_SYSTEM, 5);  </div><div class="line">//加载声音  </div><div class="line">int  id = soundPool.load(this,R.raw.beep,5);  </div><div class="line">//播放声音  </div><div class="line"> soundPool.play(id, 1, 1, 0, 0, 1);  </div><div class="line">另外必须加上权限：&lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;/&gt;</div></pre></td></tr></table></figure>
<p>Android 手机听筒Earpiece和扬声器speaker切换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AudioManager audioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);</div><div class="line"> private void setSpeakerphoneOn(boolean on) </div><div class="line"> &#123;</div><div class="line">        if(on)</div><div class="line">        &#123;</div><div class="line">            audioManager.setSpeakerphoneOn(true);       </div><div class="line">        &#125; else </div><div class="line">        &#123;</div><div class="line">	        audioManager.setSpeakerphoneOn(false);//关闭扬声器                                </div><div class="line">            //把声音设定成Earpiece（听筒）出来，设定为正在通话中</div><div class="line">			audioManager.setMode(AudioManager.MODE_IN_CALL);																																				                                                                        															                                                                                </div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之数据存数--SQLite数据库]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E6%95%B0-SQLite%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自<a href="http://liangruijun.blog.51cto.com/3061169/663686" target="_blank" rel="external">http://liangruijun.blog.51cto.com/3061169/663686</a><br>《疯狂Android讲义》</p>
<h2 id="一-SQLite的介绍"><a href="#一-SQLite的介绍" class="headerlink" title="一.SQLite的介绍"></a>一.SQLite的介绍</h2><ol>
<li><p>SQLite简介</p>
<p>SQLite是一款轻型的数据库，是遵守ACID的关联式数据库管理系统，它的设计目标是嵌入 式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持 Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如Tcl、PHP、Java、C++、.Net等，还有ODBC接口，同样比起 Mysql、PostgreSQL这两款开源世界著名的数据库管理系统来讲，它的处理速度比他们都快。</p>
<p>Android系统集成了一个轻量级的数据库：SQLite。SQLite只是一个嵌入式的数据库引擎，专门适用于资源有限的设备(如手机、PDA等)上适量数据存取。</p>
<p>虽然SQL支持绝大部分SQL 92语法，也允许开发者使用SQL语句操作数据库中的数据，但SQLite并不像Oracle、MySQL数据库那样需要安装、启动服务器进程，SQLite数据库只是一个文件。</p>
</li>
<li><p>SQLite的特点：</p>
<ul>
<li>轻量级<br>SQLite和C/S模式的数据库软件不同，它是进程内的数据库引擎，因此不存在数据库的客户端和服务器。使用SQLite一般只需要带上它的一个动态  库，就可以享受它的全部功能。而且那个动态库的尺寸也挺小，以版本3.6.11为例，Windows下487KB、Linux下347KB。</li>
</ul>
</li>
</ol>
<ul>
<li><p>不需要”安装”<br>SQLite的核心引擎本身不依赖第三方的软件，使用它也不需要”安装”。有点类似那种绿色软件。</p>
</li>
<li><p>单一文件<br>数据库中所有的信息（比如表、视图等）都包含在一个文件内。这个文件可以自由复制到其它目录或其它机器上。</p>
</li>
<li><p>跨平台/可移植性<br>除了主流操作系统 windows，linux之后，SQLite还支持其它一些不常用的操作系统。</p>
</li>
<li><p>弱类型的字段<br>同一列中的数据可以是不同类型</p>
</li>
<li><p>开源</p>
<ol>
<li>SQLite数据类型</li>
</ol>
</li>
</ul>
<p>一般数据采用的固定的静态数据类型，而SQLite采用的是动态数据类型，会根据存入值自动判断(即它允许把各种类型的数据保存到任意类型字段中)。SQLite具有以下五种常用的数据类型：</p>
<ul>
<li>NULL: 这个值为空值</li>
<li>VARCHAR(n)：长度不固定且其最大长度为 n 的字串，n不能超过 4000。</li>
<li>CHAR(n)：长度固定为n的字串，n不能超过 254。</li>
<li>INTEGER: 值被标识为整数,依据值的大小可以依次被存储为1,2,3,4,5,6,7,8.</li>
<li>REAL(浮点数): 所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号.</li>
<li>TEXT:(文本) 值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE).</li>
<li>BLOB(大二进制对象): 值是BLOB数据块，以输入的数据格式进行存储。如何输入就如何存储,不改  变格式。</li>
<li>DATA ：包含了 年份、月份、日期。</li>
<li>TIME： 包含了 小时、分钟、秒。</li>
</ul>
<hr>
<h2 id="二-SQLiteDatabase的介绍"><a href="#二-SQLiteDatabase的介绍" class="headerlink" title="二.SQLiteDatabase的介绍"></a>二.SQLiteDatabase的介绍</h2><p>Android提供了创建和是用SQLite数据库的API。SQLiteDatabase代表一个数据库对象，提供了操作数据库的一些方法。在Android的SDK目录下有sqlite3工具，我们可以利用它创建数据库、创建表和执行一些SQL语句。下面是SQLiteDatabase的常用方法。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>openOrCreateDatabase(String path,SQLiteDatabase.CursorFactory factory)</td>
<td>打开或创建数据库</td>
</tr>
<tr>
<td>insert(String table,String nullColumnHack,ContentValues values)</td>
<td>添加一条记录</td>
</tr>
<tr>
<td>delete(String table,String whereClause,String[] whereArgs)</td>
<td>删除一条记录</td>
</tr>
<tr>
<td>update(String table,ContentValues values,String whereClause,String[] whereArgs)</td>
<td>修改记录</td>
</tr>
<tr>
<td>query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy)</td>
<td>查询一条记录</td>
</tr>
<tr>
<td>execSQL(String sql)</td>
<td>执行一条SQL语句</td>
</tr>
<tr>
<td>beginTransaction()</td>
<td>开始事务</td>
</tr>
<tr>
<td>endTransaction()</td>
<td>结束事务</td>
</tr>
<tr>
<td>close()</td>
<td>关闭事务</td>
</tr>
</tbody>
</table>
<p><strong><em>1.</em></strong> <strong><em>打开或者创建数据库</em></strong></p>
<p>在Android 中以使用SQLiteDatabase的静态方法openOrCreateDatabase(String path,SQLiteDatabae.CursorFactory factory)打开或者创建一个数据库。它会自动去检测是否存在这个数据库，如果存在则打开，不存在则创建一个数据库；创建成功则返回一个SQLiteDatabase对象，否则抛出异常FileNotFoundException。</p>
<p>下面是创建名为“stu.db”数据库的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db;</div><div class="line">db = SQLiteDatabase.openOrCreateDatabase(this.getFilesDir().toString()+&quot;/stu.db3&quot;,null);</div></pre></td></tr></table></figure>
<p>上面代码没有指定SQLiteDatabase.CursorFactory参数，该参数是一个用于返回Cursor的工厂，如果指定该参数为null,则意味着使用默认的工厂。</p>
<p>上面代码即可返回一个SQLiteDatabase对象，该对象的execSQL()方法可以执行任意的SQL语句。</p>
<p><strong><em>2.</em></strong> <strong><em>创建表</em></strong></p>
<p>创建一张表很简单。首先，编写创建表的SQL语句，然后，调用SQLiteDatabase的execSQL()方法来执行SQL语句便可以创建一张表了。</p>
<p>下面的代码创建了一张学生表，属性列为：id（主键并且自动增加）、sname（学生姓名）、snumber（学号）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private void createTable(SQLiteDatabase db) &#123;</div><div class="line">       String stu_table = &quot;create table StuTable(id integer primary key autoincrement,sname text,snumber text)&quot;;</div><div class="line">       db.execSQL(stu_table);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>3.插入数据</em></strong></p>
<p>从上面SQLiteDatabase常用的API中可以看出，SQLiteDatabase提供了对数据库操作的的insert(增)、delete(删)、update(改)、query(查)的方法，其实这些方法完全可以通过执行SQL语句来完成，但Android考虑到部分开发者对SQL语法不熟悉，所以提供这种方法帮助开发者以更简单的方式来操作数据库表中的数据。</p>
<p>因此，SQLiteDatabase对数据库的增、删、改、查等操作，有两种方法可已完成。<br>第一种是：使用SQLiteDatabase提供的insert、delete、update、query方法操作数据库。<br>第二种是：使用SQL语句操作SQLite数据库。</p>
<p>第一种方法：<br>SQLiteDatabase的insert(String table,String nullColumnHack,ContentValues values)方法，参数一是表名称，参数二是空列的默认值，参数三是ContentValues类型的一个封装了列名称和列值的Map；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void insertDB(SQLiteDatabase db,String name,String number) </div><div class="line">&#123;</div><div class="line">		//实例化常量值</div><div class="line">        ContentValues values = new ContentValues();</div><div class="line">        //插入姓名</div><div class="line">        values.put(&quot;sname&quot;,name);</div><div class="line">        //插入学号</div><div class="line">        values.put(&quot;snumber&quot;,number);</div><div class="line">        //调用insert插入数据</div><div class="line">        db.insert(&quot;stuTable&quot;, null, values);</div><div class="line">&#125;</div><div class="line"></div><div class="line">insertDB(db, &quot;xiaoming&quot;, &quot;00001&quot;);</div><div class="line">insertDB(db, &quot;xiaohong&quot;, &quot;00002&quot;);</div><div class="line">insertDB(db, &quot;xiaoqiang&quot;, &quot;00003&quot;);</div></pre></td></tr></table></figure>
<p>第二种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void insert(SQLiteDatabase db)</div><div class="line">&#123;   </div><div class="line"> </div><div class="line">     //插入数据SQL语句  </div><div class="line">     String stu_sql=&quot;insert into stu_table(sname,snumber) values(&apos;xiaoming&apos;,&apos;00001&apos;)&quot;;  </div><div class="line">   </div><div class="line">    //执行SQL语句  </div><div class="line">     db.execSQL(sql);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>4.删除数据</em></strong></p>
<p>第一种方法：<br>调用SQLiteDatabase的delete(String table,String whereClause,String[] whereArgs)方法，参数一是表名称，参数二是删除条件，参数三是删除条件值数组；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void deleteDB(SQLiteDatabase db)</div><div class="line"> &#123;</div><div class="line">		//删除条件</div><div class="line">        String whereCause = &quot;sname=?&quot;;</div><div class="line">        //删除条件参数</div><div class="line">        String[] whereArgs = &#123;&quot;xiaoming&quot;&#125;;</div><div class="line">        //执行删除</div><div class="line">        db.delete(&quot;stuTable&quot;,whereCause,whereArgs);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>第二种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void deleteDB(SQLiteDatabase db)</div><div class="line"> &#123;  </div><div class="line">   </div><div class="line">   //删除SQL语句  </div><div class="line">   String sql = &quot;delete from stuTable where sname = xiaoming&quot;;  </div><div class="line">   </div><div class="line">   //执行SQL语句  </div><div class="line">   db.execSQL(sql);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>5.修改数据</em></strong></p>
<p>第一种方法：</p>
<p>调用SQLiteDatabase的update(String table,ContentValues values,String whereClause, String[] whereArgs)方法。参数是表名称，参数是更行列ContentValues类型的键值对（Map），参数是更新条件（where字句），参数是更新条件数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private void updateDB(SQLiteDatabase db)</div><div class="line">&#123;</div><div class="line">    ContentValues values = new ContentValues();</div><div class="line">    values.put(&quot;snumber&quot;,&quot;10010&quot;);</div><div class="line">    String whereCause = &quot;sname=?&quot;;</div><div class="line">    String[] whereArgs = &#123;&quot;xiaohong&quot;&#125;;</div><div class="line">    db.update(&quot;stuTable&quot;,values,whereCause,whereArgs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void updateDB(SQLiteDatabase db)</div><div class="line">&#123;  </div><div class="line">   </div><div class="line">    //修改SQL语句  </div><div class="line">    String sql = &quot;update stuTable set snumber = 10010 where sname = xiaohong&quot;;  </div><div class="line">   </div><div class="line">    //执行SQL  </div><div class="line">    db.execSQL(sql);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>6.查询数据</em></strong></p>
<p>在Android中查询数据是通过Cursor类来实现的，当我们使用SQLiteDatabase.query()方法时，会得到一个Cursor对象，Cursor指向的就是每一条数据。它提供了很多有关查询的方法，具体方法如下：<br>public Cursor query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit);<br>各个参数的意义说明：<br>①table:表名称<br>②columns:列名称数组<br>③selection:条件字句，相当于where<br>④selectionArgs:条件字句，参数数组<br>⑤groupBy:分组列<br>⑥having:分组条件<br>⑦orderBy:排序列<br>⑧limit:分页查询限制<br>⑨Cursor:返回值，相当于结果集ResultSet</p>
<p>Cursor是一个游标接口，提供了遍历查询结果的方法，如移动指针方法move()，获得列值方法getString()等.<br>Cursor游标常用方法:<br>| 方法名称 | 方法描述 |<br>| ————- |:————-:|<br>| getCount() | 获得总的数据项数 |<br>| isFirst() | 判断是否第一条记录 |<br>| isLast() | 判断是否最后一条记录 |<br>|moveToFirst()|移动到第一条记录|<br>|moveToLast()|移动到最后一条记录|<br>|moveToPrevious()|移动到上一条记录|<br>|moveToNext()|移动到下一条记录|<br>|move(int offset)|将记录指针移动指定的行数，offset为正就向下移动，offset为负就向上移动。|<br>|getColumnIndexOrThrow(String columnName)|根据列名称获得列索引|<br>|getInt(int columnIndex)|获得指定列索引的int类型值|<br>|getString(int columnIndex)|获得指定列索引的String类型值|</p>
<p>第一种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void queryDB(SQLiteDatabase db)</div><div class="line">    &#123;</div><div class="line">        Cursor cursor = db.query(&quot;stuTable&quot;,null,null,null,null,null,null);</div><div class="line">        if (cursor.moveToFirst())</div><div class="line">        &#123;</div><div class="line">            for (int i = 0;i &lt; cursor.getCount();i++)</div><div class="line">            &#123;</div><div class="line">                cursor.move(i);</div><div class="line">                int id = cursor.getInt(0);</div><div class="line">                String name = cursor.getString(1);</div><div class="line">                String number = cursor.getString(2);</div><div class="line">                System.out.println(id+&quot;:&quot;+name+&quot;:&quot;+number);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>第二种方法：<br>SQLiteDatabase的execSQL()方法可执行任意的SQL语句，包括带占位符的SQL语句。但由于该方法没有返回值，因此一般用于执行DDL语句或DML语句；如果需要执行查询语句，则可调用SQLiteDatabase的rawQuery(String sql,String[] selectionArgs)方法。</p>
<p><strong><em>7.删除指定表</em></strong></p>
<p>编写插入数据的SQL语句，直接调用SQLiteDatabase的execSQL()方法来执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private void dropTable(SQLiteDatabase db) </div><div class="line">&#123;</div><div class="line">        String sql = &quot;DROP TABLE stuTable&quot;;</div><div class="line">        db.execSQL(sql);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>提示：</em></strong>虽然Android提供了这些所谓的“便捷”方法来操作SQLite数据库，但在笔者看来这些方法纯属“鸡肋”，对于一个程序员而言，SQL语法可以说是基本功中的基本功—你见过不会1+1=2的数学工作者吗？</p>
<p><strong><em>8.事务</em></strong><br>SQLiteDatabase中包含如下两个方法来控制事务。</p>
<ul>
<li>beginTransaction():开始事务</li>
<li>endTransaction():结束事务</li>
</ul>
<p>除此之外，SQLiteDatabase还提供了如下方法来判断当前上下文是否处于事务环境中。</p>
<ul>
<li>inTransaction():如果当前上下文处于事务中，则返回true;否则返回false。</li>
</ul>
<p>当程序执行endTransaction()方法时将会结束事务——到底是提交事务，还是回滚事务呢？这取决于SQLiteDatabase是否调用了setTransactionSuccessful()方法来设置事务标志，如果程序在事务执行中调用该方法设置了事务成功则提交事务；否则程序将会回滚事务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//开始事务</div><div class="line">db.beginTrainsaction();</div><div class="line">try</div><div class="line">&#123;</div><div class="line">	//指定DML语句</div><div class="line">	......</div><div class="line">	//调用该方法设置事务成功；否则endTransaction()方法将回滚事务。</div><div class="line">	db.setTransactionSuccessful();</div><div class="line">&#125;</div><div class="line">finally</div><div class="line">&#123;</div><div class="line">	//由事务的标志决定是提交事务还是回滚事务</div><div class="line">	db.endTransaction();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Demo:<br>该程序提供两个文本框，用户可以在这两个文本框中输入内容，当用户点击“插入”按钮时这两个文本框的内容将会被插入数据库。</p>
<p>效果：<br><img src="http://img.blog.csdn.net/20150914092224095" alt="这里写图片描述"></p>
<p>代码：<br><strong>main.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	android:orientation=&quot;vertical&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">&lt;EditText </div><div class="line">	android:id=&quot;@+id/title&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot; </div><div class="line">	android:layout_height=&quot;wrap_content&quot; </div><div class="line">	/&gt;</div><div class="line">&lt;EditText  </div><div class="line">	android:id=&quot;@+id/content&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot; </div><div class="line">	android:layout_height=&quot;wrap_content&quot; </div><div class="line">	android:lines=&quot;2&quot;</div><div class="line">	/&gt;	</div><div class="line">&lt;Button  </div><div class="line">	android:id=&quot;@+id/ok&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot; </div><div class="line">	android:layout_height=&quot;wrap_content&quot; </div><div class="line">	android:text=&quot;@string/insert&quot;</div><div class="line">	/&gt;</div><div class="line">&lt;ListView  </div><div class="line">	android:id=&quot;@+id/show&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot; </div><div class="line">	android:layout_height=&quot;match_parent&quot; </div><div class="line">	/&gt;			</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p><strong>line.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	android:orientation=&quot;horizontal&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">&lt;EditText </div><div class="line">	android:id=&quot;@+id/my_title&quot;</div><div class="line">	android:layout_width=&quot;wrap_content&quot; </div><div class="line">	android:layout_height=&quot;wrap_content&quot; </div><div class="line">	android:width=&quot;120dp&quot;</div><div class="line">	/&gt;</div><div class="line">&lt;EditText  </div><div class="line">	android:id=&quot;@+id/my_content&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot; </div><div class="line">	android:layout_height=&quot;wrap_content&quot; </div><div class="line">	/&gt;	</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">package org.crazyit.db;</div><div class="line"></div><div class="line">import android.app.Activity;</div><div class="line">import android.database.Cursor;</div><div class="line">import android.database.sqlite.SQLiteDatabase;</div><div class="line">import android.database.sqlite.SQLiteException;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.view.View.OnClickListener;</div><div class="line">import android.widget.Button;</div><div class="line">import android.widget.CursorAdapter;</div><div class="line">import android.widget.EditText;</div><div class="line">import android.widget.ListView;</div><div class="line">import android.widget.SimpleCursorAdapter;</div><div class="line"></div><div class="line"></div><div class="line">public class MainActivity extends Activity</div><div class="line">&#123;</div><div class="line">	SQLiteDatabase db;</div><div class="line">	Button bn = null;</div><div class="line">	ListView listView;</div><div class="line">	@Override</div><div class="line">	public void onCreate(Bundle savedInstanceState)</div><div class="line">	&#123;</div><div class="line">		super.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		// 创建或打开数据库（此处需要使用绝对路径）</div><div class="line">		db = SQLiteDatabase.openOrCreateDatabase(</div><div class="line">				this.getFilesDir().toString()</div><div class="line">						+ &quot;/my.db3&quot;, null); // ①</div><div class="line">		listView = (ListView) findViewById(R.id.show);</div><div class="line">		bn = (Button) findViewById(R.id.ok);</div><div class="line">		bn.setOnClickListener(new OnClickListener()</div><div class="line">		&#123;</div><div class="line">			@Override</div><div class="line">			public void onClick(View source)</div><div class="line">			&#123;</div><div class="line">				// 获取用户输入</div><div class="line">				String title = ((EditText) findViewById(</div><div class="line">						R.id.title)).getText().toString();</div><div class="line">				String content = ((EditText) findViewById(R.id.content))</div><div class="line">						.getText().toString();</div><div class="line">				try</div><div class="line">				&#123;</div><div class="line">					insertData(db, title, content);</div><div class="line">					Cursor cursor = db.rawQuery(&quot;select * from news_inf&quot;</div><div class="line">							, null);</div><div class="line">					inflateList(cursor);</div><div class="line">				&#125;</div><div class="line">				catch (SQLiteException se)</div><div class="line">				&#123;</div><div class="line">					//如果数据库中不包含数据表，则创建数据库表。</div><div class="line">					// 执行DDL创建数据表</div><div class="line">					db.execSQL(&quot;create table news_inf(_id integer&quot;</div><div class="line">							+ &quot; primary key autoincrement,&quot;</div><div class="line">							+ &quot; news_title varchar(50),&quot;</div><div class="line">							+ &quot; news_content varchar(255))&quot;);</div><div class="line">					// 执行insert语句插入数据</div><div class="line">					insertData(db, title, content);</div><div class="line">					// 执行查询</div><div class="line">					Cursor cursor = db.rawQuery(&quot;select * from news_inf&quot;</div><div class="line">							, null);</div><div class="line">					//使用ListView将查询结果显示出来。</div><div class="line">					inflateList(cursor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	private void insertData(SQLiteDatabase db</div><div class="line">			, String title, String content)  // ②</div><div class="line">	&#123;</div><div class="line">		// 执行插入语句</div><div class="line">		db.execSQL(&quot;insert into news_inf values(null , ? , ?)&quot;</div><div class="line">				, new String[] &#123;title, content &#125;);</div><div class="line">	&#125;</div><div class="line">	private void inflateList(Cursor cursor)</div><div class="line">	&#123;</div><div class="line">		// 填充SimpleCursorAdapter</div><div class="line">		SimpleCursorAdapter adapter = new SimpleCursorAdapter(</div><div class="line">				MainActivity.this,</div><div class="line">				R.layout.line, cursor,</div><div class="line">				new String[] &#123; &quot;news_title&quot;, &quot;news_content&quot; &#125;</div><div class="line">				, new int[] &#123;R.id.my_title, R.id.my_content &#125;,</div><div class="line">				// ③</div><div class="line">				//将cousor封装成SimpleCursorAdapter</div><div class="line">				CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);  </div><div class="line">		// 显示数据</div><div class="line">		listView.setAdapter(adapter);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public void onDestroy()</div><div class="line">	&#123;</div><div class="line">		super.onDestroy();</div><div class="line">		// 退出程序时关闭SQLiteDatabase</div><div class="line">		if (db != null &amp;&amp; db.isOpen())</div><div class="line">		&#123;</div><div class="line">			db.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序中③号粗体字代码用于将Cursor封装成SimpleCursorAdapter，这个SimpleCursorAdapter实现了Adapter接口，因此可以作为ListView或GridView的内容适配器。</p>
<p>SimpleCursorAdapter的构造器参数与SimpleAdapter的构造器参数大致相同，区别是SimpleAdapter负责封装集合元素的为Map的List，而SimpleCursorAdapter负责封装Cursor——如果我们把Cursor里的结果集当成List集合，Cursor里的每一行当成Map处理(以数据列的列名为key,数据列的值为value),那么SimpleCursorAdapter与SimpleAdapter就统一起来了。</p>
<p>运行上面程序即可生成数据库文件，如下图：<br><img src="http://img.blog.csdn.net/20150914104224522" alt="这里写图片描述"></p>
<p>将my.db3数据库文件导出，用SQLite管理工具打开即可。<br><a href="http://www.oschina.net/news/43608/5-popular-and-free-sqlite-management-tools" target="_blank" rel="external">5 个免费的受欢迎的 SQLite 管理工具</a></p>
<p>打开my.db3数据库，如下图所示：<br><img src="http://img.blog.csdn.net/20150914104507518" alt="这里写图片描述"></p>
<hr>
<h2 id="三-SQLiteOpenHelper类"><a href="#三-SQLiteOpenHelper类" class="headerlink" title="三.SQLiteOpenHelper类"></a>三.SQLiteOpenHelper类</h2><p>在上面的Demo程序中，我们为了判断底层数据库是否包含news_inf数据表，采用的处理方法十分繁琐：程序先尝试向news_inf数据表中插入记录，如果程序抛出异常，在异常捕获的catch块中创建news_inf数据表，然后在插入记录，那么是否有一种更优雅的方式来处理这种问题呢？有Android提供了SQLiteOpenHelper类来处理这种问题。</p>
<p>在实际项目中很少使用SQLiteDatabase的方法来打开数据库，通常会继承SQLiteOpenHelper开发子类，并通过该子类的getReadableDatabase()、getWritableDatabase()方法打开数据库。</p>
<p>SQLiteOpenHelper是Android提供的一个管理数据库的工具类，可用于管理数据库的创建和版本更新。一般用法是创建SQLiteOpenHelper的子类，并扩展它的onCreate(SQLiteDatabase db)、onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion)方法。</p>
<p>SQLiteOpenHelper包含如下常用方法。</p>
<ul>
<li>synchronized SQLiteDatabase getReadableDatabase():以读写的方式打开数据库对应的SQLiteDatabase对象。</li>
<li>synchronized SQLiteDatabase getWritableDatabase():以写的方式打开数据库对应的SQLiteDatabase对象。</li>
<li>abstract void onCreate(SQLiteDatabase db):用于初次使用软件时生成数据库表。当调用SQLiteOpenHelper的getReadableDatabase()或getWritableDatabase()方法用于获取操作数据库的SQLiteDatabase实例时，如果数据库不存在，Android系统会自动生成一个数据库，接着调用onCreate()方法，onCreate()方法在初次生成数据库时才会调用。重写onCreate()方法时，可以生成数据库表结构，以添加应用使用到的一些初始化数据。</li>
<li>abstract void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion):用于升级软件时更新数据库表结构，此方法在数据库的版本发生变化时会调用，该方法调用时oldVersion代表之前的版本号，newVersion代表数据库当前的版本号。那么在哪里指定数据库的版本号呢？当程序创建SQLiteOpenHelper对象时，必须执行一个version参数，该参数就决定了所使用的版本号——也就是说，数据库的版本号是由程序员控制的。只要某次创建SQLiteOpenHelper时指定的数据库的版本号高于之前指定的版本号，系统会自动触发onUpgrade()方法，程序就可以在onUpgrade()方法里面根据原版本号和目标版本号进行判断，即可根据版本号进行必须的表结构更新。</li>
<li>synchronized void close():关闭所有打开的SQLiteDatabase对象。</li>
</ul>
<p>一旦获得了SQLiteOpenHelper对象之后，程序无需使用SQLiteDatabase的静态方法创建SQLiteDatabase实例，而且可以使用getWritableDatabase()或getReadableDatabase()方法来获取一个用于操作数据库的SQLiteDatabase实例。</p>
<p><strong><em>Demo:英文生词本</em></strong><br>允许用户将自己不熟悉的单词添加到系统数据库中，当用户需要查询某个单词或解释时，只要在程序中输入相应的关键词，程序中相应的条目就会显示出来。</p>
<p>效果：<br><img src="http://img.blog.csdn.net/20150914165817870" alt="这里写图片描述"></p>
<p>代码：<br>界面布局文件我就不写了。<br><strong><em>MyDatabaseHelper.java</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.example.sqliteopenhelper;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.database.sqlite.SQLiteDatabase;</div><div class="line">import android.database.sqlite.SQLiteOpenHelper;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by songxitang on 2015/9/14.</div><div class="line"> */</div><div class="line">public class MyDatabaseHelper extends SQLiteOpenHelper </div><div class="line">&#123;</div><div class="line">    final String CREATE_TABLE_SQL = &quot;create table dict(_id integer primary &quot;+</div><div class="line">            &quot;key autoincrement,word,detail)&quot;;</div><div class="line"></div><div class="line">    public MyDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) </div><div class="line">    &#123;</div><div class="line">        super(context, name, factory, version);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(SQLiteDatabase db)</div><div class="line">    &#123;</div><div class="line">	    //第一次使用数据库时自动建表。</div><div class="line">        db.execSQL(CREATE_TABLE_SQL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) </div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;---onUpgrade Called---: &quot;+oldVersion+&quot;---&gt;&quot;+newVersion);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>MainActivity.java</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">package com.example.sqliteopenhelper;</div><div class="line"></div><div class="line">import android.app.Activity;</div><div class="line">import android.content.Intent;</div><div class="line">import android.database.Cursor;</div><div class="line">import android.database.sqlite.SQLiteDatabase;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.Menu;</div><div class="line">import android.view.MenuItem;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.Button;</div><div class="line">import android.widget.EditText;</div><div class="line">import android.widget.Toast;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class MainActivity extends Activity</div><div class="line">&#123;</div><div class="line">    MyDatabaseHelper dbHelper;</div><div class="line">    Button insert;</div><div class="line">    Button search;</div><div class="line">    EditText word;</div><div class="line">    EditText detail;</div><div class="line">    EditText key;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState)</div><div class="line">    &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		//创建MyDatabaseHelper对象，指定数据库的版本为1，此处使用相对路径即可</div><div class="line">		//数据库文件会自动保存在程序的数据文件夹的databases目录下。</div><div class="line">        dbHelper = new MyDatabaseHelper(this,&quot;myDict.db3&quot;,null,1);</div><div class="line">        insert = (Button) findViewById(R.id.insert);</div><div class="line">        search = (Button) findViewById(R.id.search);</div><div class="line">        word = (EditText) findViewById(R.id.word);</div><div class="line">        detail = (EditText) findViewById(R.id.detail);</div><div class="line">        key = (EditText) findViewById(R.id.key);</div><div class="line"></div><div class="line">        insert.setOnClickListener(new View.OnClickListener()</div><div class="line">        &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v)</div><div class="line">            &#123;</div><div class="line">	            //获取用户输入</div><div class="line">                String sWord = word.getText().toString();</div><div class="line">                String sDetail = detail.getText().toString();</div><div class="line">//插入生词记录                insertData(dbHelper.getReadableDatabase(),sWord,sDetail);</div><div class="line">//显示提示信息              Toast.makeText(getApplicationContext(),&quot;Insert Word Successful&quot;,</div><div class="line">                        Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        search.setOnClickListener(new View.OnClickListener()</div><div class="line">        &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v)</div><div class="line">            &#123;</div><div class="line">	            //获取用户输入</div><div class="line">                String sKey = key.getText().toString();</div><div class="line">                //执行查询</div><div class="line">                Cursor cursor = dbHelper.getReadableDatabase().rawQuery(&quot;&quot; +</div><div class="line">                                &quot;select * from dict where word like ? or detail like ?&quot;,</div><div class="line">                        new String[]&#123;&quot;%&quot; + sKey + &quot;%&quot;, &quot;%&quot; + key + &quot;%&quot;&#125;);</div><div class="line">                //创建一个Bundle对象</div><div class="line">                Bundle data = new Bundle();</div><div class="line">                data.putSerializable(&quot;data&quot;,converCursorToList(cursor));</div><div class="line">                //创建一个intent</div><div class="line">                Intent intent = new Intent(MainActivity.this,ResultActivity.class);</div><div class="line">                intent.putExtras(data);</div><div class="line">                //启动Activity</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private ArrayList&lt;Map&lt;String, String&gt;&gt; converCursorToList(Cursor cursor)</div><div class="line">    &#123;</div><div class="line">        ArrayList&lt;Map&lt;String,String&gt;&gt; result = new ArrayList&lt;&gt;();</div><div class="line">        //遍历Cursor结果集</div><div class="line">        while (cursor.moveToNext())</div><div class="line">        &#123;</div><div class="line">	        //将结果集中的数据存入ArrayList中</div><div class="line">            Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</div><div class="line">            //取出查询记录中第2列和第3列的值</div><div class="line">            map.put(&quot;word&quot;,cursor.getString(1));</div><div class="line">            map.put(&quot;detail&quot;,cursor.getString(2));</div><div class="line">            result.add(map);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void insertData(SQLiteDatabase db, String word, String detail)</div><div class="line">    &#123;</div><div class="line">	    //执行插入语句</div><div class="line">        db.execSQL(&quot;insert into dict values(null,?,?)&quot;</div><div class="line">                ,new String[]&#123;word,detail&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy()</div><div class="line">    &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        //退出程序是关闭数据库</div><div class="line">        if (dbHelper != null)</div><div class="line">        &#123;</div><div class="line">            dbHelper.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>ResultActivity.java</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.example.sqliteopenhelper;</div><div class="line"></div><div class="line">import android.app.Activity;</div><div class="line">import android.content.Intent;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.Menu;</div><div class="line">import android.view.MenuItem;</div><div class="line">import android.widget.ListView;</div><div class="line">import android.widget.SimpleAdapter;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class ResultActivity extends Activity</div><div class="line">&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState)</div><div class="line">    &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_result);</div><div class="line"></div><div class="line">        ListView listView = (ListView) findViewById(R.id.show);</div><div class="line">        Intent intent = getIntent();</div><div class="line">        //获取该intent所携带的数据</div><div class="line">        Bundle data = intent.getExtras();</div><div class="line">        //从Bundle数据包中取出数据</div><div class="line">        List&lt;Map&lt;String,String&gt;&gt; list = (List&lt;Map&lt;String, String&gt;&gt;) data.getSerializable(&quot;data&quot;);</div><div class="line">        //将List封装成SimpleAdapter</div><div class="line">        SimpleAdapter adapter = new SimpleAdapter(ResultActivity.this,list,R.layout.line,</div><div class="line">                new String[]&#123;&quot;word&quot;,&quot;detail&quot;&#125;,new int[]&#123;R.id.word,R.id.detail&#125;);</div><div class="line">        //填充ListView</div><div class="line">        listView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的ResultActivity只是一个普通的Activity，但是我们在AndroidManifest.xml文件中将该Activity设为对话框风格的Activity，这样就可让应用程序已对话框来显示查询结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">        android:name=&quot;.ResultActivity&quot;</div><div class="line">        android:label=&quot;@string/title_activity_result&quot;</div><div class="line">	//以对话框模式来显示Activity。</div><div class="line">        android:theme=&quot;@android:style/Theme.Material.Dialog&quot;&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>默认生成的数据库文件存放位置：<br><img src="http://img.blog.csdn.net/20150914183228976" alt="这里写图片描述"></p>
<p>数据库文件内容：<br><img src="http://img.blog.csdn.net/20150914183604507" alt="这里写图片描述"></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之AdapterView及子类]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BAdapterView%E5%8F%8A%E5%AD%90%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>AdapterView具有如下特征：</p>
<ul>
<li>AdapterView继承了ViewGroup，它的本质是容器。</li>
<li>AdapterView可以包括多个“列表项”以合适的形式显示出来。</li>
<li>AdapterView显示的多个“列表项”由Adapter提供。调用AdapterView的setAdapter(Adapter)方法设置Adapter即可。</li>
</ul>
<p>AdapterView及其子类的继承关系图如下图所示：<br><img src="http://img.blog.csdn.net/20151130092808596" alt="AdapterView及其子类继承关系图"></p>
<p>从上图中不难看出，AdapterView派生了3个子类：ABSListView、ABSSpinner和AdapterViewAnimator，这3个子类依然是抽象的，实际使用时往往采用它们的子类。</p>
<p>注意：由于Gallery是一个已经过时的API，Android推荐使用HorizontalScrollView来代替它。</p>
<p>参考自《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之ListView和ListActivity--ArrayAdapter]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BListView%E5%92%8CListActivity-ArrayAdapter/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>ListView以垂直列表的形式显示所有的列表项。<br>生成列表视图有如下两种方式：</p>
<ul>
<li>直接使用ListView进行创建。</li>
<li>让Activity继承ListActivity(相当于该Activity显示的)。</li>
</ul>
<p>一旦程序获得了ListView之后，接下来就需要为ListView设置它要显示的列表项了。在这一点上ListView显示出AdapterView的特征：通过setAdapter(Adapter)方法为之提供Adapter，并由Adapter提供列表项即可。</p>
<p><strong><em>提示</em></strong>：ListView、GridView、Spinner、Gallery等都只是容器，而Adapter负责提供每个“列表项”的组件，AdapterView则负责采用合适的方式显示这些列表项。</p>
<p>AbsListView提供的常用XML属性及相关方法如下表所示：<br><img src="http://img.blog.csdn.net/20151130095751962" alt="AbsListView提供的常用XML属性及相关方法"></p>
<p>ListView提供的常用XML属性如下表所示：<br><img src="http://img.blog.csdn.net/20151130095907921" alt="ListView提供的常用XML属性"></p>
<p>Demo：改变分隔条、基于数组的ListView。<br>程序清单：<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;!--直接使用数组资源给出列表项--&gt;</div><div class="line">    &lt;!--设置使用红色的分隔符--&gt;</div><div class="line">    &lt;ListView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:divider=&quot;#f00&quot;</div><div class="line">        android:dividerHeight=&quot;2px&quot;</div><div class="line">        android:headerDividersEnabled=&quot;false&quot;</div><div class="line">        android:entries=&quot;@array/books&quot;&gt;&lt;/ListView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>arrays.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;string-array name=&quot;books&quot;&gt;</div><div class="line">        &lt;item&gt;Hello Java&lt;/item&gt;</div><div class="line">        &lt;item&gt;Hello JavaWeb&lt;/item&gt;</div><div class="line">        &lt;item&gt;Hello Android&lt;/item&gt;</div><div class="line">        &lt;item&gt;Hello Python&lt;/item&gt;</div><div class="line">    &lt;/string-array&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.example.simplelistviewtest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显示效果如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20151130102752157" alt="这里写图片描述"></p>
<p>使用数组创建ListView十分简单，但这种ListView能定制的内容很少，甚至连每个列表项的字号大小、颜色都不能改变。</p>
<p>如果想对ListView的外观、行为进行定制，就需要把ListView作为AdapterVeiw使用，通过Adapter控制每个列表项的外观和行为。</p>
<hr>
<h2 id="Adapter接口及实现类"><a href="#Adapter接口及实现类" class="headerlink" title="Adapter接口及实现类"></a>Adapter接口及实现类</h2><p>Adapter本身只是一个接口，它派生了ListAdapter和SpinnerAdapter两个子接口，其中ListAdapter为AbsListView提供列表项，而SpinnerAdapter为AbsSpinner提供列表项。Adapter接口及其实现类的继承关系图如下：</p>
<p><img src="http://img.blog.csdn.net/20151130110705121" alt="这里写图片描述"></p>
<p>从图中可以看出，BaseAdapter同时实现了ListAdapter、SpinnerAdapter两个接口，因此BaseAdapter及其子类可以同时为AbsListView、AbsSpinner提供列表项。</p>
<p>Adapter常用的实现类如下：</p>
<ul>
<li>ArrayAdapter：简单、易用的Adapter，通常用于将数组或List集合的多个<strong>值</strong>包装成列表项。</li>
<li>SimpleAdapter：并不简单、功能强大的Adapter，可以用于将List集合的多个<strong>对象</strong>包装成多个列表项。</li>
<li>SimpleCursorAdapter：与SimpleAdapter基本相似，只是用于包装Cursor提供的数据。</li>
<li>BaseAdapter：通常用于被扩展。扩展BaseAdapter可以对各列表项进行最大限度的定制。</li>
</ul>
<p>Demo：使用ArrayAdapter创建ListView。</p>
<p>在界面布局文件中定义两个ListView。<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--使用红色的分隔条--&gt;</div><div class="line">    &lt;ListView</div><div class="line">        android:id=&quot;@+id/listview_one&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:divider=&quot;#f00&quot;</div><div class="line">        android:dividerHeight=&quot;2px&quot;</div><div class="line">        android:headerDividersEnabled=&quot;false&quot;&gt;</div><div class="line">    &lt;/ListView&gt;</div><div class="line"></div><div class="line">    &lt;!--使用绿色的分隔条--&gt;</div><div class="line">    &lt;ListView</div><div class="line">        android:id=&quot;@+id/listview_two&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:divider=&quot;#0f0&quot;</div><div class="line">        android:dividerHeight=&quot;2px&quot;</div><div class="line">        android:headerDividersEnabled=&quot;false&quot;&gt;</div><div class="line">    &lt;/ListView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面的界面布局文件中定义了两个ListView，但这两个ListView都没有指定android:entries属性，这意味着它们都需要通过Adapter来提供列表项。</p>
<p>接下来Activity为两个ListView提供Adapter，Adapter决定ListView所显示的列表项。程序如下。<br>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.example.arrayadaptertest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ArrayAdapter;</div><div class="line">import android.widget.ListView;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ListView listViewOne = (ListView) findViewById(R.id.listview_one);</div><div class="line">        //定义一个数组</div><div class="line">        String[] arr1 = &#123;&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;牛魔王&quot;&#125;;</div><div class="line">        //将数组包装为ArrayAdapter</div><div class="line">        ArrayAdapter&lt;String&gt; arrayAdapterOne = new ArrayAdapter&lt;String&gt;</div><div class="line">                (this,R.layout.array_item,arr1);</div><div class="line">        //为ListView设置Adapter</div><div class="line">        listViewOne.setAdapter(arrayAdapterOne);</div><div class="line"></div><div class="line">        ListView listViewTwo = (ListView) findViewById(R.id.listview_two);</div><div class="line">        String[] arr2 = &#123;&quot;Java&quot;,&quot;Android&quot;,&quot;Python&quot;,&quot;Scala&quot;&#125;;</div><div class="line">        ArrayAdapter&lt;String&gt; arrayAdapterTwo = new ArrayAdapter&lt;String&gt;</div><div class="line">                (this,R.layout.array_item,arr2);</div><div class="line">        listViewTwo.setAdapter(arrayAdapterTwo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建ArrayAdapter时必须指定如下三个参数：</p>
<ul>
<li>Context：这个参数无需多说，它代表了访问整个Android应用的接口。几乎创建所有组件都需要传入Context对象。</li>
<li>textViewResourceId：一个资源ID，该资源ID代表一个TextView，该TextView组件将作为ArrayAdapter的列表项组件。</li>
<li>数组或List：该数组或List将负责为多个列表项提供数据。</li>
</ul>
<p>不难看出，创建ArrayAdapter时传入的第二个参数控制每个列表项的组件，第三个参数则负责为列表项提供数据。该数组或List包含多少个元素，就将生成多少个列表项，每个列表项都是TextView组件，TextView组件显示的文本由数组或List元素提供。</p>
<p>以第一个ArrayAdapter为例，该ArrayAdapter对应的数组为{“孙悟空”,”猪八戒”,”牛魔王”}，该数组将会负责生成一个包含三个列表项的ArrayAdapter，每个列表项的组件外观由R.layout.array_item布局文件(该布局文件只是一个TextView组件)控制，第一个TextView列表项显示的文本为“孙悟空”，第二个列表项显示的文本为“猪八戒”……</p>
<p>array_item.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:id=&quot;@+id/textview&quot;</div><div class="line">    android:textSize=&quot;24dp&quot;</div><div class="line">    android:padding=&quot;10px&quot;</div><div class="line">    android:shadowColor=&quot;#f0f&quot;</div><div class="line">    android:shadowDx=&quot;4&quot;</div><div class="line">    android:shadowDy=&quot;4&quot;</div><div class="line">    android:shadowRadius=&quot;2&quot;&gt;</div><div class="line">&lt;/TextView&gt;</div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="http://img.blog.csdn.net/20151130151849614" alt="这里写图片描述"></p>
<p><strong><em>Demo:基于ListActivity实现列表。</em></strong></p>
<p>如果程序窗口仅仅需要显示一个列表，则可以直接让Activity继承ListActivity类实现，ListActivity的子类无须调用setContentView()方法来显示某个界面，而是可以直接传入一个内容Adapter，ListActivity的子类就呈现出一个列表。<br>例如如下程序：<br>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.example.listactivitytest;</div><div class="line"></div><div class="line">import android.app.ListActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ArrayAdapter;</div><div class="line"></div><div class="line">public class MainActivity extends ListActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        //无须使用布局文件</div><div class="line">        String[] arr = &#123;&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;唐僧&quot;&#125;;</div><div class="line">        //创建ArrayAdapter对象</div><div class="line">        ArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;String&gt;</div><div class="line">                (this,android.R.layout.simple_list_item_multiple_choice,arr);</div><div class="line">        //设置该窗口显示列表</div><div class="line">        setListAdapter(arrayAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面程序的Activity继承了ListActivity，ListActivity无须界面布局文件——相当于它的布局文件只有一个ListView，因此，只要为ListActivity设置Adapter即可。上面程序使用Android默认提供的android.R.layout.simple_list_item_multiple_choice布局文件作为列表项组件，当然，也可以自定义这个布局文件。</p>
<p>运行效果如下：</p>
<p><img src="http://img.blog.csdn.net/20151130153450688" alt="这里写图片描述"></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之列表视图（LitView）--SimpleAdapter]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E5%88%97%E8%A1%A8%E8%A7%86%E5%9B%BE%EF%BC%88LitView%EF%BC%89-SimpleAdapter/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>通过ArrayAdapter实现Adapter虽然简单、易用，但ArrayAdapter的功能比较有限，它的每个列表项只能是TextView。如果开发者需要实现更多复杂的列表项，则可以考虑使用SimpleAdapter.</p>
<p>不要被SimpleAdapter的名字欺骗了，SimpleAdapter并不简单，而且它的功能非常强大。ListView的大部分应用场景，都可以通过SimpleAdapter来提供列表项。</p>
<p>下面先定义界面布局文件。<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;&gt;</div><div class="line"></div><div class="line">    &lt;ListView</div><div class="line">        android:id=&quot;@+id/listview&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">    &lt;/ListView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面的界面布局文件定义了一个ListView，该ListView将会显示有SimpleAdapter提供的列表项。</p>
<p>下面是Activity代码：<br>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.example.simpleadaptertest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ListView;</div><div class="line">import android.widget.SimpleAdapter;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    //定义所有列表项中的数据：头像，名字，描述</div><div class="line">    private int[] imageIds = new int[]</div><div class="line">            &#123;R.drawable.tiger,R.drawable.nongyu</div><div class="line">                    ,R.drawable.qingzhao,R.drawable.libai&#125;;</div><div class="line">    private String[] names = new String[]</div><div class="line">            &#123;&quot;虎头&quot;,&quot;弄玉&quot;,&quot;李清照&quot;,&quot;李白&quot;&#125;;</div><div class="line">    private String[] descs = new String[]</div><div class="line">            &#123;&quot;可爱的小孩&quot;,&quot;一个擅长音乐的女孩&quot;,</div><div class="line">            &quot;一个擅长文学的女性&quot;,&quot;浪漫主义诗人&quot;&#125;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        //创建一个List集合(表示所有列表项)，List集合的元素是Map(代表一个列表项)</div><div class="line">        List&lt;Map&lt;String,Object&gt;&gt; listItems = new ArrayList&lt;&gt;();</div><div class="line">        for (int i=0; i&lt;names.length; i++)</div><div class="line">        &#123;</div><div class="line">            Map&lt;String,Object&gt; listItem = new HashMap&lt;&gt;();</div><div class="line">            listItem.put(&quot;header&quot;,imageIds[i]);</div><div class="line">            listItem.put(&quot;personName&quot;,names[i]);</div><div class="line">            listItem.put(&quot;desc&quot;,descs[i]);</div><div class="line">            listItems.add(listItem);</div><div class="line">        &#125;</div><div class="line">        //创建一个SimpleAdapter</div><div class="line">        SimpleAdapter simpleAdapter = new SimpleAdapter(this,listItems,//所有列表项。</div><div class="line">                R.layout.simple_item,//布局文件。</div><div class="line">                new String[]&#123;&quot;header&quot;,&quot;personName&quot;,&quot;desc&quot;&#125;,//上面Map对象中的Key。</div><div class="line">                new int[]&#123;R.id.imageview_header,R.id.textview_name,</div><div class="line">                        R.id.textview_desc&#125;);//列表项中要填充的组件ID。</div><div class="line">        ListView listView = (ListView) findViewById(R.id.listview);</div><div class="line">        //为ListView设置Adapter</div><div class="line">        listView.setAdapter(simpleAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用SimpleAdapter的最大难点在于创建SimpleAdapter对象，它需要5个参数，其中后面4个参数十分关键：</p>
<ul>
<li>第2个参数：该参数应该是一个List&lt; ?extends Map&lt; String,?&gt;&gt;类型的集合对象，该集合中的每个Map&lt; String,?&gt;对象生成一个列表。</li>
<li>第3个参数：该参数指定一个界面布局的ID。该界面布局文件作为列表项组件。</li>
<li>第4个参数：该参数应该是一个String[ ]类型的参数，该参数决定提取Map&lt; String,?&gt;对象中那些key对应的value来生成列表项。</li>
<li>第5个参数：该参数决定填充那些组件。<br>从上面程序看，listIterms是一个长度为4的集合，这意味着它生成的ListView将会包含4个列表项，每个列表项都是R.layout.simple_item对相的组件(也就是一个LinearLayout组件)。LinearLayout中包含了3个组件：ID为R.id.imageview_header的ImageView组件、ID为R.id.textview_name和R.id.textview_desc的TextView组件，这些组件的内容有listItems集合提供。</li>
</ul>
<p>R.laylout.simple_item对应的布局文件代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">    &lt;!--定义一个ImageView，用于作为列表项的一部分--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/imageview_header&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:paddingLeft=&quot;10dp&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;&gt;</div><div class="line">        &lt;!--定义一个TextView，用作列表项的一部分--&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview_name&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:paddingLeft=&quot;10dp&quot;</div><div class="line">            android:textColor=&quot;#f0f&quot;</div><div class="line">            android:textSize=&quot;20dp&quot; /&gt;</div><div class="line">        &lt;!--定义一个TextView，用作列表项的一部分--&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview_desc&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:paddingLeft=&quot;10dp&quot;</div><div class="line">            android:textSize=&quot;14dp&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<p><img src="http://img.blog.csdn.net/20151130182613938" alt="这里写图片描述"></p>
<p>SimpleAdapter同样可以作为ListActivity的内容Adapter，这样可以让用户方面的定制ListActivity所显示的列表项。</p>
<p>如果需要监听用户单击、选中某个列表项的事件，则可以通过AdapterView的setOnItemClickListener()方法为单击事件添加监听器，或者通过setOnItemSelectedListener()方法为列表项的选中事件添加监听器。</p>
<p><strong>总结</strong>：<br>ArrayAdapter与SimpleAdapter的区别：</p>
<ul>
<li>ArrayAdapter中的每个列表项的组件只能是TextView且每个列表项中只能添冲一个值。故不能设计复杂的列表项。</li>
<li>SimpleAdapter中每个列表项中可包含多个不同的组件，故每个列表项中可添加多个值，故可设计复杂的列表项。</li>
</ul>
<p>参考自：《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之列表视图（LstView）--BaseAdapter]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E5%88%97%E8%A1%A8%E8%A7%86%E5%9B%BE%EF%BC%88LstView%EF%BC%89-BaseAdapter/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>通过扩展BaseAdapter可以取得Adapter最大的控制权：程序要创建多少个列表项，每个列表项的组件都由开发者来决定。</p>
<p>本实例的布局文件非常简单，布局文件中只包含一个简单的ListView，布局文件代码如下：<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">   &gt;</div><div class="line">    &lt;ListView</div><div class="line">        android:id=&quot;@+id/listview&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;/ListView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>该实例的Activity将会扩展BaseAdapter来实现Adapter对象，Activity代码如下：<br>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package com.example.baseadaptertest;</div><div class="line"></div><div class="line">import android.graphics.Color;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.BaseAdapter;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.LinearLayout;</div><div class="line">import android.widget.ListView;</div><div class="line">import android.widget.TextView;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    ListView listView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        listView = (ListView) findViewById(R.id.listview);</div><div class="line"></div><div class="line">        BaseAdapter baseAdapter = new BaseAdapter() &#123;</div><div class="line">            @Override</div><div class="line">            public int getCount() &#123;</div><div class="line">                //指定一共包含20个选项。</div><div class="line">                return 20;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public Object getItem(int position) &#123;</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //重写该方法，该方法返回值将作为列表项的ID</div><div class="line">            @Override</div><div class="line">            public long getItemId(int position) &#123;</div><div class="line">                //position从0开始</div><div class="line">                return position+1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //重写该方法，该方法返回的View将作为列表项</div><div class="line">            @Override</div><div class="line">            public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">                //创建一个LinearLayout，并向其中添加两个组件</div><div class="line">                LinearLayout linearLayout = new LinearLayout(MainActivity.this);</div><div class="line">                linearLayout.setOrientation(LinearLayout.HORIZONTAL);</div><div class="line"></div><div class="line">                ImageView imageView = new ImageView(MainActivity.this);</div><div class="line">                imageView.setImageResource(R.drawable.ic_launcher);</div><div class="line"></div><div class="line">                TextView textView = new TextView(MainActivity.this);</div><div class="line">//                textView.setText(&quot;第&quot;+(position+1)+&quot;个列表项&quot;);</div><div class="line">                textView.setText(&quot;第&quot;+getItemId(position)+&quot;个列表项&quot;);</div><div class="line">                textView.setTextSize(20);</div><div class="line">                textView.setTextColor(Color.RED);</div><div class="line"></div><div class="line">                linearLayout.addView(imageView);</div><div class="line">                linearLayout.addView(textView);</div><div class="line"></div><div class="line">                //返回LinearLayout实例</div><div class="line">                return linearLayout;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        listView.setAdapter(baseAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面程序创建了一个BaseAdapter对象，扩展该对象需要重写如下4个方法：</p>
<ul>
<li>getCount：该方法的返回值控制该Adapter将会包含多少个列表项。</li>
<li>getItem(int position)：该方法的返回值决定第position处的列表项的内容(position从0开始)。</li>
<li>getItemId(int position)：该方法的返回值决定第position处列表项的ID(position从0开始)。</li>
<li>getView(int positon,View convertView,ViewGroup parent)：该方法的返回值决定第position处的列表项组件(position从0开始)。</li>
</ul>
<p>上面方法中最重要的是第1个和第4个。</p>
<p>运行上面程序效果如下：</p>
<p><img src="http://img.blog.csdn.net/20151130192310420" alt="这里写图片描述"></p>
<p>可能你还没认识到BaseAdapter的强大，现在让我们用扩展的BaseAdapter实现上一节<a href="http://blog.csdn.net/u011026329/article/details/50115613" target="_blank" rel="external">列表视图(ListView)——SimpleAdapter</a>中的Demo：</p>
<p>主布局文件(activity_main.xml)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    &gt;</div><div class="line">    &lt;ListView</div><div class="line">        android:id=&quot;@+id/listview&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;/ListView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>扩展的BaseAdapter–TestAdapter：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.example.baseadapterdemo.Adapter;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.BaseAdapter;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line"></div><div class="line">import com.example.baseadapterdemo.R;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by songxitang on 2015/11/30.</div><div class="line"> */</div><div class="line">public class TestAdapter extends BaseAdapter &#123;</div><div class="line">    protected Context mContext;</div><div class="line">    protected LayoutInflater mLayoutInfater;</div><div class="line"></div><div class="line">    //定义所有列表项中的数据：头像，名字，描述</div><div class="line">    private int[] imageIds = new int[]</div><div class="line">            &#123;R.drawable.tiger,R.drawable.nongyu</div><div class="line">                    ,R.drawable.qingzhao,R.drawable.libai&#125;;</div><div class="line">    private String[] names = new String[]</div><div class="line">            &#123;&quot;虎头&quot;,&quot;弄玉&quot;,&quot;李清照&quot;,&quot;李白&quot;&#125;;</div><div class="line">    private String[] descs = new String[]</div><div class="line">            &#123;&quot;可爱的小孩&quot;,&quot;一个擅长音乐的女孩&quot;,</div><div class="line">                    &quot;一个擅长文学的女性&quot;,&quot;浪漫主义诗人&quot;&#125;;</div><div class="line"></div><div class="line">    public TestAdapter(Context mContext) &#123;</div><div class="line">        this.mContext = mContext;</div><div class="line">        mLayoutInfater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return 4;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getItem(int position) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getItemId(int position) &#123;</div><div class="line">        return position+1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">        if (convertView == null)</div><div class="line">        &#123;</div><div class="line">            convertView = mLayoutInfater.inflate(R.layout.list_item,null);</div><div class="line"></div><div class="line">            ImageView imageView = (ImageView) convertView.findViewById(R.id.imageview_header);</div><div class="line">            imageView.setImageResource(imageIds[position]);</div><div class="line"></div><div class="line">            TextView textViewName = (TextView) convertView.findViewById(R.id.textview_name);</div><div class="line">            textViewName.setText(names[position]);</div><div class="line"></div><div class="line">            TextView textViewDesc = (TextView) convertView.findViewById(R.id.textview_desc);</div><div class="line">            textViewDesc.setText(descs[position]);</div><div class="line">        &#125;</div><div class="line">        return convertView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>列表项的布局文件(list_item.xml):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">    &lt;!--定义一个ImageView，用于作为列表项的一部分--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/imageview_header&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:paddingLeft=&quot;10dp&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;&gt;</div><div class="line">        &lt;!--定义一个TextView，用作列表项的一部分--&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview_name&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:paddingLeft=&quot;10dp&quot;</div><div class="line">            android:textColor=&quot;#f0f&quot;</div><div class="line">            android:textSize=&quot;20dp&quot; /&gt;</div><div class="line">        &lt;!--定义一个TextView，用作列表项的一部分--&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview_desc&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:paddingLeft=&quot;10dp&quot;</div><div class="line">            android:textSize=&quot;14dp&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.example.baseadapterdemo;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ListAdapter;</div><div class="line">import android.widget.ListView;</div><div class="line"></div><div class="line">import com.example.baseadapterdemo.Adapter.TestAdapter;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private ListView listView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        listView = (ListView) findViewById(R.id.listview);</div><div class="line"></div><div class="line">        TestAdapter testAdapter = new TestAdapter(this);</div><div class="line"></div><div class="line">        listView.setAdapter(testAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果如下图：</p>
<p><img src="http://img.blog.csdn.net/20151130195523669" alt="这里写图片描述"></p>
<p>总结：其实SimpleAdapter可以算作是扩展的BaseAdapter的一个特例，扩展的BaseAdapter可以最大限度的操作列表项。</p>
<p>到目前为止，我们通过ListView介绍了4中实现Adapter的方法。从表面上看，此处只是在介绍ListView，但实际上这里介绍的知识完全适用于AdapterView的其他子类：GradView、Spinner、Gallery、AdapterViewFlipper等。因此，后面介绍这些组件的步骤依然是如下两步：</p>
<ol>
<li>采用4中方式(1.ArrayAdapter 2.ListActivity 3.SimpleAdapter 4.BaseAdapter)之一创建Adapter。</li>
<li>调用AdapterView的setAdapter(Adapter)方法设置Adapter即可。</li>
</ol>
<p>参考自：《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之自动完成文本框（AutoCompleteTextView）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%96%87%E6%9C%AC%E6%A1%86%EF%BC%88AutoCompleteTextView%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>自动完成文本框(AutoCompleteTextView)从EditText派生而出，实际上它也是一个编辑框，但它比普通编辑框多了一个功能：当用户输入一定字符之后，自动完成文本框会显示一个下拉菜单，供用户从中选择，当用户输入某个菜单项之后，AutoCompleteTextView按用户选择自动填写该文本框。</p>
<p>AutoCompleteTextView除了可以使用EditText提供的XML属性和方法之外，还支持如下表所示的常用XML属性及相关方法：</p>
<p><img src="http://img.blog.csdn.net/20151201093847269" alt="这里写图片描述"></p>
<p>使用AutoCompleteTextView很简单，只要为它设置一个Adapter即可，该Adapter封装了AutoCompleteTextView预设的提示文本。</p>
<p>AutoCompleteTextView还派生了一个子类：MultiAutoCompleteTextView,该子类的功能与AutoCompleteTextView基本相似，只是MultiAutoCompleteTextView允许输入多个提示项，多个提示项以分隔符分隔。MultiAutoCompleteTextView提供了setTokenizer()方法来设置分隔符。</p>
<p>下面简单模拟一下输入QQ号码提示QQ的登录框：</p>
<p>acticity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;!--定义一个自动完成文本框，</div><div class="line">        指定输入一个字符后进行提示--&gt;</div><div class="line">    &lt;AutoCompleteTextView</div><div class="line">        android:id=&quot;@+id/auto&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:completionHint=&quot;请选择你的QQ号码：&quot;</div><div class="line">        android:completionThreshold=&quot;1&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.example.autocompletetextviewtest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ArrayAdapter;</div><div class="line">import android.widget.AutoCompleteTextView;</div><div class="line">import android.widget.MultiAutoCompleteTextView;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    AutoCompleteTextView autoCompleteTextView;</div><div class="line">    MultiAutoCompleteTextView multiAutoCompleteTextView;</div><div class="line">    //定义字符串数组，作为提示的文本。这里只是简单模仿，</div><div class="line">    //随便写了几个QQ号码</div><div class="line">    String[] books = new String[]&#123;</div><div class="line">            &quot;123456789&quot;,&quot;877646746&quot;,</div><div class="line">            &quot;345678912&quot;,&quot;666777888&quot;,</div><div class="line">            &quot;133444555&quot;,&quot;122777890&quot;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        //创建一个ArrayAdapter,封装数组。</div><div class="line">        ArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;String&gt;(this,</div><div class="line">                android.R.layout.simple_dropdown_item_1line,books);</div><div class="line"></div><div class="line">        autoCompleteTextView = (AutoCompleteTextView) findViewById(R.id.auto);</div><div class="line">        autoCompleteTextView.setAdapter(arrayAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<p><img src="http://img.blog.csdn.net/20151201094832596" alt="这里写图片描述"></p>
<p>如果向真实的模仿QQ登录框，可以将每次登录的不同的QQ号码保存起来，然后封装在adapter中即可。</p>
<p>这里有个别人写的类似的Demo：<br><a href="http://blog.csdn.net/iamkila/article/details/7230160" target="_blank" rel="external">用AutoCompleteTextView实现历史记录提示</a></p>
<p>参考自：《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之网格视图（GridView）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E7%BD%91%E6%A0%BC%E8%A7%86%E5%9B%BE%EF%BC%88GridView%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>GridView用于在界面上按行、列分布的方式显示多个组件。</p>
<p>GridView和ListView有共同的父类：AbsListView，因此GridView和ListView具有很高的相似性，它们都是列表项。它们的唯一区别是：ListView只显示一列；而GridView可以显示多列。从这个角度来看，ListView相当于一种特殊的GridView，如果让GridView只显示一列，那么该GridView就变成了ListView。</p>
<p>与ListView类似的是，GridView也需要通过Adapter类提供显示的数据。</p>
<p>GridView提供的常用XML属性及相关方法如下表：</p>
<p><img src="http://img.blog.csdn.net/20151201103242374" alt="这里写图片描述"></p>
<p>注意：使用GridView时一般都应该制定numColumns大于1；否则该属性默认值为1，如果将该属性设为1，则意味着该GridView只有一列，那么GridView就变成了ListView。</p>
<p>上表中android:stretchMode属性支持如下几个属性：</p>
<ul>
<li>NO_STRETCH：不拉伸。</li>
<li>STRETCH_SPACING：仅拉伸元素之间的距离。</li>
<li>STRETCH_SPACING_UNIFORM：表格元素本身、元素之间的距离一起拉伸。</li>
<li>STRETCH_COLUMN_WIDTH：仅拉伸表格元素本身。</li>
</ul>
<p>下面通过一个实例来介绍GridView的用法，本实例采用SimpleAdapter为GridView提供数据。</p>
<p>Demo：带预览的图片浏览器<br>本实例将采用一个GridView以行、列的形式组织所有图片的预览视图。然后程序用一个ImageView来显示图片。</p>
<p>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:gravity=&quot;center_horizontal&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;!--定义一个GridView组件--&gt;</div><div class="line">    &lt;GridView</div><div class="line">        android:id=&quot;@+id/gridView&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:gravity=&quot;center&quot;</div><div class="line">        android:horizontalSpacing=&quot;1pt&quot;</div><div class="line">        android:numColumns=&quot;4&quot;</div><div class="line">        android:verticalSpacing=&quot;1pt&quot;&gt;</div><div class="line">    &lt;/GridView&gt;</div><div class="line">    &lt;!--定义一个ImageView组件--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/imageView&quot;</div><div class="line">        android:layout_width=&quot;240dp&quot;</div><div class="line">        android:layout_height=&quot;240dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面的界面布局只是简单的定义了一个GridView、一个ImageView。定义GridView时指定了android:numColumns=”4”,这意味着该网格包含4列。那么该GridView多少行呢？这是动态改变的——正如ListView到底包含多少行由该ListView对应的Adapter所决定的，GridView到底包含多少行也是由Adapter决定的。</p>
<p>主程序代码：MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">package com.example.gridviewtest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.AdapterView;</div><div class="line">import android.widget.GridView;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.SimpleAdapter;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private GridView gridView;</div><div class="line">    private ImageView imageView;</div><div class="line">    int[] imageIds = new int[]&#123;</div><div class="line">            R.drawable.bomb1,R.drawable.bomb2,R.drawable.bomb3,R.drawable.bomb4,</div><div class="line">            R.drawable.bomb5,R.drawable.bomb6,R.drawable.bomb7,R.drawable.bomb8,</div><div class="line">            R.drawable.bomb9,R.drawable.bomb10,R.drawable.bomb11,R.drawable.bomb12</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        gridView = (GridView) findViewById(R.id.gridView);</div><div class="line">        imageView = (ImageView) findViewById(R.id.imageView);</div><div class="line"></div><div class="line">        List&lt;Map&lt;String,Object&gt;&gt; listItems = new ArrayList&lt;&gt;();</div><div class="line">        for (int i=0; i&lt;imageIds.length; i++)</div><div class="line">        &#123;</div><div class="line">            Map&lt;String,Object&gt; listItem = new HashMap&lt;&gt;();</div><div class="line">            listItem.put(&quot;image&quot;,imageIds[i]);</div><div class="line">            listItems.add(listItem);</div><div class="line">        &#125;</div><div class="line">        SimpleAdapter simpleAdapter = new SimpleAdapter(this,listItems,</div><div class="line">                R.layout.cell,</div><div class="line">                new String[]&#123;&quot;image&quot;&#125;,</div><div class="line">                new int[]&#123;R.id.image1&#125;);</div><div class="line"></div><div class="line">        gridView.setAdapter(simpleAdapter);</div><div class="line"></div><div class="line">        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">                imageView.setImageResource(imageIds[position]);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        gridView.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">                imageView.setImageResource(imageIds[position]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onNothingSelected(AdapterView&lt;?&gt; parent) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件cell.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">	android:orientation=&quot;horizontal&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;match_parent&quot;</div><div class="line">	android:gravity=&quot;center_horizontal&quot;</div><div class="line">	android:padding=&quot;2pt&quot;&gt;</div><div class="line">&lt;ImageView</div><div class="line">	android:id=&quot;@+id/image1&quot;</div><div class="line">	android:layout_width=&quot;50dp&quot; </div><div class="line">	android:layout_height=&quot;50dp&quot; </div><div class="line">	/&gt;	</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>上面程序使用了SimpleAdapter对象作为GridView的Adapter，这个SimpleAdapter底层保证了一个长度为12的List集合——这意味着GridView一共需要12个组件，GridView总共有4列，因此，GridView一共包含3行。</p>
<p>运行效果如下：</p>
<p><img src="http://img.blog.csdn.net/20151201105327921" alt="这里写图片描述"></p>
<p>总结：<br>GridView每行中的各个组件都相当于ListView中的一个组件(一行)。</p>
<p>用BaseAdapter重写上面的Demo：</p>
<p>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:gravity=&quot;center_horizontal&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;!--定义一个GridView组件--&gt;</div><div class="line">    &lt;GridView</div><div class="line">        android:id=&quot;@+id/gridView&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:gravity=&quot;center&quot;</div><div class="line">        android:horizontalSpacing=&quot;1pt&quot;</div><div class="line">        android:numColumns=&quot;4&quot;</div><div class="line">        android:verticalSpacing=&quot;1pt&quot;&gt;</div><div class="line">    &lt;/GridView&gt;</div><div class="line">    &lt;!--定义一个ImageView组件--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/imageView&quot;</div><div class="line">        android:layout_width=&quot;240dp&quot;</div><div class="line">        android:layout_height=&quot;240dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>扩展的BaseAdapter：ImageAdapter.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">package com.example.gridviewwithbaseadapter;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.BaseAdapter;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import java.lang.reflect.Field;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by songxitang on 2015/12/1.</div><div class="line"> */</div><div class="line">public class ImageAdapter extends BaseAdapter &#123;</div><div class="line">    private static final String FACE_PREFIX = &quot;bomb&quot;;</div><div class="line">    private Context context;</div><div class="line">    private int imageCount;</div><div class="line"></div><div class="line">    public ImageAdapter(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line">        this.imageCount = calculateImageCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //计算图片的数量</div><div class="line">    private int calculateImageCount() &#123;</div><div class="line">        int i = 0;</div><div class="line">        while (true) &#123;</div><div class="line">            i++;</div><div class="line">            String imageName = FACE_PREFIX + i;</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                //Java反射: 查看资源文件中是否有名为faceName的资源。</div><div class="line">                R.drawable.class.getField(imageName);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return i - 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return imageCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getItem(int position) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getItemId(int position) &#123;</div><div class="line">        return position + 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //根据资源名获取资源ID</div><div class="line">    public static int getResourceIDFromName(Class c, String name) &#123;</div><div class="line">        int resID = -1;</div><div class="line">        try &#123;</div><div class="line">            //利用Java反射</div><div class="line">            Field field = c.getField(name);</div><div class="line">            resID = field.getInt(null);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return resID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //根据position获取资源ID</div><div class="line">    public static int getImageResourceID(int position) &#123;</div><div class="line">        //position是从0开始的。</div><div class="line">        position++;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            return getResourceIDFromName(R.drawable.class, FACE_PREFIX + position);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">        ImageView imageView = new ImageView(context);</div><div class="line">        imageView.setImageResource(getImageResourceID(position));</div><div class="line"></div><div class="line">        return imageView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.example.gridviewwithbaseadapter;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.AdapterView;</div><div class="line">import android.widget.GridView;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.SimpleAdapter;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private GridView gridView;</div><div class="line">    private ImageView imageView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        gridView = (GridView) findViewById(R.id.gridView);</div><div class="line">        imageView = (ImageView) findViewById(R.id.imageView);</div><div class="line"></div><div class="line">        ImageAdapter imageAdapter = new ImageAdapter(this);</div><div class="line">        gridView.setAdapter(imageAdapter);</div><div class="line"></div><div class="line">        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">                imageView.setImageResource(ImageAdapter.getImageResourceID(position));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        gridView.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">                imageView.setImageResource(ImageAdapter.getImageResourceID(position));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onNothingSelected(AdapterView&lt;?&gt; parent) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录结构如下图：</p>
<p><img src="http://img.blog.csdn.net/20151201144835224" alt="这里写图片描述"></p>
<p>运行效果与上面的Demo相同。</p>
<p>参考自：《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之可扩展的列表组件（ExpandableListView）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8B%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%EF%BC%88ExpandableListView%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>ExpandableListView是ListView的子类，它在普通ListView的基础上进行了扩展，它把应用中的列表项分为几组，每组里又包含多个列表项。</p>
<p>ExpandableListView的用法与普通ListView的用法非常相似，只是ExpandableListView所显示的列表项应该由ExpandableListAdapter提供。ExpandableListView也是一个接口。</p>
<p>与Adapter类似的是，实现ExpandableListAdapter也有如下三种常用方式：</p>
<ul>
<li>扩展BaseExpandableListAdapter，实现ExpandableListAdapter。</li>
<li>使用SimpleExpandableListAdapter将两个List集合包装成ExpandableListAdapter。</li>
<li>使用SimpleCursorTreeAdapter将Cursor中的数据包装成SimpleCursorTreeAdapter。</li>
</ul>
<p>下图显示ExpandableListView额外支持的常用XML属性：</p>
<p><img src="http://img.blog.csdn.net/20151201160347205" alt="这里写图片描述"></p>
<p>Demo：</p>
<p>布局文件：activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;ExpandableListView</div><div class="line">        android:id=&quot;@+id/expandListView&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>主Activity：MainActivity.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.example.expandablelistviewtest;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.widget.ExpandableListView;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ExpandableListView expandableListView = (ExpandableListView) findViewById(R.id.expandListView);</div><div class="line">        MainAdapter mainAdapter = new MainAdapter(this);</div><div class="line">        expandableListView.setAdapter(mainAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Adapter(扩展BaseExpandableListAdapter)：MainAdapter.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">package com.example.expandablelistviewtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.AbsListView;</div><div class="line">import android.widget.BaseExpandableListAdapter;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.LinearLayout;</div><div class="line">import android.widget.TextView;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by songxitang on 2015/12/1.</div><div class="line"> */</div><div class="line">public class MainAdapter extends BaseExpandableListAdapter &#123;</div><div class="line">    private Context context;</div><div class="line"></div><div class="line">    int[] logos = new int[]</div><div class="line">            &#123;</div><div class="line">                    R.drawable.p,</div><div class="line">                    R.drawable.z,</div><div class="line">                    R.drawable.t</div><div class="line">            &#125;;</div><div class="line">    private String[] armTypes = new String[]</div><div class="line">            &#123;&quot;神族兵种&quot;, &quot;虫族兵种&quot;, &quot;人族兵种&quot;&#125;;</div><div class="line">    private String[][] arms = new String[][]</div><div class="line">            &#123;</div><div class="line">                    &#123;&quot;狂战士&quot;, &quot;龙骑士&quot;, &quot;黑暗圣堂&quot;, &quot;电兵&quot;&#125;,</div><div class="line">                    &#123;&quot;小狗&quot;, &quot;刺蛇&quot;, &quot;飞龙&quot;, &quot;自爆飞机&quot;&#125;,</div><div class="line">                    &#123;&quot;机枪兵&quot;, &quot;护士MM&quot;, &quot;幽灵&quot;&#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">    public MainAdapter(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getGroupCount() &#123;</div><div class="line">        return armTypes.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getChildrenCount(int groupPosition) &#123;</div><div class="line">        return arms[groupPosition].length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getGroup(int groupPosition) &#123;</div><div class="line">        return armTypes[groupPosition];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getChild(int groupPosition, int childPosition) &#123;</div><div class="line">        return arms[groupPosition][childPosition];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getGroupId(int groupPosition) &#123;</div><div class="line">        return groupPosition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getChildId(int groupPosition, int childPosition) &#123;</div><div class="line">        return childPosition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasStableIds() &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) &#123;</div><div class="line">	    //此处不建议用这种方式添加布局，最好使用布局文件添加布局。</div><div class="line">        LinearLayout linearLayout = new LinearLayout(context);</div><div class="line">        linearLayout.setOrientation(LinearLayout.HORIZONTAL);</div><div class="line"></div><div class="line">        ImageView imageView = new ImageView(context);</div><div class="line">        imageView.setImageResource(logos[groupPosition]);</div><div class="line"></div><div class="line">        TextView textView = new TextView(context);</div><div class="line">        textView.setText(getGroup(groupPosition).toString());</div><div class="line"></div><div class="line">        linearLayout.addView(imageView);</div><div class="line">        linearLayout.addView(textView);</div><div class="line"></div><div class="line">        return linearLayout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private TextView getTextView()</div><div class="line">    &#123;</div><div class="line">        AbsListView.LayoutParams layoutParams = new AbsListView.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT,64);</div><div class="line">        TextView textView = new TextView(context);</div><div class="line">        textView.setLayoutParams(layoutParams);</div><div class="line">        textView.setGravity(Gravity.CENTER_VERTICAL|Gravity.LEFT);</div><div class="line">        textView.setPadding(36,0,0,0);</div><div class="line">        textView.setTextSize(20);</div><div class="line"></div><div class="line">        return textView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) &#123;</div><div class="line">        TextView textView = getTextView();</div><div class="line">        textView.setText(getChild(groupPosition,childPosition).toString());</div><div class="line"></div><div class="line">        return textView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isChildSelectable(int groupPosition, int childPosition) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="http://img.blog.csdn.net/20151201160909756" alt="这里写图片描述"></p>
<p>上面程序使用扩展BaseExpandableListAdapter来实现ExpandableListAdapter，当扩展BaseExpandableListAdapter时，关键是实现如下4个方法：</p>
<ul>
<li>getGroupCount()：该方法返回包含的组列表项的数量。</li>
<li>getGroupView()：该方法返回的View对象将作为组列表项。</li>
<li>getChildrenCount()：该方法返回特定组所包含的子列表项的数量。</li>
<li>getChildView()：该方法返回的View对象将作为特定组、特定位置的子列表项。</li>
</ul>
<p>上面程序中的getChildView()方法返回一个普通TextView，因为每个自列表项都是一个普通文本框。而getGroupView()方法则返回一个LinearLayout对象，该LinearLayout对象里包含一个ImageView和一个TextView。因此，每个组列表项都由图片和文本组成。</p>
<p>参考自：《疯狂Android讲义》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView的性能优化之convertView和viewHolder]]></title>
      <url>http://freeshow.github.io/2016/07/23/ListView%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BconvertView%E5%92%8CviewHolder/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>原文出自：方杰| <a href="http://fangjie.info/?p=344" target="_blank" rel="external">http://fangjie.info/?p=344</a> 转载请注明出处</p>
<p>最近碰到的面试题中经常会碰到问”ListView的优化”问题。所以就拿自己之前写的微博客户端的程序做下优化。</p>
<p>自己查了些资料，看了别人写的博客，得出结论，ListView优化大致从以下几个角度:</p>
<ol>
<li>复用已经生成的convertView；</li>
<li>添加viewHolder类；</li>
<li>缓存数据（图片缓存）；</li>
<li>分页加载。</li>
</ol>
<p><strong><em>一、复用convertView</em></strong></p>
<p>首先讲下ListView的原理：ListView中的每一个Item显示都需要Adapter调用一次getView的方法，这个方法会传入一个convertView的参数，返回的View就是这个Item显示的View。如果当Item的数量足够大，再为每一个Item都创建一个View对象，必将占用很多内存，创建View对象（mInflater.inflate(R.layout.lv_item, null);从xml中生成View，这是属于IO操作）也是耗时操作，所以必将影响性能。Android提供了一个叫做Recycler(反复循环器)的构件，就是当ListView的Item从上方滚出屏幕视角之外，对应Item的View会被缓存到Recycler中，相应的会从下方生成一个Item，而此时调用的getView中的convertView参数就是滚出屏幕的Item的View，所以说如果能重用这个convertView，就会大大改善性能。</p>
<p><img src="http://img.blog.csdn.net/20151201191737514" alt="这里写图片描述"></p>
<p>图解：一个屏幕最多显示7个Item，如果当Item1滑出屏幕，此时Item1 的View被添加进Recycler中，相应的在下部要产生一个Item8，这时调用getView方法，convertView参数就是Item1 的View。</p>
<p>（1）Item固定高度</p>
<p>测试Demo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">  System.out.println(&quot;getView &quot; + position + &quot; &quot; + convertView);</div><div class="line">  ViewHolder holder = null;</div><div class="line">  if (convertView == null) &#123;</div><div class="line">    convertView = mInflater.inflate(R.layout.lv_item, null);</div><div class="line">    holder = new ViewHolder();</div><div class="line">    holder.textView = (TextView)convertView.findViewById(R.id.tv_text);</div><div class="line">    convertView.setTag(holder);</div><div class="line">  &#125; else &#123;</div><div class="line">    holder = (ViewHolder)convertView.getTag();</div><div class="line">  &#125;</div><div class="line">  holder.textView.setText(mData.get(position));</div><div class="line">  return convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20151201191944066" alt="这里写图片描述"></p>
<p>首先程序启动，9个Item显示调用getView方法，这时的convertView都是null，因为没有任何Item被滑出屏幕缓存到Recycler中。所以打印的Log如图：</p>
<p><img src="http://img.blog.csdn.net/20151201192029825" alt="这里写图片描述"></p>
<p>继续向上滑动屏幕，当Item1，Item2，Item3…..陆续滑出屏幕之后，他们之前的View得到重用。所以最终屏幕上就只是这10个View反复循环重用了（因为屏幕最多显示10个Item）。</p>
<p><img src="http://img.blog.csdn.net/20151201192119210" alt="这里写图片描述"></p>
<p>然后我尝试把屏幕往回滚，重新滚到前面。</p>
<p><img src="http://img.blog.csdn.net/20151201192210433" alt="这里写图片描述"></p>
<p>图解：屏幕从显示Item 17-Item26 滚到显示Item13-Item22。分析这个过程，当滚动一个Item时，Item26消失，Item16出现，所以Item16又将复用Item26的View，观察Log，的确如此，其他依次类推。仔细分析，有这样一个规律：</p>
<p>无论怎么重用convertView，一个position的Item永远使用一个view。<br>（比如此例中Item13 永远显示的是 5272fb00的View）。</p>
<p>（2）Item高度不固定</p>
<p>以上的例子是针对于每个Item的高度是固定的，所以很容易从定量中计算出每一个屏幕能够显示的最多Item数量。如果当一个Item的高度很根据不同情况的数据发生变化时，这样就无法得知最多显示的Item数量。</p>
<p>看一个例子，我的微博客户端程序，都知道微博有的有转载，有的有图片，所以说微博的每一个Item高度是不固定的。同样在getView中打出日志，显示如下图：</p>
<p><img src="http://img.blog.csdn.net/20151201192340888" alt="这里写图片描述"></p>
<p>图解：</p>
<p>因为没有固定的Item高度，无法计算一个屏幕中能够显示的最大高度，系统会会先创建一个View，第一轮是用这个View来试探能放多少个item，试探出结果可以放3个Item，所以第二轮的0-2才是真正创建的View，屏幕上显示了3个Item。当往下滚时，Item0没有完全出去，下面有来了个Item3，所以这时的Item有创建了一个View，屏幕上此时显示4个Item。之后4个Item就是做多显示的数量，再往上滚动，convertView就开始重用了，Item4和Item0的View是一个对象。</p>
<p><strong><em>二、使用viewHolder类</em></strong></p>
<p>我们都知道在getView方法中的操作是这样的：先从xml中创建view对象（inflate操作，我们采用了重用convertView方法优化），然后在这个view去findViewById，找到每一个子View，如：一个TextView等。这里的findViewById操作是一个树查找过程，也是一个耗时的操作，所以这里也需要优化，就是使用viewHolder，把每一个子View都放在Holder中，当第一次创建convertView对象时，把这些子view找出来。然后用convertView的setTag将viewHolder设置到Tag中，以便系统第二次绘制ListView时从Tag中取出。当第二次重用convertView时，只需从convertView中getTag取出来就可以。</p>
<p>测试Demo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">     System.out.println(&quot;getView &quot; + position + &quot; &quot; + convertView);</div><div class="line">     ViewHolder holder = null;</div><div class="line">     if (convertView == null) &#123;</div><div class="line">       convertView = mInflater.inflate(R.layout.lv_item, null);</div><div class="line">       holder = new ViewHolder();</div><div class="line">       holder.textView = (TextView)convertView.findViewById(R.id.tv_text);</div><div class="line">       convertView.setTag(holder);</div><div class="line">     &#125; else &#123;</div><div class="line">       holder = (ViewHolder)convertView.getTag();</div><div class="line">     &#125;</div><div class="line">     holder.textView.setText(mData.get(position));</div><div class="line">     return convertView;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"> public static class ViewHolder &#123;</div><div class="line">   public TextView textView;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html" target="_blank" rel="external">[Android] ListView中getView的原理＋如何在ListView中放置多个item</a></p>
<p><a href="http://www.cnblogs.com/meizixiong/p/4555786.html" target="_blank" rel="external">[转]listview加载性能优化ViewHolder</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android:layout_weight的真实含义]]></title>
      <url>http://freeshow.github.io/2016/07/23/android-layout-weight%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%90%AB%E4%B9%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>首先声明只有在Linearlayout中，该属性才有效。</p>
<blockquote>
<p>android:layout_weight的真实含义是:一旦View设置了该属性(假设有效的情况下)，那么该<br>View的宽度等于原有宽度(android:layout_width)加上剩余空间的占比！</p>
</blockquote>
<p>很多人不知道剩余空间是个什么概念，下面 我先来说说剩余空间。<br>假设手机屏幕的高度为L。</p>
<p>1.当layout_hieght=”wrap_content”时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:divider=&quot;#f40808&quot;&gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;One&quot;/&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Two&quot;/&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;Three&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>上面布局的剩余空间的高度为：<br><img src="http://img.blog.csdn.net/20151210153945916" alt="这里写图片描述"></p>
<p>系统给上面的3个EditText分配它们的高度值为wrap_content(高度足以包含它们的内容”One”、”Two”、”Three”即可),则剩余空间为：L-3*wrap_content。</p>
<p>2.当layout_hieght=”match_parent”时：<br>上面三个EditText的每个高度为 L，则剩余空间的高度为L-3*L = -2L。</p>
<hr>
<p>下面我就来讲，Layout_weight这个属性的真正的意思：<br>(1)当layout_hieght=”wrap_content”时:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    android:divider=&quot;#f40808&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#f20303&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:text=&quot;One&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#064df2&quot;</div><div class="line">        android:layout_weight=&quot;2&quot;</div><div class="line">        android:text=&quot;Two&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#f5f909&quot;</div><div class="line">        android:layout_weight=&quot;3&quot;</div><div class="line">        android:text=&quot;Three&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://img.blog.csdn.net/20151210160833528" alt="这里写图片描述"></p>
<p>我们假设手机屏幕的宽度为L，则剩余空间的宽度freeWidth为L-3*wrap_content，<br><img src="http://img.blog.csdn.net/20151210161353581" alt="这里写图片描述"></p>
<p>根据计算公式：<br>TextView(One)的宽度为：wrap_content+(1/6)<em>freeWidth.<br>TextView(Two)的宽度为：wrap_content+(2/6)</em>freeWidth.<br>TextView(Three)的宽度为：wrap_content+(3/6)*freeWidth.</p>
<p>2.当layout_hieght=”match_parent”时：<br>则剩余空间的宽度freeWidth为：L-3<em>L = -2L；<br>根据计算公式：<br>TextView(One)的宽度为：L+(1/6)</em>freeWidth = (4/6)L.<br>TextView(Two)的宽度为：L+(2/6)<em>freeWidth = (2/6)L.<br>TextView(Three)的宽度为：L+(3/6)</em>freeWidth = 0L.</p>
<p>效果如下：<br><img src="http://img.blog.csdn.net/20151210162348455" alt="这里写图片描述"></p>
<p>(3)当没有设置 Layout_weight这个属性时，它默认值是0：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    android:divider=&quot;#f40808&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#f20303&quot;</div><div class="line">        android:text=&quot;One&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#064df2&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:text=&quot;Two&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:background=&quot;#f5f909&quot;</div><div class="line">        android:text=&quot;Three&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://img.blog.csdn.net/20151210162742080" alt="这里写图片描述"></p>
<p>因为TextView(One)和TextView(Two)没有设置Layout_weight属性所以默认为0,则将剩余空间全部分配给TextView(Two);</p>
<p>总结：<br>Google官方推荐，当使用weight属性时，将width设为0dip即可，效果跟设成wrap_content是一样的。这样weight就可以理解为占比了！</p>
<p>参考自：<a href="http://www.android100.org/html/201310/22/4536.html" target="_blank" rel="external">Android：Layout_weight的深刻理解</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用9Patch图片作为背景]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E4%BD%BF%E7%94%A89Patch%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>将图片作为View组件的背景时，当View中要呈现的文字内容太多时，Android会自动缩放整张图片，以保证背景图片能覆盖整个View。但这种缩放图片的效果可能并不好。可能存在的情况是我们只想缩放图片的某个部分，这样才能保证View的视图效果。</p>
<p>为了实现只缩放图片中的某个部分效果，我们需要借助于9Patch图片来实现。9Patch图片是一种特殊的PNG图片，这种图片以.9.png结尾，它在原始图片四周各添加一个宽度为1像素的线条，这4条线就决定了该图片的缩放规则、内容显示规则。</p>
<p>左侧和上侧的直线共同决定了图片的缩放区域：以左边直线为左边界绘制矩形，它覆盖的区域可以在纵向上缩放；以上面直线为上边界绘制矩形，它覆盖的区域可以水平缩放；它们两者的交集可以在两个方向上缩放。</p>
<p>右侧和下侧的直线共同决定图片的内容显示区域：以右边直线为右边界绘制矩形，以下边直线为下边界绘制矩形，它们二者的交集就是图片内容显示区域。</p>
<p>Android为制作9Patch图片提供了draw9patch工具，该工具位于Android SDK安装路径的tools目录下，进入该目录双击draw9patch.bat文件，即可启动该工具。</p>
<p>启动draw9patch工具之后，通过工具主菜单上的”File”-“Open 9-patch”菜单项打开一张PNG图片，然后通过该工具定义图片的缩放区域和内容显示区域。</p>
<p>如下图两个类似于QQ显示聊天信息的消息文本：</p>
<p>显示左侧聊天信息：</p>
<p><img src="http://img.blog.csdn.net/20151210193514465" alt="这里写图片描述"></p>
<p>显示右侧聊天信息：<br><img src="http://img.blog.csdn.net/20151210193619800" alt="这里写图片描述"></p>
<p>这样就可以定义聊天信息的布局文件了：<br>左侧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/textview_chat_text_left&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    //chat_text_left.9.png为上面的左侧9Patch图片</div><div class="line">    android:background=&quot;@drawable/chat_text_left&quot;</div><div class="line">    android:gravity=&quot;center_vertical&quot;</div><div class="line">    android:maxWidth=&quot;270dp&quot;</div><div class="line">    android:text=&quot;Chat_Left_Text&quot;</div><div class="line">    android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java综述]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E7%BB%BC%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>1.Java的魔力：字节码</strong></p>
<p>Java编辑器的输出不是可执行代码，而是字节码(bytecode)。字节码是高度优化的指令集合，这些指令由Java运行时系统执行，Java运行时系统也称为Java虚拟机(Java Virtual Machine,JVM)。这一点可能有点让人吃惊，因为处于性能的考虑，许多现代语言被设计为将源代码编译成可执行代码。然而，Java程序是由JVM执行这一事实，有助于解决基于Web的程序相关的主要问题。</p>
<p>将Java程序翻译成字节码，可以使其更容易的在各种环境中运行，因为只需要针对每种平台实现Java虚拟机即可。如果Java程序被编译成本机代码，就必须为相同的程序针对连接到Internet的不同类型的CUP提供不同版本，这当然是不行的。因此，通过JVM执行字节码是创建真正可移植程序最容易的方法。</p>
<p>Java程序由JVM执行这一事实，还有助于提供安全性。因为JVM控制执行，所以能够包含程序并防止它在系统之外产生负效应。</p>
<p><strong>2.Java applet(以过时)</strong></p>
<p>Java applet 时一种特殊类型的Java程序，是为了能够在Internet上传送而设计的，可以在兼容Java的Web浏览器中自动运行。此外，applet可以根据需要自动下载，不需要用户的自动交互。如果用户点击包含applet的链接，就会自动下载applet,并在浏览器中运行。Applet一般是小程序，它们通常用于显示服务器提供的数据、处理用户输入或者提供在本地执行而不是在服务器上执行的简单功能，例如贷款计算器。本质上，applet使得可以将某些功能从服务器移到客户端。</p>
<p><strong>3.servlet:服务器端的Java</strong></p>
<p>Servlet是在服务器上执行的小程序。就像applet动态扩展了Web浏览器的功能一样，servlet动态扩展了服务器的功能。</p>
<p>Servlet用于动态的创建发送到客户端的内容。例如在线商店可以使用servlet在数据库中查找某件商品的价格，然后使用价格信息动态生成发送到浏览器的Web页面。</p>
<p><strong>4.包含源代码的文件名称</strong></p>
<p>在Java中，源文件的正式称为是编译单元(compilation unit),是包含一个或多个类定义(以及其他内容)的文本文件。Java编译器要求源文件使用.java作为扩展名。</p>
<p>在Java中，所有代码必须位于类中。按照约定，主类的名称应当与包含程序的文件的名称相匹配，另外还应当确保文件名的大小写与类名相匹配。</p>
<p>将源代码编译会生成.class的字节码文件，其中包含了Java虚拟机将要执行的指令。编译过Java源代码后，每个单独的类被放置到它自己的输出文件中，输出文件以类名加上扩展名”.class”作为名称。这就是为什么将Java源文件的名称指定为它所包含的类名是一个好主意的原因—源文件的名称将于.class文件的名称相同。</p>
<p><strong>5.public static void main(String[ ] args){}</strong></p>
<p>main()是当Java程序开始时调用的方法。必须将main()方法声明为public,因为当程序启动时，必须从声明main()方法的类的外部调用它。关键字static表示不必先实例化类的特定实例就可以调用main()方法。这是必须的，因为Java要在创建任何对象之前调用main()方法。</p>
<p>Main()方法只不过是程序开始执行的地方。复杂的程序可能具有几十个类，但这些类中只有一个类需要具有main()方法，以提供程序的开始点。</p>
<p>另外，有些情况下，根本不需要main()方法。例如，对于创建applet——嵌入到web浏览器中的Java程序——不需要使用main()方法，因为Web浏览器使用一种不同的方法启动applet的执行。</p>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之数据类型、变量和数组]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>1.基本数据类型</strong></p>
<p>基本类型被定义为具有明确的范围和数学行为。C和C++这类语言允许整数的大小随着执行环境的要求而变化。然而，Java与之不同。因为Java需要具备可移植性，所有数据类型都具有严格定义的范围。例如，无论在哪种特定的平台上，int总是32位的，因而可以编写出不经修改就能确保在任何体系结构的计算机上都能运行的程序。虽然严格指定整数的范围在某些环境中可能会造成一些性能损失，但为了实现可移植性这么做是必须的。</p>
<p>Java基本数据类型都是有符号的、正的或负的整数。Java不支持无符号的、只是正值得整数。</p>
<p>Java中布尔型只有两个逻辑值——true和false。True和false不能转化为任何数字表示形式。在Java中，字面值true不等于1,字面值false不等于0;<br>Java字符串需要重点指出的是，他们的开头和结尾必须位于同一行中。与其他某些语言不通，在Java中没有续行的转义字符。</p>
<p><strong>2.变量的作用域和生命周期</strong></p>
<p>Java允许在任何代码块中声明变量。代码块以开花括号开始并以闭花括号结束。代码块决定了作用域。因此，每当开始一个新的代码块时就创建一个新的作用域。作用域决定了对象对程序其他部分的可见性，并且决定了这些对象的生命周期。</p>
<p>在Java中，两种主要的作用域分别是由类和方法定义的。<br>由方法定义的作用域从方法的开括号开始。然而，如果方法具有参数，那么它们也会被包含到方法的作用域中。</p>
<p>作为通用规则，在作用域中声明的变量，对于在作用域之外定义的代码是不可见的(即不可访问的)。因此，当在某个作用域中声明变量时，就局部化了该变量，并保护它免受未授权的访问和修改。实际上，作用域规则为封装提供了基础。</p>
<p>作用域是可以嵌套的。当遇到这种情况时，外层的作用域包围了内层的作用域。这意味着在外层作用域中声明的对象对于内层作用域中的代码是可见的。然而，反过来就不是这样了，在内层作用域中声明的对象，在内层作用域之外是不可见的。</p>
<p>当进入变量的作用域时创建变量，当离开他们的作用域时销毁变量。这意味着一旦离开作用域，变量就不会再保持原来的值。所以对于在方法中声明的变量来说，在两次调用该方法之间，变量不会保持他们的值。此外，在对于代码库中声明的变量来说，当离开代码块时会丢失它们的值。因此，变量的生存期被限制在作用域之内。</p>
<p>如果变量声明包含了初始或器，那么每当进入声明变量的代码块时都会重新初始化变量。</p>
<p>尽管可以嵌套代码块，但是在内层代码块中不能声明与外层代码块具有相同名称的变量。例如，下面的程序是非法的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class ScopeErr</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int bar = 1;</div><div class="line">		&#123;</div><div class="line">			int bar =2;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.类型提升规则</strong></p>
<p>在进行运算时，所有byte、short和char类型的值都会被提升为int类型。然后，如果有一个操作数是long类型，就将整个表达式提升为long类型；如果有一个操作数是float类型，就将整个表达式提升为float类型；如果任何一个操作数为double类型，结果将为double类型。</p>
<p><strong>4.数组</strong></p>
<p>(1)一维数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int[] temp = new int[3];</div><div class="line">temp[0] = 1;</div><div class="line">temp[1] = 2;</div><div class="line">temp[2] = 3;</div></pre></td></tr></table></figure>
<p>使用new分配一个数组，必须执行要分配元素的类型和数量。通过new分配的数组，其元素会自动初始化为0(对于数值型)、false(对于布尔类型)或null(对于引用类型)。</p>
<p>当声明数组时，可以对其进行初始化。数组初始化器是一个位于花括号中由逗号分隔的表达式列表。用逗号分隔数组元素的值。Java会自动创建足够大的数组，以容纳数组初始化器中指定的数组元素的数量，这是需要使用new运算符。<br>int[ ] temp = {1,2,3};</p>
<p>2）二维数组<br>当为多维数组分配内存时，只需要为第一维分配内存。可以单独为余下的维分配内存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int twoD[][] = new int[3][];</div><div class="line">twoD[0] = new int[1];</div><div class="line">twoD[1] = new int[2];</div><div class="line">twoD[2] = new int[3];</div></pre></td></tr></table></figure>
<p>使用初始化器初始化二维数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int twoD[][] = </div><div class="line">&#123;</div><div class="line">	&#123;1&#125;,</div><div class="line">	&#123;2,3&#125;,</div><div class="line">	&#123;4,5,6&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之运算符]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>1.自增与自减运算符</strong></p>
<p>（1）对于前缀形式，操作数先自增或自减，然后表达式使用自增或自减之后的值。<br>x=1;<br>y=++x;<br>则y == 2;</p>
<p>(2)对于后缀形式，表达式先使用操作数原来的值，然后在修改操作数。<br>x=1;<br>y=x++;<br>则y == 1;</p>
<p><strong>2.关系运算符</strong></p>
<p>只有数值类型才能使使用关系运算符进行比较，即只有整型、浮点型以及字符型操作数，才可以进行以判定相互之间大小为目的的比较。</p>
<p>在Ｃ＋＋中，这些语句是非常普遍的：<br>int done;<br>//…<br>if(done)…    //Valid in C/C++<br>if(!done)… //but not in Java</p>
<p>而在Java中，这些语句必须编写为如下形式：<br>if(done == 0)… //this is Java-style<br>if(done != 0)…</p>
<p>这是因为在Java中定义true和false的方式与C/C++不同。在C/C++中，true是任何非零值，false是0；而在Java中true和false不是数值，他们与示范为0没有任何关系。<br>Java中if()语句，括号中类型必须为boolen类型。</p>
<p><strong>3.布尔逻辑运算</strong></p>
<p>&amp;    逻辑与<br>|    逻辑或</p>
<p>&amp;&amp;    短路与（条件与）<br>||    短路或（条件或）</p>
<p>短路运算（&amp;&amp;和||），假如单独根据左操作数就能确定表达式的结果，那么Java就不会再计算右操作数的值。<br>而逻辑运算（&amp;和|），左操作数和右操作数都要计算。</p>
<p>例如，if(denom != 0 &amp;&amp; num / denom &gt;10) 使用短路运算，所以不存在由于变量denom为0而引起运行时异常的风险。</p>
<p>对于布尔逻辑，使用逻辑与和或的短路形式是标准用法，而将单字符版本专门留给位运算。但是，这个规则有一个例外。例如，考虑下面的代码段：<br>if(c == 1 &amp; e++ &lt; 100) d = 100;<br>在此，使用单个&amp;符号以确保无论c是否等于1，都会为e应用自增运算。</p>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之控制语句]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>1.switch语句</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">switch(expression)</div><div class="line">&#123;</div><div class="line">	case value1:</div><div class="line">		//...</div><div class="line">		break;</div><div class="line">	case value2:</div><div class="line">		//...</div><div class="line">		break;</div><div class="line">	....</div><div class="line">	default:</div><div class="line">		//...</div><div class="line">		break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于JDK7以前的Java版本，expression必须是byte、short、int、char或枚举类型。从JDK7开始，expression可以是String类型。<br>在case语句中，指定的每个数值必须是唯一的常量表达式。case不允许重复。每个数值的类型必须与express的类型兼容。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class StringSwitch</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		String str = &quot;two&quot;;</div><div class="line">		switch(str)</div><div class="line">		&#123;</div><div class="line">			case &quot;one&quot;:</div><div class="line">				System.out.println(&quot;one&quot;);</div><div class="line">				break;</div><div class="line">			case &quot;two&quot;:</div><div class="line">				System.out.println(&quot;two&quot;);</div><div class="line">				break;</div><div class="line">			default:</div><div class="line">				System.out.println(&quot;no match&quot;);</div><div class="line">				break;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为： two</p>
<p><strong>2.for语句</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for(initialization; condition; iteration)</div><div class="line">&#123;</div><div class="line">	//body</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for循环的执行过程如下：当第一次开始循环时，执行循环的initialization部分。初始化表达式只执行一次。<br>接下来就执行condition表达式，然后执行body,在执行iteration.完成一次循环。往后的循环就不执行initialization初始化表达式了。<br>执行condition–&gt;body–&gt;iteration循环执行。直到condition的值为false.</p>
<p>注意：当在for循环内部或initialization初始化变量时，当for语句结束时，变量的作用域也随之结束。也就是说变量的作用域局限于for循环。<br>在for循环之外，变量将不再存在。如果需要在程序的其他地方使用循环控制变量，就不能再for循环内部声明它。</p>
<p><strong>3.for-each风格的for循环(增强版for循环)</strong></p>
<blockquote>
<p>for(type var : collection) statement;</p>
</blockquote>
<p>type制定了类型，var制定了迭代变量的名称，迭代变量用于接收来自collection集合的元素，从开始到结束，每次接收一个。collection指定了要遍历的集合。<br>对于循环的每次迭代，会检索出集合中的下一个元素，并存储在var中。循环会重复执行，直到得到集合中的所有元素。</p>
<p>关于for-each风格的for循环,有重要的一点需要声明：迭代变量var是“只读的”，因为迭代变量与背后的数组关联在一起。对迭代变量的一次赋值不会影响背后的数组。<br>换句话说，不能通过为迭代变量指定一个新值来改变数组的内容。</p>
<p>对多维数组进行迭代：</p>
<p>增强版for循环当对多维数组进行迭代时，因为每次迭代获取的是下一个数组，而不是单个元素。此外，for循环中迭代变量必须和获取的数组类型兼容。<br>例如，对于二维数组，迭代变量必须是对一维数组的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class ForEach</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int sum = 0;</div><div class="line">		int[][] nums = new int[3][5];</div><div class="line">		</div><div class="line">		for(int i = 0; i &lt; 3; i++)</div><div class="line">		&#123;</div><div class="line">			for(int j = 0; j &lt; 5; j++)</div><div class="line">			&#123;</div><div class="line">				nums[i][j] = (i+1) * (j+1);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		for(int[] x : nums)</div><div class="line">		&#123;</div><div class="line">			for(int y : x)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Value is: &quot;+y);</div><div class="line">				sum += y;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;Summation: &quot;+sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.跳转语句</strong></p>
<p>Java支持3中跳转语句：break语句、continue语句和return语句。</p>
<p>（1）Break语句<br>三种用途：<br>第一种：终止switch语句<br>第二种：退出循环<br>内层循环的break语句只会导致内层循环终止，对外层循环没有影响。<br>一个循环中可以出现多条break语句。但请小心，过多的break语句可能会破坏代码的结构。<br>在某条switch语句中使用的break语句，只会影响该switch语句，不会结束任何外层循环。<br>第三种：用作goto语句的”文明”形式</p>
<p>Java没有提供goto语句，因为goto语句可以随意的进入另一个程序的分支，并且是一种非结构化的方法。<br>使用goto语句会是代码难于理解和维护，还会妨碍特定的编译器优化。然而，在某些情况下，goto语句<br>对于流程控制很有价值并且结构合法。例如，当退出深度嵌套的一系列循环时，goto语句就很有用。<br>为了处理这种情况，Java定义了break语句的一种扩展形式。例如。通过使用这种形式的break语句，可以<br>中断一个或多个代码块。这些代码块不必是某个循环或switch语句的一部分，它们可以是任何代码块。此外，<br>可以精确指定准备在什么位置继续执行，因为这种形式的break语句使用标签进行工作。正如即将看到的，<br>break语句提供了goto语句的优点，而没有goto语句的问题。</p>
<p>使用标签的break语句的一般形式如下：<br>break label;<br>最常见的情况是，label是标识一个代码块的标签的名称。它既可以是一个独立的代码块，也可以是作为另一个语句的目标代码块。<br>当执行这种形式的break语句时，程序的执行控制会跳出由标签命名的代码块。具有标签的代码块必须包含break语句，但是不必立即包含break语句。<br>这意味着可以使用带有标签的break语句退出一系列的嵌套的代码，但是不能使用break语句将控制转移出没有包含break语句的代码块。</p>
<p>为了命名代码块，可以在代码块之前放置一个标签。标签可以是任意合法的Java标识符，后面跟随着一个冒号。一旦命名代码块，<br>就可以使用命名标签作为break语句的目标。这样一来，就可以在标识的代码块的末端恢复执行。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Break</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		boolean t = true;</div><div class="line">		first:</div><div class="line">		&#123;</div><div class="line">			second:</div><div class="line">			&#123;</div><div class="line">				third:</div><div class="line">				&#123;</div><div class="line">					System.out.println(&quot;Before the break.&quot;);</div><div class="line">					if(t) break second; //break out of second block;</div><div class="line">					System.out.println(&quot;This won&apos;t execute&quot;);</div><div class="line">				&#125;</div><div class="line">				System.out.println(&quot;This won&apos;t execute&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.println(&quot;This is after second block.&quot;)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为：<br>Before the break.<br>This is after second block</p>
<p>带有标签的break语句的最常用用途之一是退出嵌套的循环。例如下面的程序中，外层循环只执行一次：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">case Break</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		outer:for(int i = 0;i &lt; 3;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Pass&quot;+i+&quot;:&quot;);</div><div class="line">			for(int j = 0;j &lt; 100;j++)</div><div class="line">			&#123;</div><div class="line">				if(j == 10) break outer;</div><div class="line">				System.out.print(j+&quot; &quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.println(&quot;This will not print&quot;);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;Loops complete.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为：<br>Pass 0: 0 1 2 3 4 5 6 7 8 9 Loops complete.</p>
<p>可以看出，当内层循环中断外层循环时，两个循环都终止了。<br>注意，这个例子为for语句添加了标签，有一个代码块作为该for语句的标签。</p>
<p>要牢记，程序的执行控制不能跳至为没有包含break语句的代码块定义的标签。<br>例如下面程序是无效的，不能通过编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//This program contains an error</div><div class="line">class BreakErr</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		one:for(int i = 0;i &lt; 3;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.print(&quot;Pass&quot;+i+&quot;:&quot;)</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		for(int j = 0;j &lt; 100;j++)</div><div class="line">		&#123;</div><div class="line">			if(j == 10) break one; //WRONG</div><div class="line">			System.out.print(j+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为具有标签one的循环没有包含break语句，所以不能从该代码块中转移出程序的执行控制。</p>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之类]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>6.1 类的基础知识</strong></p>
<p>1.</p>
<pre><code>在类中定义的数据或变量称为实例变量，代码包含在方法中。在类中定义的方法和变量都称为类的成员。在大多数类中，实例变量由该类定义的方法进行操作和访问。
</code></pre><p>一次，作为一般规则，方法决定了类中数据的使用方式。</p>
<pre><code>在类中定义的方法之所以被称为实例变量，是因为类的每个实例（即类的每个对象）都包含这些变量的副本。因此，相对于其他数据，每个对象的数据是独立的、唯一的。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Box</div><div class="line">&#123;</div><div class="line">	double width;</div><div class="line">	double height;</div><div class="line">	double depth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>类的声明仅创建一个模板，它没有创建实际的对象。

实际创建一个对象：
Box box = new Box();
执行这条语句后，box就变成了类Box类的一个实例。因此，它在“物理上”是真实存在的。

每次创建类的实例时，就创建了包含这个类定义的每个实例变量副本的对象。因此，每个Box对象都包含它自己的实例变量(width,height,depth)的副本。

下面使用Box类的完整程序：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Box</div><div class="line">&#123;</div><div class="line">	double width;</div><div class="line">	double height;</div><div class="line">	double depth;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">class BoxDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Box box = new Box();</div><div class="line">		double vol;</div><div class="line">			</div><div class="line">		box.width = 10;</div><div class="line">		box.height = 20;</div><div class="line">		box.depth = 15;</div><div class="line">			</div><div class="line">		vol = box.width * box.height * box.depth;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Volume is &quot;+ vol);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>应当将包含这个程序的文件命名为BoxDemo.java，因为main()方法位于BoxDemo类中，而不是在Box类中。当编译程序时，将会创建两个.class文件，
</code></pre><p>一个是为Box类创建的，另一个是为BoxDemo创建的。Java编译器自动将每个类放入到各自的.class文件中。并非严格要求将Box类和BoxDemo类放入同一个源文件中，<br>可以将他们分别放置到自己的文件中，命名为Box.java和BoxDemo.java.</p>
<p><strong>6.2 声明对象</strong></p>
<p>1.<br>    当创建一个类时，是在创建一个新的数据类型。可以使用这个类声明该类型的对象。然而，得到一个类的对象需要两个步骤。<br>    首先，必须声明类类型的一个变量。这个变量没有定义对象。反而，它只是一个引用对象的变量。<br>    然后，需要获取对象实际的物理副本，并将其赋值给那个变量，并将其赋给那个变量。可以使用new运算符完成这个操作。</p>
<pre><code>new运算符动态的（在运行时）为对象分配内存，并返回指向对象的引用。这个引用基本上是由new为该对象分配的内存地址，然后将这个引用存储在变量中。
因此在Java中，所有类对象都必须动态分配。
例如：
Box box;
box = new Box();
变量box只是保存了实际Box对象的引用(内存地址)；

为什么不需要为整数或字符这些类型使用new运算符？
答案是Java的基本类型不是作为对象实现的。反而，他们是作为“常规”变量实现的。这样做的目的是提高效率。

new运算符在运行时为对象分配内存，理解这一点很重要。这种方式的优点是，可以创建在程序运行期间所需要的任意数量的对象。
但是，内存是有限的，所以new运算符可能由于内存不足而不能为对象分配内存。

类和对象的区别：
类创建了一种新的、可用于创建对象的类型。也就是说，类创建了一个逻辑框架，该框架定义了类成员之间的关系。当声明类对象时，
将创建类的实例。因此，类是逻辑结构，对象是物理实体（也就是说，对象占用内存中空间）。
</code></pre><p><strong>6.3 为对象引用变量赋值</strong></p>
<p>1.<br>    Box b1 = new Box();<br>    Box b2 = b1;</p>
<pre><code>你可能认为b2被赋值为b1所引用对象的副本的引用。也就是说，你可能认为b1和b2引用的是相互独立的、不同的对象。但是这种想法是作物的。
反而，这段代码执行后，b1和b2会引用同一个对象。将b1赋值给b2不会分配内存，也不会复制原始对象的任何部分，而只是简单的使b2引用b1所引用的同一个对象。
因此，通过b2对对象所做的任何修改，都将影响b1所引用的对象，因为他们本来就是同一个对象。

即b1(指向) ---&gt; Box对象(width、height、depth) &lt;--- （指向）b2
b1和b2都是对象引用变量，b2 = b1,只是将b1引用变量赋值给b1，b1和b2都是引用变量，都指向同一个Box对象。

尽管b1和b2都引用同一个对象，但是他们没有以任何方式链接在一起。例如,对b1的后续赋值，只是简单的将b1与原始对象“脱钩”，
不影响对象本身，也不影响b2.例如：
Box b1 = new Box();
Box b2 = b1;
//...
b1 = null;
在此,b1被设置为null,但是b2仍然指向原来的对象。

请记住：
当一个对象引用变量赋值为另一个对象引用变量时，不是创建对象的副本，而是创建引用的副本。
Box box = new Box(); //box为对象引用变量，new Box()为创建的对象。
</code></pre><p><strong>6.4 返回值和形参、实参</strong></p>
<p>1.返回值</p>
<pre><code>关于返回值，需要理解的重点有两点：
(1)方法返回值的类型必须和方法指定的返回值类型兼容。例如如果方法的返回类型是boolean，就不能返回整数。
(2)用于接收方法返回值的变量,也必须和方法指定的返回值类型兼容。
</code></pre><p>2.形参和实参</p>
<pre><code>形参是由方法定义的、当调用方法时用于接收数值的变量。
实参是当调用方法时传递给方法的数值。
</code></pre><p><strong>6.5 构造函数</strong></p>
<p>1.<br>    构造函数在创建对象之后立即初始化对象。构造函数的名称和包含它的类名相同并且在语法上和方法类似。<br>    构造函数没有返回类型，也不返回void类型。这是因为类构造函数的返回类型隐式的为类本身。</p>
<pre><code>一旦定义了构造函数，就会在创建对象之后、new运算符完成之前，立即自动调用构造函数。
构造函数的任务是初始化对象的内部状态，因而创建实例的代码将会得到一个被完全初始化的、可立即使用的实例。

如果没有显示的为类定义构造函数，Java会为类创建默认构造函数。默认构造函数自动的将所有实例变量初始化为其默认值。
对于数值类型、引用类型和boolean类型，这个默认值分别为0、null和false.

一旦定义了自己的构造函数，就不在使用默认的构造函数了。
</code></pre><p><strong>6.6 this关键字</strong></p>
<p>1.<br>    有时，方法需要引用调用它的对象（对象调用方法，如：对象.方法）。为了能够解决这种操作，Java定义了this关键字。<br>    可以在任何方法中使用this引用当前对象。也就是说，this总是引用调用方法的对象。</p>
<pre><code>在Java中，在同一个或所包含的作用域内声明两个同名的变量时非法的。有趣的是，局部变量，包括方法的形参，可以和类的实例变量重名。
然而，当局部变量和实例变量具有相同的名称时，局部变量隐藏了（覆盖了）实例变量。为了解决这个问题，可是使用this关键字，解决
局部变量和实例变量之间可能发生的任何名称空间冲突问题。
例如：
Box(double width, double height, double depth)
{
    this.width = width;  //this.width如果不加this,则width默认使用的是形参中的width.
    this.height = height;
    this.depth = depth;
}
</code></pre><p><strong>6.7 垃圾回收</strong></p>
<p>1.<br>    Java采用一种不同的方法——自动解除分配的内存。完成该项工作的技术被称为垃圾回收（garbage collection).<br>    他的工作原理是：当一个对象的引用不在存在时，就认为该对象不在需要，并且可以回收该对象占用的内存。</p>
<pre><code>在程序运行期间，之后零星的发生垃圾回收（如果确定发生垃圾回收的话）。不会简单的因为一个或多个对象不在需要就进行垃圾回收。
</code></pre><ol>
<li><p>finalize()方法<br> 有时，对象销毁时需要执行一些动作。例如，如果对象包含一些非Java资源，比如文件句柄或字符字体，那么你可能希望确保这些资源在对象<br> 销毁之前释放。为了处理这种情况，Java提供了一种称为“终结”(finalization)的机制。通过使用终结机制，可以定义当对象即将被垃圾回收器<br> 回收时发生的特定动作。</p>
<p> 为了给类添加终结器(finalizer)，可以简单的定义finalize()方法。当即将回收类的对象时，Java运行时会调用该方法。在finalize()方法内部，<br> 可以指定在销毁对象之前必须执行的那些动作。，在释放资源之前，Java运行时为对象调用finalize()方法。 </p>
<p> finalize()方法的一般形式如下所示：<br> protected void finalize()<br> {</p>
<pre><code>//finalization code here
</code></pre><p> }</p>
<p> 注意：只有在即将进行垃圾回收之前调用finalize()方法，例如当对象超出其作用域时不会调用该方法。</p>
</li>
</ol>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之方法和类的深入分析]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E7%9A%84%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>7.1 重载方法</strong></p>
<pre><code>在Java中，可用在同一个类中定义两个或多个共享相同名称的方法，这要他们的参数声明不同即可。
当出现这种情况时，这些方法被称为重载的(overloaded)，并且这一过程被称为方法重载(method overloading).
方法重载是Java支持多态性的方式之一。

当调用重载方法时，Java使用参数的类型或数量决定实际调用哪个版本。因此，重载方法在参数类型或数量方面必须有所区别。
虽然重载方法可以返回不同的类型，但是单靠返回类型不足以区分方法的多个版本。当Java遇到对重载方法的调用时，简单的执行
方法形参与调用中所使用的实参相匹配的版本。

当调用重载方法时，Java在用来调用方法的实参和形参之间查找匹配。然而，这个匹配并不需要总是精确的，当找不到精确的匹配对象时候、，
Java的自动类型转换在重载版本的判断中可以发挥作用。
例如，如果没有定义test(int)而定义了test(double),则当执行test(8)时，则会执行test(double).
即，在没有找到test(int)版本时，Java会将整型int i，自动提升为double类型，并调用test(double).
当然，如果定义了test(int)版本，就会调用该版本。只有当没有找到精确的匹配时，Java才会使用自动类型转换。
</code></pre><p><strong>7.3 参数传递的深入分析</strong></p>
<pre><code>对于计算机语言来说，向子例程传递参数的方式通常有两种。
第一种方式是值调用(call-by-value),这种方式将实参的值复制到子例程的形参中。所以，对子例程参数进行的修改不会影响实参。
第二种方式是引用调用(call-by-reference)，在这种情况下，将对实参的引用(而不是实参的值)传递给形参。在子例程中，
该引用用于访问在调用中标识的实参。这意味着对子例程参数进行的修改会影响用于调用子例程的实参。

尽管Java使用值调用传递所有的实参，但是根据所传递的是基本类型还是引用类型，精确效果是不同的。

(1)当为方法传递基本数据类型，使用值传递，因此会得到实参的副本，并且对接收实参的形参进行操作，对方法外部没有影响。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Test</div><div class="line">&#123;</div><div class="line">	void meth(int i, int j)</div><div class="line">	&#123;</div><div class="line">		i *= 2;</div><div class="line">		j /= 2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class CallByValue</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Test ob = new Test();</div><div class="line">		int a = 15,b = 20;</div><div class="line">		System.out.println(&quot;a and b before call: &quot;+a+&quot; &quot;+b);</div><div class="line">		ob.meth(a,b);</div><div class="line">		System.out.println(&quot;a and b after call &quot;+a+&quot; &quot;+b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
a and b before call: 15 20
a and b after call: 15 20


(2)当方法传递对象时，情况就有所不同了，因为对象时通过引用对用传递的。请牢记，当创建类变量时，只是创建指向对象的引用。
因此，当将引用传递给方法时，接收引用的形参所引用的对象与实参引用的是同一个对象。这意味着对象就好像是通过引用调用传递给方法的。
在方法内修改对象会影响到作为实参的对象。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Test</div><div class="line">&#123;</div><div class="line">	int a ,b;</div><div class="line">	Test(int a,int b)</div><div class="line">	&#123;</div><div class="line">		a = i;</div><div class="line">		b = j;</div><div class="line">	&#125;</div><div class="line">	void meth(Test o)</div><div class="line">	&#123;</div><div class="line">		o.a *= 2;</div><div class="line">		o.b /= 2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PassObjRef</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Test ob = new Test(15,20);</div><div class="line">		System.out.println(&quot;ob.a and ob.b before call: &quot;+ob.a+&quot; &quot;+ob.b);</div><div class="line">		ob.meth(ob);</div><div class="line">		System.out.println(&quot;ob.a and ob.b after call: &quot;+ob.a+&quot; &quot;+ob.b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
ob.a and ob.b before call: 15 20
ob.a and ob.b after call: 30 10

请记住：
当对象引用传递给方法时，引用本身是使用值调用传递的。但是，由于传递的值引用同一个对象，
因此，值的副本仍然引用相应实参指向的同一个对象。
</code></pre><p><strong>7.5 递归</strong></p>
<pre><code>递归是根据自身定义内容的过程。就Java而言，递归是一个允许方法调用自身的特性。调用的自身的方法被称为递归方法。

许多例程的递归版本，它们的执行速度比与之等价的迭代版本要更慢一些，因为增加了额外的函数调用负担。
递归方法的主要优点是，对于某些算法，使用递归可以创建比迭代版本更清晰并且更简单的版本。例如，某些与人工智能相关的算法类型，使用递归方案最容易实现。

当编写递归方法时，在某个地方必须有一条if语句，用于强制方法返回而不再执行递归调用。如果没有这么做，一旦调用该方法，就永远不会返回。
</code></pre><p><strong>7.6 访问控制</strong></p>
<pre><code>Java的访问修饰符包括public、private以及protected.Java还定义了默认访问级别。只有涉及到继承时才会应用protected.

如果类的某个成员使用public进行修饰，那么该成员可以被任何代码访问。
如果累的某个成员被标识为private,那么该成员只能被所属类的其他成员访问。

这就是为什么main()方法之前总是带有public修饰符了。因为main()方法要有程序之外的代码访问，也就是Java运行时访问。
如果没有使用访问修饰符，那么类成员在它自己的包中默认是公有的，但是在包外不能访问。
</code></pre><p><strong>7.7 理解static</strong></p>
<pre><code>有时候希望定义能够独立于类的所有对象进行使用的成员，即可以创建能够由类本身使用的成员，而不需要通过特定实例的引用。
为了创建这种成员，需要在成员声明的前面使用关键字static.如果成员被声明为静态的，就可以在创建类的任何对象之前访问该成员，
并不需要使用任何对象的引用。方法和变量都可以声明为静态的。main()方法是常见的静态成员的例子。main()方法被声明为静态的，
是因为需要在创建所有对象之前调用该方法。

被声明为静态的实例变量，在本质上是实例变量。当声明类的对象时，不会生成静态变量的副本。相反，类的所有实例共享相同的静态变量。

声明静态的方法有几个限制：
它们只能直接调用其他静态方法。
它们只能直接访问静态数据。
它们不能以任何方式引用this或super关键字。

为了初始化静态变量，如果需要进行计算，可以声明静态代码块。静态代码块只执行一次，当第一次加载类时执行。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Class UseStatic</div><div class="line">&#123;</div><div class="line">	static int a =3;</div><div class="line">	static int b;</div><div class="line">	</div><div class="line">	static void meth(int x)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;x =&quot;+x);</div><div class="line">		System.out.println(&quot;a =&quot;+a);</div><div class="line">		System.out.println(&quot;b =&quot;+b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//因为b需要计算得到值，故需要放到静态代码块中，如果b不需要计算进行初始化，则可以完成向初始化a一样。</div><div class="line">	static</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Static block initialized.&quot;);</div><div class="line">		b= a * 4;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		meth(42);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Static block initialized.
x = 42
a = 3
b = 12

只要加载UseStatic类，就会运行所有使用static声明的语句。首先，a被设置为3，然后执行静态代码块，输出一条消息，并将b初始化为a*4，即12.
然后调用main()方法，该方法调用meth()方法，将42传递给参数x。

在定义静态方法和静态变量的类的外部，不依赖于任何对象就可以使用这些静态成员。为此，只需要指定类的名称后面跟随点运算符。
</code></pre><p><strong>7.8 final介绍</strong></p>
<pre><code>可以将变量声明为final.这么做可以防止修改变量的内容，本质上是将变量变成为常量。这意味着fianl变量必须在声明时进行初始化。
可以通过两种方式之一完成这个工作：
(1)第一种方式：最为常见
final int FINAL_VALUE = 1;
final变量名全部大写，这是一种常见的编码约定。
(2)可以在构造函数中为其赋值。

除了可以将变量声明为final之外，方法参数和局部变量也可以声明为final.
将参数声明为final，可以防止在方法中修改参数。将局部变量声明为final,可以防止多次为其赋值。

关键字final也可以应用于方法，但是含义与应用于变量有本质上的区别。对final的这种补充用法，在后面介绍。
</code></pre><p><strong>7.10 嵌套类和内部类</strong></p>
<pre><code>可以在类的内部定义另一个类，这种类就是所谓的嵌套类。嵌套类的作用域被限制在包含它的类中。因此，如果类B是在类A中定义的，那么类B不能独立于类A而存在。
嵌套类可以访问包含它的类的成员，包括私有成员。但是，包含类（包含嵌套类的类）不能访问嵌套类的成员。
嵌套类直接在包含类中作为成员进行声明。也可以在代码块中声明嵌套类。

嵌套类有两种类型：静态的和非静态的。静态的嵌套类是应用了static修饰符的嵌套类，，因为是静态的，嵌套类不能直接引用包含类的非静态成员。
因为这个限制，所以很少使用静态的嵌套类。

嵌套类最重要的类型是内部类。内部类是非静态的嵌套类，可以访问外部类的所有变量和方法，并且可以直接引用他们，
引用方式与外部类的其他非静态成员使用的方式相同。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Outer</div><div class="line">&#123;</div><div class="line">	int outer_x = 100;</div><div class="line">	</div><div class="line">	void test()</div><div class="line">	&#123;</div><div class="line">		Inner inner = new Inner();</div><div class="line">		inner.display();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class Inner</div><div class="line">	&#123;</div><div class="line">		void display()</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;display: outer_x =&quot;+outer_x);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class InnerClassDemo</div><div class="line">	&#123;</div><div class="line">		public static void main(String[] args)</div><div class="line">		&#123;</div><div class="line">			Outer outer = new Outer();</div><div class="line">			outer.test();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
display: outer_x = 100;

被命名为Inner的内部类是在Outer类的作用域内定义的。所以，Inner类中所有代码，都可以直接访问变量outer_x。
只能在Outer类的作用域内创建Inner类的实例，认识到这一点很重要。如果试图在Outer类之外的任何代码块中实例化Inner类，Java编译器就会生成错误。
一般来说，必须通过封闭的作用域创建内部类的实例。

内部类可以访问外部类的所有成员，但是反过来不可以。内部类的成员只能在内部类的作用域内才是已知的，并且外部类不能使用。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">class Outer</div><div class="line">&#123;</div><div class="line">	int outer_x = 100;</div><div class="line">	</div><div class="line">	void test()</div><div class="line">	&#123;</div><div class="line">		Inner inner = new Inner();</div><div class="line">		inner.display();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class Inner</div><div class="line">	&#123;</div><div class="line">		int y = 10;</div><div class="line">		</div><div class="line">		void display()</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;display: outer_x &quot;+outer_x);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void showy()</div><div class="line">	&#123;</div><div class="line">		System.out.println(y) //error, y not known here!</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class InnerClassDemo</div><div class="line">	&#123;</div><div class="line">		public static void main(String[] args)</div><div class="line">		&#123;</div><div class="line">			Outer outer = new Outer();</div><div class="line">			outer.test();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>在此，y被声明为Inner类的实例变量。因此，在Inner类的外部是不知道y,并且showy()方法也不能使用它。

尽管我们一直主要关注的是，在外部类的作用域内作为成员声明的内部类，但是也可以在任何代码块的作用域内定义内部类。
例如，可以在由方法定义的代码块中，甚至在for循环体内定义嵌套类。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Outer</div><div class="line">&#123;</div><div class="line">	int outer_x = 100;</div><div class="line">	</div><div class="line">	void test()</div><div class="line">	&#123;</div><div class="line">		for(int i = 0; i &lt; 10; i++)</div><div class="line">		&#123;</div><div class="line">			class Inner</div><div class="line">			&#123;</div><div class="line">				void display()</div><div class="line">				&#123;</div><div class="line">					System.out.println(&quot;display:outer_x =&quot;+outer_x);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			Inner inner = new Inner();</div><div class="line">			inner.display();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class InnerClassDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Outer outer = new Outer();</div><div class="line">		outer.test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100
display: outer_x = 100

尽管嵌套类并不是对于所有的情况都适用，但是当处理事件时他们特别有用，适用内部类简化处理特定类型的事件所需要的代码，还将学习匿名内部类。
</code></pre><p><strong>7.11 String类</strong></p>
<pre><code>创建的每一个字符串实际上都是String类型的对象。即使是字符串常量，实际上也是String对象。
例如：
System.out.println(&quot;This is a String,too&quot;);
字符串&quot;This is a String,too&quot;就是一个String对象。

对于字符串需要理解的第二点是：String类型的对象是不可变的；一旦创建的一个String对象，其内容就不能再改变，
尽管这看起来好像是一个严重的限制，但实际上不是，有两个原因：
(1)如果需要改变一个字符串，总是可以创建包含修改后内容的新字符串。
(2)Java定义了String类的对等类，分别称为StringBuffer和StringBuilder，他们允许修改字符串，所以在Java中仍然可以使用所有常规的字符串操作。
</code></pre><p><strong>7.12 使用命令行参数</strong></p>
<pre><code>当运行程序时，有可能希望为程序传递信息，这可以通过main()方法传递命令行参数来完成。命令行参数是执行程序时在命令行上紧跟程序名称之后的信息。
在Java程序中访问命令行参数非常容易——他们作为字符串存储在String数组中，并传递给main()方法的args参数。
第一个命令行参数存储在args[0]中，第二个存储在args[1]中，以此类推。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class CommandLine</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		for(int i = 0; i &lt; args.length; i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;args[&quot;+i+&quot;]:&quot;+args[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>尝试向下面那样执行该程序：
java CommandLine this is a test 100 -1
输出：
args[0]:this
args[1]:is
args[2]:a
args[3]: test
args[4]:100
args[5]:-1

请记住：所有命令行参数都是作为字符串传递的。必须手动将数值转换成他们的内部形式。
</code></pre><p><strong>7.13 varargs:可变长度参数</strong><br>(1)<br>    使用可变长度参数的方法称为可变参数方法(variable-arity method)或简称varargs方法。</p>
<pre><code>可变长参数通过三个句点(...)进行标识。例如：
void varTest(int ...v);
这种语法告诉编译器，可以使用零个或更多个参数调用varTest()方法。所以,v被隐式的声明为int[]类型数组。
因此，在varTest()方法内部，可以使用常规的数组语法访问v.例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class VarArgs</div><div class="line">&#123;</div><div class="line">	static void varTest(int ...v)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Numbers of args:&quot;+v.length+&quot;Contents:&quot;);</div><div class="line">		</div><div class="line">		for(int x:v)</div><div class="line">		&#123;</div><div class="line">			System.out.println(x+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		varTest(10);	//1 arg</div><div class="line">		varTest(1,2,3); //3 arg</div><div class="line">		varTest();	//0 arg</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Numbers of args: 1 Contents: 10
Numbers of args: 3 Contents: 1 2 3 
Numbers of args: 0 Contents:

首先，在varTest()方法内部，v是作为数组进行操作的。这是因为V是一个数组。语法“...&quot;只不过是告诉编译器将要使用可变长参数，
并且这些参数将被存储在由v引用的数组中。
其次，在main()方法中，使用不同数量的参数调用varTest()方法，包括根部不适用任何参数。参数被自动放进一个数组中，并传递给v。对于没有参数的情况，数组的长度为0.

使用可变长度参数的方法也可以具有”常规“参数。但是，可变长度参数必须是方法最后声明的参数,并且只能有一个可变长参数。例如：
int doIt(int a,int b,double c,int ... vals);
</code></pre><p>(2)重载varargs方法</p>
<pre><code>可以重载可变长参数。例如：
static void varTest(int ... v);
static void varTest(boolean ... v);
static void varTest(int a, int b, double c,int ... v);
</code></pre><p>(3)varargs方法与模糊性</p>
<pre><code>当重载带有可变长度参数的方法时，可能会导致某些意料之外的错误。这下错误涉及模糊性，
因为可能会为重载的varargs方法创建含糊不清的调用。例如：
static void varTest(int ... v);
static void varTest(boolean ... v);
static void varTest(String ... v);
当调用varTest()时，不知道调用上面3个函数中的哪一个。

又例如：
static void varTest(int ... v);
static void varTestI(int n, int ... v);
当调用varTest(1)时，不知道调用上面2个函数中的哪一个。

因此类似上面显示的模糊性错误，有时需要放弃重载，并简单的使用不同的方法名。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之继承]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>8.1 继承的基础知识</strong></p>
<pre><code>Java支持单继承，但不支持多继承。

尽管子类包含超类的所有成员，但是子类不能访问超类中被声明为私有的所有成员。
</code></pre><p><strong>8.2 使用super关键字</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Box</div><div class="line">&#123;</div><div class="line">	doubel width;</div><div class="line">	doubel height;</div><div class="line">	doubel depth;</div><div class="line">	</div><div class="line">	Box(doubel w,doubel h,doubel d)</div><div class="line">	&#123;</div><div class="line">		width = w;</div><div class="line">		height = h;</div><div class="line">		depth = d;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class BoxWeight extents Box</div><div class="line">&#123;</div><div class="line">	doubel weight;</div><div class="line">	</div><div class="line">	BoxWeight(doubel w,doubel h,doubel d,doubel m)</div><div class="line">	&#123;</div><div class="line">		width = w;  //当超类中width是私有成员时，就不能这样赋值，只能使用super()进行赋值。</div><div class="line">		height = h;</div><div class="line">		depth = d;</div><div class="line">		weight = m;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>但是，有时候希望创建只有自己才知道实现细节的超类（也就是说将超类的数据成员保存为私有）。对于这种情况，子类就不能直接访问或初始化这些变量。
因为封装是OOP的主要特性，所以Java为这一个问题提供了一个解决的方案是很正常的。
无论何时，当子类需要引用它的直接超类时，都可以使用关键字super.

super有两种一般用法：第一种用于调用超类的构造函数；第二种用于访问超类中被子类的某个成员隐藏的成员。

(1)使用super调用超类的构造函数。

格式：super(arg-list);
其中，arg-list是超类中构造函数中需要的全部参数，并且super()总是子类的构造函数中执行的第一条语句。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class BoxWeight</div><div class="line">&#123;</div><div class="line">	BoxWeight(doubel w,doubel h,doubel d,doubel m)</div><div class="line">	&#123;</div><div class="line">		super(w,h,d);</div><div class="line">		weight = m;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>其中，BoxWeight()使用参数w、h和d调用super(),这会调用Box类的构造函数，使用这些值初始化width、height和depth变量。
BoxWeight自身不在初始化这些值，而是只需要初始化自身特有的值：weight.这样一来，Box类就可以将这些变量声明为私有的。

总结：当子类调用super()时，会调用直接超类的构造函数。因此，super()总是引用调用类的直接超类。即使在多层次继承中也是如此。
      此外，super()总是子类构造函数中执行的第一句。

(2)使用super访问超类中被子类的某个成员隐藏的成员。

super的这种一种用法和this有些类似，只不过super总是引用超类。
格式：super.member
其中，member既可以是方法，也可以是实例变量。

最常用的形式情况是,子类的成员名称隐藏了超类中的同名成员。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class A </div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extents A</div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">	</div><div class="line">	B(int a,int b)</div><div class="line">	&#123;</div><div class="line">		super.i = a;</div><div class="line">		i = b;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void show()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;i in superclass:&quot;+super.i);</div><div class="line">		System.out.println(&quot;i in subclass:&quot;+i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SueSuper</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		B subOb = new B(1,2);</div><div class="line">		subOb.show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
i in superclass: 1
i in subclass: 2
</code></pre><p>8.4 构造函数的调用时机</p>
<pre><code>答案是：在类层次中，从超类到子类按照继承的顺序调用构造函数。
</code></pre><p><strong>8.5 方法重写</strong></p>
<pre><code>在类层次中，如果子类的一个方法和超类的一个方法具有相同的名称和类型签名，那么称子类中的这个方法重写了超类中相应的那个方法。
当子类中调用被重写的方法时，总是调用有子类定义的版本，由超类定义的版本会被隐藏。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class A</div><div class="line">&#123;</div><div class="line">	int i,j;</div><div class="line">	</div><div class="line">	A(int a,int b)</div><div class="line">	&#123;</div><div class="line">		i = a;</div><div class="line">		j = b;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void show()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;i and j:&quot;+i+&quot; &quot;+j);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extents A</div><div class="line">&#123;</div><div class="line">	int k;</div><div class="line">	</div><div class="line">	B(int a,int b,int c)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">		k = c;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void show()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;k:&quot;+k);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Override</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		B subOb = new B(1,2,3);</div><div class="line">		</div><div class="line">		subOb.show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
k:3
当在类型B的对象上调用show()方法时，使用的是B中定义的版本。也就是说，类B中的show()版本覆盖了在类A中声明的版本。

如果希望访问到超类中被重写的方法，可以通过super完成该操作。例如将上面的类B改成如下形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class B extents A </div><div class="line">&#123;</div><div class="line">	int k;</div><div class="line">	</div><div class="line">	B(int a,int b,int c)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">		k = c;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void show()</div><div class="line">	&#123;</div><div class="line">		super.show(); //this calls A&apos;s show()</div><div class="line">		System.out.println(&quot;k:&quot;+k);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出为：
i and j: 1,2
k:3

只有当两个方法的签名(方法名称和参数列表的顺序和类型)相同时，才发生重写。如果不相同，那么这两个方法只是简单的重载关系。
</code></pre><p><strong>8.6 动态方法调度</strong></p>
<pre><code>方法重写形成了动态方法调度(dynamic method dispatch)的基础，动态方法调度是Java中最强大的功能之一。动态方法调度是一种机制，
通过这种机制可以在运行时，而不是在编译时解析对重写方法的调用。动态方法调度很重要，因为这是Java实现运行时多态的机理所在。

首先在此声明一个重要的原则：超类引用变量可以指向子类对象。Java利用这一事实，在运行时解析对重写方法的调用。
下面是实现原理：当通过超类引用调用重写的方法时，Java根据在调用时所引用对象的类型来判断调用哪个版本的方法。
因此，这个决定是在运行时做出的。如果引用不同的对象，就会调用不同版本的重写方法。换句话说，是当前正在引用的对象
的类型（而不是引用变量的类型）决定了要执行哪个版本的重写方法。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class A</div><div class="line">&#123;</div><div class="line">	void callme()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside A&apos;s callme method&quot;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extents A </div><div class="line">&#123;</div><div class="line">	void callme()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside B&apos;s callme method&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class C extents A </div><div class="line">&#123;</div><div class="line">	void callme()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside C&apos;s callme method&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class DisPatch</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		A a = new A();</div><div class="line">		B b = new B();</div><div class="line">		C c = new C();</div><div class="line">		A r;</div><div class="line">		</div><div class="line">		r=a;</div><div class="line">		r.callme():</div><div class="line">		</div><div class="line">		r=b;</div><div class="line">		r.callme();</div><div class="line">		</div><div class="line">		r=c;</div><div class="line">		r.callme();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Inside A&apos;s callme method
Inside B&apos;s callme method
Inside C&apos;s callme method
</code></pre><p><strong>8.7 使用抽象类</strong></p>
<pre><code>下面的程序创建了一个超类Figure,该类存储二维对象的尺寸。该类还定义了一个area()方法，该方法计算对象的面积。
这个程序从Figure类派生了两个子类。第一个子类是Rectangle(矩形),第二个子类是Triangle(三角形)，每个子类都重写了area()方法，
从而可以相应的返回矩形和三角形的面积。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">class Figure</div><div class="line">&#123;</div><div class="line">	double dim1;</div><div class="line">	double dim2;</div><div class="line">	</div><div class="line">	Figure(double a, double b)</div><div class="line">	&#123;</div><div class="line">		dim1 = a;</div><div class="line">		dim2 = b;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	doubel area()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Area for Figure is undefined.&quot;)</div><div class="line">		return 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Rectangle extents Figure</div><div class="line">&#123;</div><div class="line">	Rectangle(double a, double b)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	double area()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside Area for Rectangle.&quot;);</div><div class="line">		return dim1*dim2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Triangle extents Figure</div><div class="line">&#123;</div><div class="line">	Triangle(double a,double b)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	double area()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside Area for Triangle.&quot;);</div><div class="line">		return dim1*dim2/2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class FindAreas</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Figure f = new Figure(10,10);</div><div class="line">		Rectangle r = new Rectangle(9,5);</div><div class="line">		Triangle t = new Triangle(10,8);</div><div class="line">		Figure figure;</div><div class="line">		</div><div class="line">		figure = f;</div><div class="line">		System.out.println(&quot;Area is&quot;+figure.area());</div><div class="line">		</div><div class="line">		figure = r;</div><div class="line">		System.out.println(&quot;Area is&quot;+figure.area());</div><div class="line">		</div><div class="line">		figure = t;</div><div class="line">		System.out.println(&quot;Area is&quot;+figure.area());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Area for Figure is undefined.
Area is 0
Inside Area for Rectangle.
Area is 45
Inside Area for Triangle.
Area is 40

有时候会希望创建这样一种超类——只定义被所有子类共享的一般形式，而让每个子类填充细节。这种类决定了子类必须实现的方法的本质。
例如，分析Triangle类，如果没有定义area()方法，它将没有意义。对于这种情况，你会希望有某些方式能够确保子类确实、真正的重写了所有必需的方法。
Java对这个问题提供的解决方法是抽象方法(abstract method).

可以通过abstract类型修饰符，要求特定的方法必须被子类重写。这些方法有时被称做子类责任(subclass responsibility).
因为在超类中没有提供实现。因此，子类必须重写他们————不能简单的使用在超类中定义的版本。

为了声明抽象方法，需要使用下面的一般形式：
abstract type name(parameter-list);

任何包含一个或多个抽象方法的类都必须被声明为抽象。为了声明抽象类，只需要简单的在类声明的开头、在class关键字前面使用关键字abstract。
对于抽象类不存在对象。也就是说，不能使用new运算符直接实例化抽象类。这种类的对象是无用的，因为抽象类的定义是不完整的。
此外，不能声明抽象的构造方法，也不能声明抽象的静态方法。抽象类的所有子类，要么实现超类中的所有抽象方法，要么自己也声明为抽象类。
抽象类中可以包含非抽象方法。

将上面的例子，写成抽象的形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">abstract class Figure</div><div class="line">&#123;</div><div class="line">	double dim1;</div><div class="line">	double dim2;</div><div class="line">	</div><div class="line">	Figure(double a,double b)</div><div class="line">	&#123;</div><div class="line">		dim1 = a;</div><div class="line">		dim2 = b;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	abstract double area();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Rectangle extents Figure</div><div class="line">&#123;</div><div class="line">	Rectangle(double a,double b)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	double area()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside Area for Rectangle.&quot;);</div><div class="line">		return dim1*dim2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Triangle extents Figure</div><div class="line">&#123;</div><div class="line">	Triangle(double a,double b)</div><div class="line">	&#123;</div><div class="line">		super(a,b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	double area()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside Area For Triangle.&quot;);</div><div class="line">		return dim1*dim2/2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class AbstractAreas</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Figure f;</div><div class="line">		Rectangle r = new Rectangle(10,10);</div><div class="line">		Triangle t = new Triangle(10,8);</div><div class="line">		</div><div class="line">		f = r;</div><div class="line">		System.out.println(&quot;Area is &quot;+f.area());</div><div class="line">		</div><div class="line">		f = t;</div><div class="line">		System.out.println(&quot;Area is &quot;+f.area());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>尽管不能创建Figure类型的对象，但是可以创建Figure类型的引用变量。因为，Java运行时多态是通过使用超类引用实现的。
因此，必须能够创建指向抽象类的引用，从而可以用于指向子类对象。
</code></pre><p><strong>8.8 在继承中使用final关键字</strong></p>
<pre><code>关键字final有三个用途。
首先，可以用于创建自己命名常量的等价物。
final关键字的另外两个用途是用于继承。

(1)使用final关键字阻止重写

虽然方法重写是Java中最强大的特性之一，但是有时候希望阻止这种情况的发生。为了禁止重写方法，可以在方法中声明的开头使用final作为修饰符。
使用final声明的方法不能被重写。

经方法声明为final，有时可以提高性能：编译器可以自由的内联对这类方法的调用，因为编译器知道这些方法不能被子类重写。当调用小的fanal方法时，
Java编译器通常可以复制子例程的字节码，直接和调用方法的编译代码内联到一起，从而可以消除方法调用所需要的开销。

内联是final方法才有的一个选项。通常Java在运行时动态分析对方法的调用，这称为后期绑定。
但是，因为final方法不能被重写，所以对final方法的调用可以在编译时解析，这称为早期绑定。

(2)使用final关键字阻止继承

有时候希望阻止类的继承。为此，可以在类声明的前面使用final关键字。将类声明为final,就隐式的将类的所有方法声明为final.
因此，将类同时声明为abstract和final是非法的，因为抽象类是不完整的，它依赖子类来提供完整的实现。
</code></pre><p><strong>8.9 Object类</strong></p>
<pre><code>有一个特殊的类，即Object，该类由Java定义的。所有其他类都是Object的子类。也就是说，Object是所有其他类的超类。这意味着Object
类型的引用变量可以引用其他类型的对象。此外，因为数组也是作为类实现的，所以Object类型的变量也可以引用任何数组。

Object类定义了如下方法，这意味着所有对象都可以使用这些方法：

Object clone():        创建一个和将要复制对象完全相同的新对象。
boolean equals(Object object):        判定一个对象是否和另一个对象相等。
void finalize():        在回收不在使用的对象之前调用。
Class&lt;?&gt; getClass():        在运行时获取对象所使用的类
int hashCode():            返回与调用对象相关联的散列值。
void notify():        恢复执行在调用对象上等待的某个线程。
void notifyAll():        恢复执行在调用对象上等待的所有线程。
String toString():         返回一个描述对象的字符串。

void wait():
void wait(long milliseconds):
void wait(long milliseconds, int nanoseconds):         等待另一个线程的执行。

方法getClass()、notify()、notifyAll()以及wait()被声明为final.你可以重写其他方法。


出自：《Java 8编程参考官方教程(第9版)》
</code></pre></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之包和接口]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E5%8C%85%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Java中两个具有创新性的特征：包和接口。</p>
<p>包是多个类的容器，他们用于保持类的名称空间相互隔离。包以分层方式进行存储，并显示导入到新类的定义中。</p>
<p>接口：使用关键字interface,可以标识一套由一个或多个类实现的方法。传统的接口自身不实际定义任何实现。<br>尽管接口和抽象类很相似，但是接口还有其他功能：一个类可以实现多个接口。相比之下，类只能继承单个超类（抽象类或其他类）。</p>
<p><strong>9.1 包</strong></p>
<pre><code>在前面几章中，每个示例类的名称均取自相同的名字空间。这意味着必须为每个类使用唯一的名称，以避免名字冲突。
如果不具备一些管理名称空间的方法，那么在命名类时，很快就会用完方便的、描述性的名称。还需要一些方法，
用于确保为类选择的名称是唯一的，不会与其他程序员选择的名称发生冲突。Java提供了一种机制，将类的名称空间划分为更便于管理的块。
这种机制就是包。

包既是一种命名机制，也是一种可见性控制机制。可以在包中定义包外部的代码所不能访问的类，也可以定义只有相同包中的其他成员可以访问的类。
这允许类之间具有联系紧密的信息，但不会将他们暴露给外面的世界。
</code></pre><p><strong>9.11 定义包</strong></p>
<pre><code>创建包很容易：只需要将package命令作为Java源文件中的第一条语句。在该文件中声明的所有类都属于指定的包。
package语句定义了一个名字空间，类在其中进行存储。如果遗漏了package语句，类名将被放入到默认包中，默认包没有名称。

例如：
package MyPackage;
Java使用文件系统目录存储包。例如，对于所有声明为属于MyPackage包的类来说，它们的.class文件必须存储在MyPackage目录中，
而且目录名称必须和包的名称精确匹配，包括大小写。

多个文件可以包含相同的package语句。package语句简单的指定了在文件中定义的类属于哪个包。不排除其他文件中的其他类也是相同包的一部分。
大部分真实的包都会扩展到许多文件中。
</code></pre><p><strong>9.12 包查找与CLASSPATH</strong></p>
<pre><code>正如刚才解释的，包是通过路径反应的。这会产生一个重要问题：Java运行时系统如何才能知道在什么地方查找所创建的包？
答案有三部分;
首先，默认情况下，Java运行时系统使用当前工作目录作为起始点。因此，如果包位于当前目录的子目录中，就能够找到它。
其次，可以通过设置CLASSPATH环境变量来指定目录或路径。
最后，可以为Java和Javac使用—classpath选项，进而为类指定路径。
</code></pre><p><strong>9.2 访问保护</strong></p>
<pre><code>包使访问控制更上一层楼。类和包都是封装以及包含变量与方法的名称空间和作用域的手段。包所谓类和其它子包的容器，
类作为数据和代码的容器。类是Java中最小的抽象单元。
Java为类成员提供了4中不同类别的可见性。
(1)相同包中的子类
(2)相同包中的非子类
(3)不同包中的子类
(4)既不是相同包中的类，也不是子类。
对于类成员，所有声明public的成员可以在任何地方访问，所有声明为private的成员在类的外部不可见。
如果某个成员没有做明确的访问规定，该成员对于子类以及相同包中的其他成员可见，这是默认访问级别。
如果希望允许某个元素在当前包的外部可见，但是只允许对类的直接子类可见，那么可以将元素声明为protected.

对于类，非嵌套类只有两种可以访问的级别：默认级别和公有级别。
如果将类声明为public，那么类对于任何其他代码都是可以访问的。
如果某个类具有默认访问级别，那么这个类只能被相同包中的其他类访问。
如果某个类是公有的，那么这个类必须是在文件中声明的唯一公有类，并且文件的名称必须和类的名称相同。
</code></pre><p><strong>9.3 导入包</strong></p>
<pre><code>Java提供了import语句，一旦导入类或包，就可使用名称直接引用类(如果不使用import，引用类需要使用包命.类名)。

在源文件中import语句紧跟package语句(如果有的话)之后,并且在所有类定义之前。

import语句的一般形式：
import pkg1 [.pkg2].(classname | *);
最后显示指定一个类名或*,*指示Java编译器应当导入整个包中的类。
例如：
import java.util.Date;
import java.io.*;

Java提供所有标准类都存储在名为Java的包中。基本的语言函数存储在java包的java.lang子包中。
所以Java编译器隐式的为所有程序导入了java.lang包。

如果使用*形式导入位于两个不同的包中，但具有相同名称的类，编译器不会进行提示，但是当试图使用其中一个类时，编译器就会进行提示。
对于这种情况，会生成编译时错误，并且必须显示的命名指定包中的类。
</code></pre><p><strong>9.4 接口</strong> </p>
<p>使用interface关键字，可以指定类必须执行哪些工作，而不指定如何进行这些工作。接口在语法上和类相似，但是他们没有实例变量，<br>并且它们的方法没有方法体。</p>
<p>一旦定义了接口，任何数量的类都可以实现接口。此外，一个类可以实现任意数量的接口。</p>
<p>为了实现接口，类必须创建完整的由接口定义的方法集。但是，每个类都可以自由决定自身的实现细节。通过提供关键字interface，<br>Java允许你完全利用多态机制的“一个接口，多种方法”特征。</p>
<p>接口被设计成支持运行时动态方法解析。通常情况下，为了能够从一个类中调用另一个类的方法，在编译时这两个类都需要存在，<br>进而使Java编译器能够进行检查以确保方法签名是兼容的。这个要求本身造成了一个静态的并且是不可扩展的类系统。对于这类系统，<br>在类层次中功能不可避免的被堆积的越来越高，导致整个机制中的子类越来越多。设计接口的目的就是为了避免这种问题。<br>接口断开了一个方法或一系列方法的定义与继承层次之间的关联。由于接口在不同的类层次中，因此就类层次而言，<br>不相关的类可以实现相同的接口。这是接口的真正功能所在。</p>
<p>9.4.1 定义接口</p>
<pre><code>接口的定义和类相似。一般形式为：
access interface name
{}

如果没有提供访问修饰符，将采用默认级别，并且只有声明接口的包中的其他成员才能访问接口。
如果将接口声明为public，那么所有代码都可以使用接口。对于这种情况，接口必须是当前文件中声明的唯一公有接口，
并且文件必须与接口同名。

必须声明一点，JDK 8为接口添加了一个特性，使其功能发生了重大变化。在JDK 8之前接口不能定义任何实现，即接口只能定义
“有什么”而不能定义“如何实现”。JDK 8改变了这一点。

从JDK 8 开始，可以在接口方法中添加默认实现。因此，现在的接口可以指定一些行文。然而，默认实现只是构成了一种特殊用途，
接口的最初目的没有改变。因此一般来说，最常创建和使用的仍是不包含默认方法的接口。

正因如此，我们首先讨论传统形式的接口，在后面讨论默认方法。

接口的一般形式显示出，在接口中可以声明变量。它们被隐式的标识为final和static,这意味着实现接口的类不能修改它们。
同时，还必须初始化它们。所有方法和变量都隐式的声明为public.
</code></pre><p>9.4.2 实现接口</p>
<pre><code>一旦定义了接口，一个或多个类就可以实现该接口。为了实现接口，在类定义中需要包含implements子句，然后创建定义接口的方法

如果类需要实现多个接口，多个接口直接需要逗号隔开。如果在类实现的两个接口中声明了同一个方法，那么这两个接口的客户
都可以使用该方法。实现接口的方法必须被声明为public。此外，实现方法的类型签名必须和接口定义中指定的类型签名精确匹配。

请注意：实现接口方法时，必须将其声明为public。

(1)通过接口引用访问实现

    可将变量声明为使用接口而不是类的对象的引用。对于实现接口的任何类的任何实例，都可以通过这种变量进行引用。
    当通过这些引用调用方法时，会根据接口当前实际引用的变量实例，调用正确版本的方法。这是接口的关键特性之一。(多态)

警告：因为与Java中常规方法调用相比，在运行时动态查询方法会造成严重的负担，所以在性能要求苛刻的代码中，应当谨慎小心，而不要随意使用接口。

(2)部分实现

    如果类包含了一个接口，但是没有实现该接口定义的全部方法，那么必须将类声明为abstract。
    例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface CallBack</div><div class="line">&#123;</div><div class="line">	void callback(int param);</div><div class="line">&#125;</div><div class="line"></div><div class="line">abstract class Incomplete implements CallBack</div><div class="line">&#123;</div><div class="line">	int a,b;</div><div class="line">	</div><div class="line">	void show()</div><div class="line">	&#123;</div><div class="line">		System.out.println(a+&quot; &quot;+b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>在此，类Incomplete没有实现callback()方法，并且该类必须被声明为abstract。派生自Incomplete的所有类都必须实现callback()方法，
或者本身也被声明为abstract。
</code></pre><p>9.4.3 嵌套接口</p>
<pre><code>可以将接口声明为某个类或者另一个接口的成员，这种接口被称为成员接口或嵌套接口。嵌套接口可以被声明为public、private或protected。
这与顶级接口不同，顶级接口要么被声明为public，要么使用默认访问级别。当在封装范围之外使用嵌套接口时，必须使用包含嵌套接口的类
或接口的名称进行限定。因此在声明嵌套接口的类或接口之外，嵌套接口的名称必须是完全限定的。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class A </div><div class="line">	&#123;</div><div class="line">		public interface NestedIF</div><div class="line">		&#123;</div><div class="line">			boolean isNotNegative(int x);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class B implements A.NestedIF</div><div class="line">	&#123;</div><div class="line">		public boolean isNotNegative(int x)</div><div class="line">		&#123;</div><div class="line">			return x &lt; 0 ? false : true;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	class NestedIFDemo</div><div class="line">	&#123;</div><div class="line">		public static void main(String[] args)</div><div class="line">		&#123;</div><div class="line">			A.NestedIF nif = new B();</div><div class="line">			</div><div class="line">			if(nif.isNotNegative(10))</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;10 is not negative!&quot;)</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			if(nif.isNotNegative(-12))</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;This won&apos;t be displayed!&quot;)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>9.4.5</p>
<pre><code>可以使用接口将共享的常量导入多个类中，具体方法是简单的声明包含变量的接口，并将变量初始化为期望的值。
如果接口不包含方法，那么包含这种接口的所有类实际上没有实现任何内容。就好比将常量作为final变量导入到类名称空间中。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">interface SharedConstants</div><div class="line">&#123;</div><div class="line">	int NO = 0;</div><div class="line">	int Yes = 1;</div><div class="line">	int ERROR = -1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Question implements SharedConstants</div><div class="line">&#123;</div><div class="line">	Random rand = new Random():</div><div class="line">	</div><div class="line">	int ask()</div><div class="line">	&#123;</div><div class="line">		int porb = (int)(100 * rand.nextDouble());</div><div class="line">		</div><div class="line">		if(prop &lt; 30)</div><div class="line">			return NO;</div><div class="line">		else if(prop &lt; 60)</div><div class="line">			return YES;</div><div class="line">		else </div><div class="line">			return ERROR;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意：上面介绍的使用接口定义共享常量的方法具有争议性。这里只是为了全面介绍各种主题才加以描述。
</code></pre><p>9.4.6 接口可以扩展</p>
<pre><code>接口可用通过关键字extends继承另一个接口，语法和继承类相同。如果类实现的接口继承自另一个接口，
那么类必须实现在接口继承链中定义的所有方法。
例如： 
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">interface A</div><div class="line">&#123;</div><div class="line">	void meth1();</div><div class="line">	void meth2();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface B extents A</div><div class="line">&#123;</div><div class="line">	void meth3();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyClass</div><div class="line">&#123;</div><div class="line">	public void meth1()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Implement meth1().&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void meth2()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Implement meth2().&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void meth3()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Implement meth3().&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>如果你希望尝试在MyClass类中移除对meth1()方法的实现，这会引起编译时错误。如前所述，实现接口的所有类必须实现接口
定义的所有方法，包括从其他接口继承过来的所有方法。
</code></pre><p><strong>9.5 默认接口方法</strong></p>
<pre><code>JDK 8 为接口添加了一种新的功能，叫做默认方法。默认方法允许为接口方法定义默认实现。默认方法仍在开发时，也被称为扩展方法。

开发默认方法的主要动机是提供一种扩展接口的方法，而不破坏现有代码。回忆一下，接口定义的所有方法都必须被实现。在过去，
如果为一个使用广泛的接口添加一个新方法，那么由于找不到新方法的实现，现有代码会被破坏。默认方法解决了这个问题，
它提供了一个实现，当没有显示提供其他实现时将会采用这个实现。因此，添加默认方法不会破坏现有代码。

开发默认方法的另一个动机是希望在接口中指定本质上可选的方法，根据接口的使用方式选择使用的方法。例如，接口可能定义了
操作一系列元素的一组方法。其中一个方法可能叫做remove()，用于从系列中删除元素。然而，如果接口应该同时支持可修改和不可修改的系列，
那么remove()本质上是可选的，因为不可修改的系列不会使用它。过去，实现不可修改系列的类需要定义remove()的一个空实现，即使不需要改方法。
现在，可以在接口中指定remove()的默认实现，让它什么都不做(或者抛出异常)。通过提供这种默认实现，就避免了用于不可修改系列的类
必须定义自己的、占位符性质的remove()方法。因此，通过提供默认实现，接口让类实现的remove()方法变为可选方法。

需要指出的是，添加默认方法并没有改变接口的关键特征：不能维护状态信息。例如，接口仍然不能有实例变量。因此，
接口和类之间决定性的区别是类可以维护状态信息，而接口不可以。另外，仍然不能创建接口本身的实例。接口必须被类实现。
因此，即便从JDK 8开始，接口可以定义默认方法，在想要创建实例时，也仍然必须用类来实现接口。

最后，一般来说，默认方法是一种特殊用途。创建的接口仍然主要用于指定“是什么”而不是“如何实现”。
但是，包含默认方法确实带来了额外的灵活性。

因此，默认方法提供了一下优点：
(1)优雅的随时间演化接口 (上面的主要动机)
(2)提供可选功能，但是类不必在不需要该功能时提供占位符。(另一个主要动机)    
</code></pre><p>9.5.1 默认方法的基础知识</p>
<pre><code>为接口定义默认方法，类似于为类定义方法。主要区别在于，默认方法的声明前面带有关键字default。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public interface MyIF</div><div class="line">&#123;</div><div class="line">	//This is a &quot;normal&quot; interface method declaration.</div><div class="line">	int getNumber();</div><div class="line">	</div><div class="line">	//This is a default method.</div><div class="line">	default String getString()</div><div class="line">	&#123;</div><div class="line">		return &quot;Default String&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyIFImp implements MyIF</div><div class="line">&#123;</div><div class="line">	public int getNumber()</div><div class="line">	&#123;</div><div class="line">		return 100;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class DefaultMethodDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		MyIFImp obj = new MyIFImp();</div><div class="line">		System.out.println(obj.getNumber());</div><div class="line">		System.out.println(obj.getString());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>9.5.3 多级继承问题。</p>
<pre><code>假设类MyClass实现了两个接口Alpha和Beta。如果Alpha和Beta都提供了名为reset()的方法，并且两个接口都为该方法提供了默认实现，
那么将会发生什么？MyClass会使用Alpha版本还是Beta版本？或者，考虑另一种情况：Beta扩展了Alpha。默认方法的那个版本会被使用？
又或者，MyClass提供了自己的实现，这是会发生什么？为了处理这种情况，以及其他类似的情况，
Java定义了一组规则来解决这类冲突。

首先，在所有情况下，类实现的优先级高于接口的默认实现。因此，如果MyClass重写了reset()默认方法，就使用MyClass的reset()版本。
其次，当类实现的两个接口提供了相同的默认方法，但是类没有重写该方法时，会发生错误。
如果一个接口继承了另一个接口的情况，并且两个接口定义了相同的默认方法，那么继承接口的版本具有更高优先级。
因此，如果Beta扩展了Alpha，那么将使用Beta的reset()版本。 

通过使用super的一种新的形式，可以显示引用被继承接口中的默认实现。这种形式如下：
interfaceName.super.methodName()
例如，如果beta想要引用Alpha的默认方法reset(),可以使用下面这条语句：
Alpha.super.reset();
</code></pre><p><strong>9.6 在接口中使用静态方法</strong></p>
<pre><code>JDK 8 为接口添加了另一项新功能：定义一个或更多个静态方法。类似于类中的静态方法，接口定义的静态方法可以独立于任何对象调用。
因此，在调用静态方法时，不需要实现接口，也不需要接口的实例。相反，通过指定接口名，后跟句点，然后是方法名，就可以调用静态方法，
一般形式如下：
InterfaceName.staticMethodName
注意，这与调用类的静态方法的方式类似。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface MyIF</div><div class="line">&#123;</div><div class="line">	static int getDefaultNumber()</div><div class="line">	&#123;</div><div class="line">		return 0;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	default String getString()</div><div class="line">	&#123;</div><div class="line">		return &quot;Default String&quot;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	int getNumber();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>可以像下面这样调用getDefalutNumber()方法：
int defNum = MyIF.getDefaultNumber();
如前所述，由于getDefaultNumber()是一个静态方法，所以调用它是不需要MyIF的实现或实例。

最后一点：实现接口的类或者子接口不会继承接口中的静态方法。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之异常处理]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>异常时运行时在代码序列中引起的非正常情况。换句话说，异常是运行时错误。</p>
<p><strong>10.1 异常处理的基础知识</strong></p>
<pre><code>Java异常是用来描述在一段代码中发生的异常情况(也就是错误)的对象。当出现引起异常的情况时，
</code></pre><p>就会创建用来表示异常的对象，并在引起错误的方法中抛出异常对象。方法可以选择自己处理异常，<br>也可以继续传递异常。无论采用哪种形式，在某一点都会捕获并处理异常。有Java抛出的异常与那些违反<br>Java语言规则或Java执行环境约束的基础性错误有关。手动生成的异常通常用于向方法的调用者报告某些错误条件。</p>
<pre><code>Java异常处理通过5个关键字进行管理；try、catch、throw、throws以及final.
在try代码块中封装可能发生异常的程序语句，对这些语句进行监视。如果在try代码块中发生异常，就会将异常抛出。
</code></pre><p>代码可以(使用catch)捕获异常，并以某些理性方式对其进行处理。系统生成的异常由Java运行时系统自动抛出。<br>为了手动抛出异常，需要使用throw关键字。从方法抛出的异常都必须通过一条throws子句进行指定。在try代码块结束之后<br>必须执行的所有代码都需要放入finally代码块中。</p>
<pre><code>下面是异常处理代码块的一般形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">catch(ExceptionType1 e)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">catch(ExceptionType2 e)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">finally</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>其中，ExceptionType是已经发生异常的类型。

注意：从JDK 7开始，try语句增加了一种支持自动资源管理的新形式，这种形式的try被称为带资源的try,
将在文件管理部分进行介绍，因为文件是最常用的资源。
</code></pre><p><strong>10.2 异常类型</strong></p>
<pre><code>所有异常类型都是内置类Throwable的子类。因此，Throwable位于异常层次中的顶部。紧跟Throwable之下的是两个子类，它们将异常分为两个不同的分支。
</code></pre><p>一个分支是Exception类，这个类既可以用于用户程序应当捕获的异常情况，也可用于创建自定义异常类型的子类。Exception有一个重要的子类，<br>名为RuntimeException。对于你编写的程序而言，这种类型的异常是自动定义的，包括除零和无效数组索引这类情况。</p>
<pre><code>另一个分支是Error类，该类定义了在常规环境下不希望由程序捕获的异常。Error类型的异常由Java运行时系统调用，以指示运行时环境本身出现了某些错误。
</code></pre><p>堆栈溢出是这类错误的一个例子。本章不会处理Error类型的异常，因为它们通常是为了响应灾难性的失败而创建的，你的程序通常不能处理这类异常。</p>
<p><strong>10.3 未捕获的异常</strong></p>
<pre><code>学习如何在程序中处理异常之前，先看一看如何不处理异常会发生什么情况。
下面的程序包含一个故意引起除零错误的表达式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Exc0</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int d = 0;</div><div class="line">		int a = 42 / d;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>当Java运行时检测到试图除以零时，它会构造一个新的异常对象，然后抛出这个异常。这会导致Exc0终止执行，因为一旦抛出异常，
</code></pre><p>就必须有一个异常处理程序捕获该异常，并立即进行处理。</p>
<pre><code>在这个例子中，没有提供任何自己的处理异常的程序，所以该异常会由Java运行时系统提供的默认处理程序捕获。
</code></pre><p>没有被程序捕获的所有异常，最终都将由默认处理程序进行处理。默认处理程序会显示一个描述异常的字符串，输出<br>异常发生点的堆栈踪迹并终止程序。<br>    下面是执行这个程序发生的异常：<br>    java.lang.ArithmeticException: / by zero<br>        at Exc0.main(Exc0.java:5)<br>    注意类名(Exc0)、方法名(main)、文件名(Exc0.java)以及行号(5)，是如何被包含到这个简单的堆栈踪迹中。<br>    此外，注意抛出的异常类型是Exception的子类ArithmeticException,该类更具体的描述了发生的错误类型。<br>正如后面所讨论的，Java提供了一些能与可能产生的各种运行是错误相匹配的内置异常类型。</p>
<pre><code>堆栈踪迹总是会显示导致错误的方法调用序列。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Exc1</div><div class="line">&#123;</div><div class="line">	static void subroutine()</div><div class="line">	&#123;</div><div class="line">		int d = 0;</div><div class="line">		int a = 10 / d;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Exc1.subroutine();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>默认异常处理程序产生的堆栈踪迹显示了整个调用堆栈过程，如下所示：
java.lang.ArithmeticException: / by zero
    at Exc1.subroutine(Exc1.java:6)
    at Exc1.main(Exc1.java:11)

可以看出，堆栈底部是main()方法中的第11行，该行调用subroutine()方法，该方法在第6行引起了异常。
</code></pre><p>调用堆栈对于调试非常有用，因为可以精确定位导致错误发生的步骤序列。</p>
<p><strong>10.4 使用try和catch</strong></p>
<pre><code>尽管对于调试而言，Java运行时系统提供的默认异常处理程序很有用，但是通常希望自己处理异常。
自己处理异常有两个优点：
第一，允许修复错误；
第二，阻止程序自动终止；

如果程序停止运行并且无论何时发生错误都输出堆栈踪迹，会让大多数用户感到困惑!幸运的是，阻止这种情况发生很容易。

为了防止并处理运行时错误，可以简单的在try代码块中封装希望监视的代码。紧随try代码块之后，提供一条catch子句，
</code></pre><p>指定希望捕获的异常类型。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Exc2</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int d,a;</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			d = 0;</div><div class="line">			a = 42 / d;</div><div class="line">			System.out.println(&quot;This will not be print.&quot;);</div><div class="line">		&#125;</div><div class="line">		catch(ArithmeticException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Devision by zero.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;After catch statement.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
Devision by zero.
After catch statement.

注意，对try代码块中println()方法的调用永远都不会执行。一旦抛出异常，程序控制就会从try代码块中转移出来，进入catch代码块中。
</code></pre><p>话句话说，不是”调用”catch，所以执行控制永远不会从catch代码块“返回“到try代码块。因此，不会显示”This will not be print.”这一行。<br>执行完catch语句后，程序控制就会继续进入到程序中整个try/catch代码块的下一行。</p>
<pre><code>try及catch构成了一个单元。catch子句的作用域被限制在由之前try语句指定的那些语句内。catch语句不能把捕获由另一条try语句抛出
</code></pre><p>的异常(这种情况的一个例外是嵌套的try语句，稍后对此进行介绍)。由try保护的语句必须使用花括号括起来，也就是说，它们必须位于一个代码块中。</p>
<pre><code>大部分设计良好的catch子句，都应该能够分辨出异常情况，然后继续执行，就好像错误根本没有发生一样。例如下面的程序，for循环的
</code></pre><p>每次迭代都会获取两个随机数。将两个整数彼此相除，之后用12345除以结果。将最终结果保存到变量a中。只要任何一个除法操作引起除零错误，<br>就会捕获该错误，并将a设置为0，然后程序继续执行。例如：</p>
<pre><code>**import java.util.Random

class HandleError
{
    public static void main(String[] args)
    {
        int a = 0,b = 0,c = 0;
        Random r = new Random();

        for(int i = 0; i&lt;3200; i++)
        {
            try
            {
                b = r.nextInt();
                c = r.nextInt();
                a = 12345 / (b/c);
            }
            catch(ArithmeticException e)
            {
                System.out.println(&quot;Devision by zero.&quot;);
                a = 0;
            }

            System.out.println(&quot;a: &quot;+a);
        }
    }
}**


显示异常的描述信息

Throwable重写了(由Object定义的)toString()方法，从而可以返回一个包含异常描述的字符串。可以使用println()语句显示这个描述，
</code></pre><p>为此，只需要简单的将异常作为参数传递给println()方法。<br>    将上面的程序中catch块改成如下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">catch(ArithmeticException e)</div><div class="line">&#123;</div><div class="line">	System.out.println(&quot;Exception: &quot;+e);</div><div class="line">	a = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>输出为：
Exception: java.lang.ArithmeticException: / by zero

这样做虽然在这个例子中不是很有价值，但是显示异常描述的能力对于其他情况却是很有价值——特别是当对异常进行检验或进行调试时。
</code></pre><p><strong>10.5 多条catch子句</strong></p>
<pre><code>在有些情况下，单块代码块可能会引发多个异常。为了处理这种情况，可以指定两条或多条catch子句，每条catch子句捕获不同类型的异常。
</code></pre><p>当抛出异常时，按顺序检查每条catch语句，并执行类型和异常能够匹配的第一条catch子句。执行了一条catch语句之后，会忽略其他catch语句，<br>并继续执行try/catch代码块后面的代码。下面的例子捕获两种不同的异常类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class MultipleCatches</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try </div><div class="line">		&#123;</div><div class="line">			int a = args.length;</div><div class="line">			System.out.println(&quot;a = &quot;+a);</div><div class="line">			int b = 42 / a;</div><div class="line">			int[] c = &#123;1&#125;;</div><div class="line">			c[42] = 99;</div><div class="line">		&#125;</div><div class="line">		catch(ArithmeticException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Devision by 0:&quot;+e);</div><div class="line">		&#125;</div><div class="line">		catch(ArrayIndexOutOfBoundsException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Array index oob: &quot;+e);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;After try/catch blocks.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>如果在启动程序时没有提供命令行参数，那么上述程序会引起除零异常，因为a会等于0.如果提供命令行参数，那么会将a设置为大于0的数值，
</code></pre><p>程序会继续进行除法运算。但是会引起ArrayIndexOutOfBoundsException异常，因为int型数组c的长度为1,但是程序试图为c[42]赋值。</p>
<pre><code>当使用多条catch语句时，要重点记住异常子类必须位于所有超类之前，因为使用了某个超类的catch语句会捕获这个超类及其所有子类的异常。
</code></pre><p>因此，如果子类位于超类之后的话，永远也不会到达子类。此外在Java中，不可到达的代码被认为是错误。</p>
<p><strong>10.6 嵌套的try语句</strong></p>
<pre><code>可以嵌套try语句。也就是说，一条try语句可以位于另一条try语句中。每次遇到try语句时，异常的上下文就会被推入到堆栈中。如果内层的
</code></pre><p>try语句没有为特定的异常提供catch处理程序，堆栈就会弹出该try语句，检查下一条try语句的catch处理程序，查看是否匹配异常。这个过程会<br>一直持续下去，直到找到一条匹配的catch语句，或直到检查完所有嵌套的try语句。如果没有找到匹配的catch语句，Java运行时系统会处理异常。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class NestTry</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			int a = args.length;</div><div class="line">			int b = 42/a;</div><div class="line">			</div><div class="line">			System.out.println(&quot;a = &quot;+a);</div><div class="line">			</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				if(a == 1) a = a/(a-a);</div><div class="line">				</div><div class="line">				if(a == 2)</div><div class="line">				&#123;</div><div class="line">					int[] c = &#123;1&#125;;</div><div class="line">					c[42] = 99;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			catch(ArrayIndexOutOfBoundsException e)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Array index out-of-bounds: &quot;+e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(ArithmeticException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Divide by 0: &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>可以看出，该程序在一个try代码块中嵌套另一个try代码块。该程序的工作过程如下：
如果执行程序时没有提供命令行参数，那么外层的try代码块会产生除零异常。如果执行程序时提供一个命令行参数，那么会从嵌套的try代码块中
</code></pre><p>产生除零异常。因为内层的try代码块没有捕获该异常，所以会将其传递到外层的try代码块，在此对除零异常进行处理。如果执行程序时提供了两个命<br>令行参数，那么会从内层的try代码块中产生数组越界异常。</p>
<pre><code>当涉及方法调用时，可能会出现不那么明显的try语句嵌套。例如，可能在一个try代码块中包含对某个方法的调用，而在该方法内部又有另外一条
</code></pre><p>try语句。对于这种情况，方法内部的try语句仍然被嵌套在调用该方法的外层try代码块中。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class MethNestTry</div><div class="line">&#123;</div><div class="line">	static void nesttry(int a)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			if(a == 1) a = a/(a-a);</div><div class="line">			</div><div class="line">			if(a ==2)</div><div class="line">			&#123;</div><div class="line">				int[] c = &#123;1&#125;;</div><div class="line">				c[42] = 99;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(ArrayIndexOutOfBoundsException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Array index out-of-bounds: &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			int a = args.length;</div><div class="line">			int b = 42/a;</div><div class="line">			System.out.println(&quot;a = &quot;+a);</div><div class="line">			</div><div class="line">			nesttry(a);</div><div class="line">		&#125;</div><div class="line">		catch(ArithmeticException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Divide by 0: &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>该程序的输出和上面的程序完全相同。
</code></pre><p><strong>10.7 throw</strong> </p>
<pre><code>到目前为止，捕获的都是有Java运行时系统抛出的异常。但是，你的程序也可以使用throw语句显示的抛出异常。
throw的一般形式如下：
throw ThrowableInstance;
其中，ThrowableInstance必须为Throwable或其子类类型的对象。可以通过两种方式获得Throwable对象：在catch子句中使用参数
</code></pre><p>或者使用new运算符创建Throwable对象。</p>
<pre><code>throw语句之后的执行流会立即停止，所有后续语句都不会执行。检查最近的try代码块，查看是否存在和异常类型相匹配的catch语句。
</code></pre><p>如果没有，就检查下一条try语句，这个过程一直重复下去。如果没有找到匹配的catch语句，那么默认的异常处理程序会终止程序并输出堆栈踪迹。</p>
<pre><code>下面是一个创建并抛出异常的实例程序。捕获异常的处理程序将异常再次抛出到外层的异常处理程序中：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class ThrowDemo</div><div class="line">&#123;</div><div class="line">	static void demoproc()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			throw new NullPointerException(&quot;demo&quot;);</div><div class="line">		&#125;</div><div class="line">		catch(NullPointerException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Caught inside demoproc.&quot;);</div><div class="line">			//将异常从新抛出</div><div class="line">			throw e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			demoproc();</div><div class="line">		&#125;</div><div class="line">		catch(NullPointerException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Recaught: &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Caught inside demoproc.
Recaught: java.lang.NullPointerException: demo

许多内置的Java运行时异常至少有两个构造函数：一个不带参数，另一个带有一个字符串参数。如果使用第二种形式，那么参数指定了用来描述
</code></pre><p>异常的字符串。当将对象用做print()或println()方法的参数时，会显示该字符串。还可以通过调用getMessage()方法获取这个字符串，该方法由Throwable定义的。</p>
<p><strong>10.8 throws</strong> </p>
<pre><code>如果方法可能引发自身不进行处理的异常，就必须指明这种行为，以便方法的调用者能够保卫它们自己以防备上述异常。可以通过在方法声明中提供
</code></pre><p>throws子句列出了方法可能抛出的异常类型。除了Error和RuntimeException及其子类类型的异常外，对于所有其他类型的异常这都是必须的。方法可能抛出<br>的所有其他异常都必须在throws子句中进行声明。如果没有这么做，就会产生编译时错误。<br>    因为RuntimeException及其子类属于为经检查的异常，这类异常编译器不检查方法是否处理或抛出这些异常。因此，当方法中引发这类异常并不进行处理时，<br>并不需要使用throws子句列出方法抛出的这类异常。</p>
<pre><code>Java什么情况下必须用throws抛出异常？
答：在程序中抛出了非RuntimeException异常却没有对其处理(用try catch块处理)的情况下，必须在方法头throws该异常。

&quot;异常机制&quot;中还有一种特殊情况――RuntimeException&quot;异常类&quot;，这个&quot;异常类&quot;和它的所有子类都有一个特性，就是&quot;异常&quot;对象一产生就被Java虚拟机直接
</code></pre><p>处理掉，即在方法中出现throw子句的地方便被虚拟机捕捉了。因此凡是抛出这种”运行时异常”的方法在被引用时，不需要有try…catch语句来处理”异常”。<br>而，当方法包含经检查的异常时，该方法被引用时，需要有try/catch语句来处理异常。</p>
<pre><code>下面是包含throws子句的方法声明的一般形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type method-name(parameter-list) throws exception-list</div><div class="line">&#123;</div><div class="line">	//body of method </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>其中，exception-list是方法可能抛出的异常列表，它们由逗号隔开。

下面是一个错误程序，该程序试图抛出无法匹配的异常。因为程序没有指定throws子句来声明这一事实，所以程序无法编译。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class ThrowsDemo</div><div class="line">&#123;</div><div class="line">	static void throwOne()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside throwOne.&quot;);</div><div class="line">		throw new IllegalAccessException(&quot;demo&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		throwOne();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>为了使这个例子能够编译，有两种方法，第一种是将throwOne()中的代码放入try/catch代码块中，这种方法上面已经讲过，故不做叙述。
</code></pre><p>第二种，使用throws语句，需要进行两处修改。首先，需要声明throwOne()方法抛出IllegalAccessException异常。其次，main()方法必须<br>定义捕获该异常的try/catch块。<br>    改正后的例子如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class ThrowsDemo</div><div class="line">&#123;</div><div class="line">	static void throwOne throws IllegalAccessException</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside throwOne.&quot;);</div><div class="line">		throw new IllegalAccessException(&quot;demo&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			throwOne();</div><div class="line">		&#125;</div><div class="line">		catch(IllegalAccessException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Caught &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>输出： 
Inside throwOne.
Caught java.lang.IllegalAccessException: demo
</code></pre><p><strong>10.9 finally</strong></p>
<pre><code>当抛出异常后，方法中的执行流会采用一种非常突然的、非线性的路径，这将改变方法的正常执行流。根据方法的编码方式，异常甚至可能使方法比
</code></pre><p>预计时间更早的返回。对于某些方法这可能是一个问题。例如，如果方法在开始时打开一个文件，并在结束时关闭这个文件，那么你可能不希望关闭文件<br>的代码绕过异常处理机制。关键字finally就是为解决这种可能情况而设计的。</p>
<pre><code>使用finally可以创建一个代码块，该代码块会在执行try/catch代码块之后，并在执行try/catch代码块后面的代码之前执行。不管是否有异常抛出，
</code></pre><p>都会执行finally代码块。如果抛出了异常，那么即使没有catch语句能匹配异常，finally代码块也仍将执行。只要try/catch代码块内部返回到调用者，<br>不管是通过未捕获的异常还是使用显示的返回语句，都会在方法返回之前执行finally语句。对于关闭文件句柄以及释放在方法开始时进行分配，并在方法<br>返回之前进行处理的所有其他资源来说，finally子句都是很有用的。finally子句是可选的。但是，每条try子句至少需要一条catch子句或finally子句。</p>
<pre><code>下面的实例程序显示了以各种方式退出的三个方法，所有这些方法都执行它们各自的finally子句。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">class FinallyDemo</div><div class="line">&#123;</div><div class="line">	//Throw an exception out of the method</div><div class="line">	static void procA()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside procA.&quot;);</div><div class="line">		throw new RuntimeException(&quot;demo&quot;);</div><div class="line">	&#125;</div><div class="line">	finally</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;procA&apos;s finally.&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//Return from within a try block</div><div class="line">	static void procB()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Inside procB.&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		finally</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;procB&apos;s finally.&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//Extcute a try block normally</div><div class="line">	static void procC()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Inside procC.&quot;);</div><div class="line">		&#125;</div><div class="line">		finally</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;procC&apos;s finally.&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			procA();</div><div class="line">		&#125;</div><div class="line">		catch(Exception e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Exception caught.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		procB();</div><div class="line">		procC();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出： 
Inside procA.
procA&apos;s finally.
Exception caught.
Inside procB.
procB&apos;s finally.
Inside procC.
procC&apos;s finally.

在这个例子中，方法procA()通过抛出异常过早的跳出try/catch代码块，在退出之后执行finally子句。方法procB()通过return语句退出try代码块，
</code></pre><p>在procB()方法返回前执行finally子句。在方法procC()中，try语句正常执行，没有错误，但是仍然会执行finally代码块。</p>
<pre><code>请记住：如果finally代码块和某个try代码块相关联，那么finally代码块会在这个try代码块结束后执行。
</code></pre><p><strong>10.10 Java的内置异常</strong></p>
<pre><code>java里面异常分为两大类:checked exception(检查异常)和unchecked exception(未检 查异常)。
对于未检查异常也叫RuntimeException(运行时异常)，即RuntimeException及其子类的异常。对于运行时异常，java编译器不要求你一定要把它捕获
</code></pre><p>或者一定要继续抛出，在所有方法的throws列表中不需要包含这些异常。但是对checked exception(检查异常)要求你必须要在方法里面或者捕获或者继续抛出.</p>
<pre><code>例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ExceptionTypeTest</div><div class="line">&#123;</div><div class="line"></div><div class="line">	public void doSomething()throws ArithmeticException</div><div class="line">	&#123;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main()</div><div class="line">	&#123;</div><div class="line">		ExceptionTypeTest ett = new ExceptionTypeTest();</div><div class="line">		ett.doSomething();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>问题1:上面的程序能否编译通过？并说明理由。 
解答:能编译通过。
分析:按照一般常理，定义doSomething方法是定义了ArithmeticException异常，在main方法里里面调用了该方法。那么应当继续抛出或者捕获一下。
</code></pre><p>但是ArithmeticException异常是继承RuntimeException运行时异常。java里面异常分为两大类:checked exception(检查异常)和unchecked exception(未检 查异常)，<br>对于未检查异常也叫RuntimeException(运行时异常),对于运行时异常，java编译器不要求你一定要把它捕获或者一定要继续抛出，但是对checked exception<br>(检查异常)要求你必须要在方法里面或者捕获或者继续抛出. ???? </p>
<pre><code>问题2:上面的程序将ArithmeticException改为IOException能否编译通过？并说明理由。 
解答:不能编译通过。
分析:IOException extends Exception 是属于checked exception ，必须进行处理，或者必须捕获或者必须抛出 

总结：java中异常分为两类:checked exception(检查异常)和unchecked exception(未检查异常),对于未检查异常也叫RuntimeException(运行时异常). ??????? 
对未检查的异常(unchecked exception )的几种处理方式：
1、捕获 ??????? 
2、继续抛出 ??????? 
3、不处理 ??????? 
对检查的异常(checked exception，除了RuntimeException，其他的异常都是checked exception )的几种处理方式： ??????? 
1、继续抛出，消极的方法，一直可以抛到java虚拟机来处理 ??????? 
2、用try...catch捕获 ??????? 

注意，对于检查的异常必须处理，或者必须捕获或者必须抛出
</code></pre><p><strong>10.11 创建自己的异常子类</strong></p>
<pre><code>尽管Java的内置异常处理了大部分常见错误，但是你可能希望创建自己的异常类型，以处理特定于应用程序的情况，这很容易完成：
</code></pre><p>只需要定义Exception的子类(当然也是Throwable的子类)即可。你的子类不许需要实际实现任何内容————只要它们存在于类型系统中，<br>就可以将它们用作异常。</p>
<pre><code>Exception类没有为自己定义任何方法。当然，它继承了Throwable提供的方法。因此，所有异常，包含你创建的异常，都可以获得Throwable定义的方法。
Exception类定义了4个公有构造函数，其中两个支持链式异常(链式异常在后面描述)，另两个如下所示：
Exception()
Exception(String msg)
第一种创建没有描述的异常，第二种形式可以为异常指定描述信息。

虽然创建异常时指定描述通常是有用的，但是有时重写toString()方法会更好一些。原因是：Throwable定义的toString()方法版本
</code></pre><p>(Exception继承了该版本)首先显示异常的名称，之后跟一个冒号，然后显示你的一个描述。通过重写toString()方法，可以阻止显示异常<br>名称和冒号。这样可以使输出变得更加清晰，在有些情况下你可能希望如此。</p>
<pre><code>下面的例子声明了一个新的Exception的子类，然后在一个方法中使用这个子类标识错误条件。该子类重写了toString()方法，从而
</code></pre><p>可以仔细的修改显示的异常描述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">class MyException extends Exception</div><div class="line">&#123;</div><div class="line">	private int detail;</div><div class="line">	</div><div class="line">	MyException(int a)</div><div class="line">	&#123;</div><div class="line">		detail = a;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public String toString()</div><div class="line">	&#123;</div><div class="line">		return &quot;MyException[&quot;+detail+&quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ExceptionDemo</div><div class="line">&#123;</div><div class="line">	static void compute(int a) throws MyException</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Called compute(&quot;+a+&quot;)&quot;);</div><div class="line">		</div><div class="line">		if(a&gt;10)</div><div class="line">		&#123;</div><div class="line">			throw new MyException(a);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Normal exit.&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			compute(1);</div><div class="line">			compute(20);</div><div class="line">		&#125;</div><div class="line">		catch(MyException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Caught &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Called compute(1)
Normal exit.
Called compute(20)
Caught MyException[20]

注意：如果上面try代码块中compute(20)在compute(1)前面执行，则输出结果为：
Called compute(20)
Caught MyException[20]
</code></pre><p><strong>10.12 链式异常</strong></p>
<pre><code>从JDK 1.4开始，链式异常这一特性被包含进异常子系统。通过链式异常，可以为异常关联另一个异常。第二个异常描述第一个异常的原因
</code></pre><p>(描述当前异常的原因，在后面通常称为”引发异常”或”背后异常”)。<br>    例如，假设某个方法由于试图除零而抛出ArithmeticException异常。但是，导致问题发生的实际原因是发生了一个I/O错误，该错误导致为<br>除数设置了不正确的值。尽管方法必须显示的抛出ArithmeticException异常，因为这是已经发生的错误，但是你可能还希望让调用者知道背后的<br>原因是I/O错误，使用链式异常可以处理这种情况以及所有其他存在多层异常的情况。</p>
<pre><code>为了使用链式异常，向Throwable类添加了两个构造函数和两个方法。这两个构造函数如下所示：
Throwable(Throwable causeExc)
Throwable(String msg,Throwable causeExc)
在第一种形式中，causeExc是引发当前异常的异常，即causeExc是引发当前异常的背后原因。第二种形式允许在指定引发异常的同时指定异常描述。
</code></pre><p>这两个构造方法也被添加到了Error、Exception以及RuntimeException类中。</p>
<pre><code>添加到Throwable类中的链式异常方法是getCause()和initCause().
Throwable getCause()
Throwable initCause(Throwable causeExc)
getCause()方法返回引发当前异常的异常。如果不存在背后异常，就返回null。initCause()方法将causeExc和调用的异常关联到一起，并返回对
</code></pre><p>异常的引用。通常，initCause()方法用于为不支持前面描述的两个附加构造函数的遗留异常设置”背后异常”。因此，可以在创建异常之后将异常和<br>背后异常关联到一起。但是背后异常只能设置一次。因此，对于每个异常对象只能调用initCause()方法一次。此外，如果通过构造函数设置了背后异常，<br>那么就不能再使用initCause()方法进行设置。</p>
<pre><code>例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class ChainExcDemo</div><div class="line">&#123;</div><div class="line">	static void demoproc()</div><div class="line">	&#123;</div><div class="line">		NullPointerException e = new NullPointerException(&quot;top layer&quot;);</div><div class="line">		e.initCause(new ArithmeticException(&quot;cause&quot;));</div><div class="line">		throw e;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public stati void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			demoproc();</div><div class="line">		&#125;</div><div class="line">		catch(NullPointerException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Caught: &quot;+e);</div><div class="line">			System.out.println(&quot;Original cause: &quot;+e.getCause());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
Caught: java.lang.NullPointerException: top layer 
Original cause: java.lang.ArithmeticException: cause
</code></pre><p><strong>10.13 3个近期添加的异常特性</strong></p>
<pre><code>从JDK 7 开始，异常系统添加了3个有趣并且有用的特性。
第一个特性是：当资源(例如文件)不在需要时能够自动释放。该特征的基础是try语句的扩展形式，称为带资源的try语句。
第二个特性是：多重捕获，即一个catch 子句参数中可以写多个异常。
的三个特性是：最后重写抛出(final rethrow)或更精确的重写抛出(more precise rethrow).

为了使用多重捕获，在catch子句中使用或运算符(|)分割每一个异常。每个多重捕获参数都被隐式的声明为final.因此不能为它们赋新值。
例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class MultiCatch</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int a = 10,b = 0;</div><div class="line">		int[] vals = &#123;1,2,3&#125;;</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			int result = a / b;</div><div class="line">			vals[42] = 19;</div><div class="line">		&#125;</div><div class="line">		catch(ArithmeticException | ArrayIndexOutOfBoundsException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Exception caught: &quot;+e)</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;After multi-catch.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>&quot;更精确的从新抛出&quot;异常特性会对重新抛出的异常类型进行限制，只能重新抛出满足一下条件的经检查的异常：由关联的try代码块抛出，没有被
</code></pre><p>前面的catch子句处理过，并且是参数的子类型或者超类型。显然这个功能不经常需要。</p>
<p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之多线程编程]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<pre><code>在单核系统中，并发执行的线程共享CPU，每个线程得到一片时间周期。所以，在单核系统中，两个或更多个线程不是真正的同时运行，但是
</code></pre><p>空闲时间被利用了。然而，在多核系统中，两个或更多个线程可能是真正同步执行。在许多情况下，这会进一步提高程序的效率并提高特定操作的速度。</p>
<p><strong>11.1.1 线程优先级</strong></p>
<pre><code>Java为每个线程都指定了优先级，优先级决定了相对于其他线程应当如何处理某个线程。线程的优先级用于决定何时从一个运行的线程切换到写一个。这种称为上下文切换(context switch)。决定上下文切换发生时机的规则比较简单：
</code></pre><p>(1)线程自愿的放弃控制。线程显示的放弃控制、休眠或在I/O之前阻塞，都会出现这种情况。在这种情况下，检查所有其他线程，并且准备运行的线程中优先级高的那个线程会获取CPU资源。</p>
<p>(2)线程被允许优先级更高的线程取代。对于这种情况，没有放弃控制权的低优先级线程不管正在做什么，都会被高优先级线程取代。基本上，只要高优先级 的线程希望运行，它就会取代低优先级的线程，这种称为抢占式多任务处理(preemptive multitasking)。 </p>
<p>   如果具有相同优先级的两个线程竞争CPU资源，这种情况有些复杂。对于Windows这类操作系统，优先级相等的线程以循环方式自动获取CPU资源。对于其他操作系统，优先级相等的线程必须自愿的向其他线程放弃控制权，否则其他线程就不能运行。</p>
<p><strong>11.1.2 同步</strong></p>
<pre><code>此处讲得同步其实是操作系统中的互斥。
例如，链表，就需要以某种方式确保它们之间不会发生冲突。也就是说，当一个线程正在读取该数据结构时，必须阻止另一个线程向该数据结构写入数据。
为此，Java以监视器这一年代久远的进程间同步模型为基础，实现了一种巧妙的方案。监视器最初由C.A.R.Hoare定义的一种控制机制，可以将监视器看作非常小的只能包含一个线程的盒子。一旦某个线程进入监视器，其他所有线程必须等待，直到该线程退出监视器。通过这种方式，可以将监视器用于保护共享的资源，以防止多个线程同时对资源进程操作。

Java没有提供&quot;Monitor&quot;类；相反，每个对象都有自己隐式的监视器。如果调用对象的同步方法，就会自动进入对象的隐式监视器。一旦某个线程位于一个同步方法中，其他线程就不能调用同一对象的任何其他同步方法。因为语言本身内置了同步支持，所以可以编写出非常清晰并且简明的多线程代码。
</code></pre><p><strong>11.1.3 消息传递</strong></p>
<pre><code>将程序分隔到独立的线程之后，需要定义它们之间相互通信的方式。当使用某些其他语言编程时，必须依赖操作系统建立线程之间的通信。当然，这会增加系统开销。相反，通过调用所有对象都具有的预定义的方法，Java为两个或更多个线程之间的相互通信提供了一种简洁的低成本方法。Java的消息传递系统允许某个线程进入对象的同步方法，然后进行等待，直到其他线程显示地通知这个线程退出为止。
</code></pre><p><strong>11.1.4</strong></p>
<pre><code>Java的多线程系统是基于Thread类、Thread类的方法及其伴随接口Runnable而构建的。Thread类封装了线程的执行。因为不能直接引用正在运行的线程的细微状态，所以需要通过代理进行处理，Thread实例就是线程的代理。为了创建新线程，程序可以扩展Thread类或实现Runnable接口。
Thread类定义了一些用于帮助管理线程的方法。
getName():获取线程的名称。
getPriority()：获取线程的优先级。
isAlive()：确定线程是否仍然运行。
join():等待线程终止。
run():线程的入口点。
sleep():挂起线程一段时间。
start():通过调用线程的run()方法启动线程。
</code></pre><p><strong>11.2 主线程</strong></p>
<pre><code>当Java程序启动时，会立即开始运行一个线程，因为它是程序开始时执行的线程，所以这个线程通常称为程序的主线程。主线程很重要，有以下两个原因：
(1)其他线程都是从主线程产生的。
(2)通常，主线程必须是最后才结束执行的线程，因为它要执行各种关闭动作。

尽管主线程是在程序启动时自动创建的，但是可以通过Thread对象对其进行控制。为此，必须调用currentThread()方法获取对主线程的一个引用。该方法是Thread类的公有静态成员，它的一般形式如下：
static Thread currentThread()
这个方法返回对调用它的线程的引用。一旦得到对主线程的引用，就可以像控制其他线程那样控制主线程了。

sleep()方法使线程从调用时挂起，暂缓执行指定的时间间隔(毫秒数),它的一般形式如下：
static void sleep(long milliseconds) throws InterruptedException
sleep()方法可能会抛出InterruptedException异常。如果其他线程试图中断这个正在睡眠的线程，就会抛出这个异常。
</code></pre><p><strong>11.3 创建线程</strong></p>
<pre><code>在最通常情况下，通过实例化Thread类型的对象创建线程。Java定义了创建线程的两种方法：
(1)实现Runnable接口 (重载Runnalbe接口中的run()方法)
(2)扩展Thread类本身 (需要从Java.lang.Thread类派生一个新的线程类，重载它的run()方法)
</code></pre><p><strong>11.3.1 实现Runnable接口</strong></p>
<pre><code>创建线程最简单的方式是创建实现了Runnable接口的类。Runnable接口抽象了一个可执行代码单元。可以依托任何实现了Runnable接口的对象来创建线程。
</code></pre><p>为了实现Runnable接口，类只需要实现run()方法，该方法的声明如下：</p>
<blockquote>
<pre><code>public void run()
</code></pre></blockquote>
<pre><code>在run()方法内部，定义组成新线程的代码。run()方法可以调用其他方法，使用其他类，可也以声明变量，就像main线程那样，理解这一点很重要。唯一的区别是：run()方法为程序中另外一个并发线程的执行建立了入口点。当run()方法返回时，这个线程将结束。

在创建实现了Runnable接口的类之后，可以在类中实例化Thread类的对象。Thread类定义了几个构造函数。我们使用的那个构造函数如下所示：

Thread(Runnable threadOb,String threadName)

在这个构造函数中，threadOb是实现了Runnable接口的类的实例，这定义了从何开始执行线程。新线程的名字有threadName指定。

 在创建了新线程之后，只有调用线程的start()方法，线程才会运行，该方法是在Thread类中声明的。本质上，start()方法执行对run()方法的调用。
 start()方法的声明如下所示：

 void start()

 例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">class NewThread implements Runnable</div><div class="line">&#123;</div><div class="line">Thread t;</div><div class="line"></div><div class="line">NewThread()</div><div class="line">&#123;</div><div class="line">	//Create a new thread.</div><div class="line">	t = new Thread(this,&quot;Demo Thread&quot;);</div><div class="line">	System.out.println(&quot;Child thread: &quot;+t);</div><div class="line">	//Start thread </div><div class="line">	t.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void run()</div><div class="line">&#123;</div><div class="line">	try</div><div class="line">	&#123;</div><div class="line">		for(int i = 5; i&gt;0; i--)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Child Thread: &quot;+i);</div><div class="line">			Thread.sleep(500);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	catch(InterruptedException e)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Child interrupted.&quot;);</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	System.out.println(&quot;Exiting child thread.&quot;);</div><div class="line">&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ThreadDemo </div><div class="line">&#123;</div><div class="line">public static void main(String[] args)</div><div class="line">&#123;</div><div class="line">	new NewThread();</div><div class="line">	</div><div class="line">	try</div><div class="line">	&#123;</div><div class="line">		for(int i = 5; i&gt;0; i--)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main Thread: &quot;+i);</div><div class="line">			Thread.sleep(1000);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	catch(InterruptedException e)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Main Thread interrupted.&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	System.out.println(&quot;Main thread exiting.&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>在NewThread类的构造函数中，通过下面这条语句创建了一个新的Thread对象:

t = new Thread(this,&quot;Demo Thread&quot;);

传递this作为第一个参数，以表明希望新线程调用this对象的run()方法。接下来调用start()方法，从run()方法开始启动线程的执行。这会导致开始执行子线程的for循环。调用完start()方法之后，NewThread类的构造函数返回到main()方法。当恢复主线程时，会主线程的for循环。这两个线程继续运行，在单核系统中它们会共享CPU，直到它们的循环结束。

另外提供一种，比较符合人们编程方式的上面代码的书写方式，即不在实现了Runnable接口的类中创建/启动线程。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">class NewThread implements Runnable</div><div class="line"> &#123;</div><div class="line"> </div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i = 5; i&gt;0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Child Thread: &quot;+i);</div><div class="line">				Thread.sleep(500);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Child interrupted.&quot;);</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">		System.out.println(&quot;Exiting child thread.&quot;);</div><div class="line">	&#125;	</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> class ThreadDemo </div><div class="line"> &#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Runnable r = new NewThread();</div><div class="line">		Thread t = new Thread(r,&quot;Demo Thread&quot;);</div><div class="line">		t.start();</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i = 5; i&gt;0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Main Thread: &quot;+i);</div><div class="line">				Thread.sleep(1000);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main Thread interrupted.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Main thread exiting.&quot;);</div><div class="line">	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>13.2 扩展Thread类</strong></p>
<pre><code>扩展类必须重写run()方法，run()方法是新线程的入口点。扩展类还必须调用start()方法以开始新线程的执行。
使用扩展Thread类对上面程序就行就该：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">class NewThread extends Thread</div><div class="line">&#123;</div><div class="line">	NewThread()</div><div class="line">	&#123;</div><div class="line">		super(&quot;Demo Thread&quot;);</div><div class="line">		System.out.println(&quot;Child thread: &quot;+this);</div><div class="line">		start(); //start the thread </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i=5; i&gt;0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Child Thread: &quot;+i);</div><div class="line">				Thread.sleep(500);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Child interrupted.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Exiting child thread.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ExtendThread</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		new NewThread();</div><div class="line">		</div><div class="line">		/**</div><div class="line">		*	当NewThread类中的构造函数中没有start()方法时，可以这样书写，比较符合一般人的习惯。</div><div class="line">		*	Thread t = new NewThread();</div><div class="line">		*	t.start()</div><div class="line">		*/</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i = 5; i&gt;0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Main Thread: &quot;+i);</div><div class="line">				Thread.sleep(1000);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main Thread interrupted.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Main thread exiting.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>11.3.3 选择一种创建方式</strong>    </p>
<pre><code>为什么Java要提供两种方法来创建线程呢？它们都有哪些区别？相比而言，哪一种方法更好呢？
在Java中，类仅支持单继承，也就是说，当定义一个新的类的时候，它只能扩展一个外部类.这样，如果创建自定义线程类的时候是通过扩展 Thread类的方法来实现的，那么这个自定义类就不能再去扩展其他的类，也就无法实现更加复杂的功能。因此，如果自定义类必须扩展其他的类，那么就可以使用实现Runnable接口的方法来定义该类为线程类，这样就可以避免Java单继承所带来的局限性。

还有一点最重要的就是使用实现Runnable接口的方式创建的线程可以处理同一资源，从而实现资源的共享.

假设一个影院有三个售票口，分别用于向儿童、成人和老人售票。影院为每个窗口放有100张电影票，分别是儿童票、成人票和老人票。三个窗口需要同时卖票，而现在只有一个售票员，这个售票员就相当于一个CPU，三个窗口就相当于三个线程。通过程序来看一看是如何创建这三个线程的。

（1）通过扩展Thread类来创建多线程
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class MutliThread extends Thread</div><div class="line">&#123;</div><div class="line">	private int ticket=100;//每个线程都拥有100张票</div><div class="line"></div><div class="line">		MutliThread(String name)</div><div class="line">		&#123;</div><div class="line">			super(name);//调用父类带参数的构造方法</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public void run()</div><div class="line">		&#123;</div><div class="line">			while(ticket&gt;0)</div><div class="line">			&#123;</div><div class="line">				System.out.println(ticket--+&quot; is saled by &quot;+Thread.currentThread().getName());</div><div class="line">				ticket--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MutliThreadDemo </div><div class="line">&#123;</div><div class="line">	public static void main(String [] args)</div><div class="line">	&#123;</div><div class="line">		MutliThread m1=new MutliThread(&quot;Window 1&quot;);</div><div class="line">		MutliThread m2=new MutliThread(&quot;Window 2&quot;);</div><div class="line">		MutliThread m3=new MutliThread(&quot;Window 3&quot;);</div><div class="line">		</div><div class="line">		m1.start();</div><div class="line">		m2.start();</div><div class="line">		m3.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>程序中定义一个线程类，它扩展了Thread类。利用扩展的线程类在MutliThreadDemo类的主方法中创建了三个线程对象，并通过start()方法分别将它们启动。

从结果可以看到，每个线程分别对应100张电影票，之间并无任何关系，这就说明每个线程之间是平等的，没有优先级关系，因此都有机会得到CPU的处理。但是结果显示这三个线程并不是依次交替执行，而是在三个线程同时被执行的情况下，有的线程被分配时间片的机会多，票被提前卖完，而有的线程被分配时间片的机会比较少，票迟一些卖完。

可见，利用扩展Thread类创建的多个线程，虽然执行的是相同的代码，但彼此相互独立，且各自拥有自己的资源，互不干扰。
</code></pre><p>   （2）通过实现Runnable接口来创建多线程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class MutliThread implements Runnable</div><div class="line">&#123;</div><div class="line">	private int ticket=100;//每个线程都拥有100张票</div><div class="line">	private String name;</div><div class="line">	</div><div class="line">	MutliThread(String name)</div><div class="line">	&#123;</div><div class="line">		this.name=name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		while(ticket&gt;0)</div><div class="line">		&#123;</div><div class="line">			System.out.println(ticket--+&quot; is saled by &quot;+name);</div><div class="line">			ticket--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MutliThreadDemo2 </div><div class="line">&#123;</div><div class="line">	public static void main(String [] args)</div><div class="line">	&#123;</div><div class="line">		MutliThread m1=new MutliThread(&quot;Window 1&quot;);</div><div class="line">		MutliThread m2=new MutliThread(&quot;Window 2&quot;);</div><div class="line">		MutliThread m3=new MutliThread(&quot;Window 3&quot;);</div><div class="line"></div><div class="line">		Thread t1=new Thread(m1);</div><div class="line">		Thread t2=new Thread(m2);</div><div class="line">		Thread t3=new Thread(m3);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>由于这三个线程也是彼此独立，各自拥有自己的资源，即100张电影票，因此程序输出的结果和（1）结果大同小异。均是各自线程对自己的100张票进行单独的处理，互不影响。
可见，只要现实的情况要求保证新建线程彼此相互独立，各自拥有资源，且互不干扰，采用哪个方式来创建多线程都是可以的。因为这两种方式创建的多线程程序能够实现相同的功能。
</code></pre><p>   （3）通过实现Runnable接口来实现线程间的资源共享</p>
<p>   现实中也存在这样的情况，比如模拟一个火车站的售票系统，假如当日从A地发往B地的火车票只有100张，且允许所有窗口卖这100张票，那么每一个窗口也相当于一个线程，但是这时和前面的例子不同之处就在于所有线程处理的资源是同一个资源，即100张车票。如果还用前面的方式来创建线程显然是无法实现的，这种情况该怎样处理呢？看下面这个程序，程序代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class MutliThread implements Runnable</div><div class="line">&#123;</div><div class="line">	private int ticket=100;//每个线程都拥有100张票</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		while(ticket&gt;0)</div><div class="line">		&#123;</div><div class="line">			System.out.println(ticket--+&quot; is saled by &quot;+name);</div><div class="line">			ticket--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MutliThreadDemo2 </div><div class="line">&#123;</div><div class="line">	public static void main(String [] args)</div><div class="line">	&#123;</div><div class="line">		MutliThread m=new MutliThread();</div><div class="line"></div><div class="line">		Thread t1=new Thread(m,&quot;Window 1&quot;);</div><div class="line">		Thread t2=new Thread(m,&quot;Window 2&quot;);</div><div class="line">		Thread t3=new Thread(m,&quot;Window 3&quot;);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>结果正如前面分析的那样，程序在内存中仅创建了一个资源，而新建的三个线程都是基于访问这同一资源的，并且由于每个线程上所运行的是相同的代码，因此它们执行的功能也是相同的。

可见，如果现实问题中要求必须创建多个线程来执行同一任务，而且这多个线程之间还将共享同一个资源，那么就可以使用实现Runnable接口的方式来创建多线程程序。而这一功能通过扩展Thread类是无法实现的，读者想想看，为什么？
答案：通过扩展Thread类可以实现，只需将ticket设置成静态static类型，读写的时候进行加锁即可。但是，实现ruanable接口的这种方式，明显是定义一个类，创建一个对象，然后跟着创建三个线程，他们共享该对象的成员变量。相比第一种继承Thread，要创建三个对象，然后创建三个线程，最后按照你们的方法创建一个static的变量，再加锁，这个方式，并不是很好。

实现Runnable接口相对于扩展Thread类来说，具有无可比拟的优势。这种方式不仅有利于程序的健壮性，使代码能够被多个线程共享，而且代码和数据资源相对独立，从而特别适合多个具有相同代码的线程去处理同一资源的情况。这样一来，线程、代码和数据资源三者有效分离，很好地体现了面向对象程序设计的思想。因此，几乎所有的多线程程序都是通过实现Runnable接口的方式来完成的。
</code></pre><p><strong>11.5 使用isAlive()和join()方法</strong> </p>
<pre><code>前面提到，通常希望主线程在最后结束。在前面的例子中通过sleep()方法，并指定足够长的延迟时间来确保所有子线程在主线程之前终止。但是，这完全不是一个令人满意的方案，并且还能造成一个更大的问题：线程如何知道另一个线程何时结束？幸运的是，Thread类提供了一种能够解决这个问题的方法。

有两种方法可以确实线程是否已经结束。
首先，可以为线程调用isAlive()方法。这个方法是由Thread类定义的，它的一般形式如下所示：

final boolean isAlive()

如果线程仍在运行，isAlive()方法就会返回true,否则返回false.

虽然isAlive()方法很有用，但是通常使用join()方法来等待线程结束，如下所示：

final void join() throws InterruptedException

该方法一直等待，直到调用线程终止。如此命名该方法的原因是：调用线程一直等待，直到指定的线程加入(join)其中为止。join()方法的另外一种形式，允许指定希望等待指定线程终止的最长时间。

下面是前面例子的改进版本，该版本使用join()方法确保主线程在最后结束，另外演示了isAlive()方法的使用：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">class NewThread implements Runnable</div><div class="line">&#123;</div><div class="line">	String name; //name of thread</div><div class="line">	Thread t;</div><div class="line">	</div><div class="line">	NewThread(String threadName)</div><div class="line">	&#123;</div><div class="line">		name = threadName;</div><div class="line">		t = new NewThread(this,name);</div><div class="line">		System.out.println(&quot;New Thread: &quot;+t);</div><div class="line">		t.start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i=5; i&gt;0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(name+&quot;: &quot;+i);</div><div class="line">				Thread.sleep(1000);</div><div class="line">			&#125;</div><div class="line">			catch(InterruptedException e)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;name&quot;+&quot; interrupted&quot;);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			System.out.println(name+&quot; exiting&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class DemoJoin</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		NewThread ob1 = new NewThread(&quot;One&quot;);</div><div class="line">		NewThread ob2 = new NewThread(&quot;Two&quot;);</div><div class="line">		NewThread ob3 = new NewThread(&quot;Three&quot;);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Thread One is alive: &quot;+ob1.t.isAlive());</div><div class="line">		System.out.println(&quot;Thread Two is alive: &quot;+ob2.t.isAlive());</div><div class="line">		System.out.println(&quot;Thread Three is alive: &quot;+ob3.t.isAlive());</div><div class="line">		</div><div class="line">		//waiting for threads to finish</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Waiting for threads to finish.&quot;);</div><div class="line">			ob1.t.join();</div><div class="line">			ob2.t.join();</div><div class="line">			ob3.t.join();</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main Thread interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Thread One is alive: &quot;+ob1.t.isAlive());</div><div class="line">		System.out.println(&quot;Thread Two is alive: &quot;+ob2.t.isAlive());</div><div class="line">		System.out.println(&quot;Thread Three is alive: &quot;+ob3.t.isAlive());</div><div class="line">		</div><div class="line">		System.out.println(&quot;Main Thread exiting&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>可以看出，在join()方法调用返回之后，线程停止执行。
</code></pre><p><strong>11.6 线程优先级</strong> </p>
<pre><code>为了设置线程的优先级，需要使用setPriority()方法，它是Thread类的成员，下面是该方法的一般形式：

final void setPriority(int level)

其中，level指定了为调用线程设置的新优先级，默认level == 5.level的值必须在MIN_PRIORITY和MAX_PRIORITY之间选择。目前，这些值分别是1和10.
</code></pre><p>如果希望线程设置为默认优先级，可以使用NORM_PRIORITY，目前的值是5.这些优先级在Thread类中作为static final变量定义的。</p>
<pre><code>可以通过调用Thread类的getPriority()方法获取当前的优先级，该方法如下所示：

final int getPriority()
</code></pre><p><strong>11.7 同步</strong> </p>
<pre><code>当两个或多个线程需要访问共享资源时，它们需要以某种方式确保每一次只有一个线程使用资源。实现这一目的的过程称为同步。

同步的关键是监视器的概念，前面已经叙述。监视器是用作互斥锁的对象。在给定时刻，只有一个线程可以拥有监视器。

可以使用两种方法同步代码。这两种方法都要用到synchronized关键字，下面分别介绍这两种方法。
</code></pre><p><strong>11.7.1  使用同步方法</strong></p>
<pre><code>在Java中进行同步很容易，因为所有对象都有与他们自身关联的隐式的监视器。为了进入对象的监视器，只需要调用synchronized关键字修饰过
</code></pre><p>的方法。当某个线程进入同步方法中，调用同一实例的该同步方法(或任何其他同步方法)的所有其他线程都必须等待。为了退出监视器并将对象的控制权<br>交给下一个等待线程，监视器的拥有者只需要简单的从同步方法中返回。</p>
<pre><code>下面介绍一个应当使用但是没有使用同步的例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">//This program is not synchronized</div><div class="line"> </div><div class="line"> class Callme</div><div class="line"> &#123;</div><div class="line">	void call(String msg)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;[&quot;+msg);</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			Thread.sleep(1000);</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;]&quot;)</div><div class="line">	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> class Caller implements Runnable</div><div class="line"> &#123;</div><div class="line">	String msg;</div><div class="line">	Callme target;</div><div class="line">	Thread t;</div><div class="line">	</div><div class="line">	Caller(Callme targ,String s)</div><div class="line">	&#123;</div><div class="line">		target = targ;</div><div class="line">		msg = s;</div><div class="line">		t = new Thread(this);</div><div class="line">		t.start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void run()</div><div class="line">	&#123;</div><div class="line">		target.call(msg);</div><div class="line">	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> class Synch</div><div class="line"> &#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Callme target = new Callme();</div><div class="line">		</div><div class="line">		Caller th1 = new Caller(target,&quot;Hello&quot;);</div><div class="line">		Caller th2 = new Caller(target,&quot;Java&quot;);</div><div class="line">		Caller th3 = new Caller(target,&quot;Android&quot;);</div><div class="line">		</div><div class="line">		//waiting for threads to end</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			th1.t.join();</div><div class="line">			th2.t.join();</div><div class="line">			th3.t.join();</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<pre><code> 下面该程序生成的输出：
 Hello[Java[Android]
 ]
 ]

 可以看出，通过调用sleep()方法，call()方法允许执行切换到另一个线程，这会导致混合输出3个消息字符串。在这个程序中，没有采取什么方法以阻止3个线程在相同的时间调用同一对象的同一方法，这就是所谓的竞态条件(race condition),因为3个线程相互竞争以完成方法。这个例子中使用了sleep()方法，使得效果可以重复并且十分明显。在大多数情况下，竞态条件会更加微妙并且不可预测，因为不能确定何时会发生线程上下文切换。这会造成程序在某一次运行正确，而在下一次运行错误。

为了修复前面的程序，必须按顺序调用call()方法。也就是说，必须限制每次只能由一个线程调用call()方法。为此，只需要简单的在call方法定义的前面添加关键字synchronized，如下所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Callme</div><div class="line">&#123;</div><div class="line">	synchronized void call(String msg)</div><div class="line">	&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>当一个线程使用call()方法时，这会阻止其他线程进入该方法。将synchronized关键字添加到call()方法之后，程序输出如下：
[Hello]
[Java]
[Android]

在多线程情况下，如果有一个或一组方法来操作对象的内部状态(对象中的数据)，那么每次都应当使用synchronized关键字，以保证状态不会进入竞态条件。
</code></pre><p>请记住，一旦线程进入了一个实例的同步方法，所有其他线程就都不能再进入相同实例的任何同步方法。但是，仍然可以继续调用同一实例的非同步部分。</p>
<p><strong>11.7.2 synchronized语句</strong></p>
<pre><code>虽然在类中创建同步方法是一种比较容易并且行之有效的实现同步的方式，但并不是在所有情况下都可以使用这种方式。为了理解其中的原因，我们分析下面的内容。假设某个类没有针对多线程访问进行设计，即类没有使用同步方法，而又希望同步对类的访问。进一步讲，类不是由你创建的，而是由第三方创建的，并且你不能访问类的源代码。因此，不能为类中的合适方法添加synchronized修饰符。如何同步访问这种类的对象呢？幸运的是，这个问题的解决方案很容易：可以简单的将对这种类定义的方法的调用放到synchronized代码块中。

下面是synchronized语句的一般形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">synchronized(objRef)</div><div class="line">&#123;</div><div class="line">	//statements to be synchronized</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>其中，objRef是对被同步对象的引用。synchronized代码块确保对objRef对象的成员方法的调用，只会在当前线程成功进入objRef的监视器之后发生。

下面是前面例子的另一个版本，该版本在run()方法中使用synchronized代码块：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">//This program uses a synchronized block</div><div class="line"></div><div class="line">class Callme</div><div class="line"> &#123;</div><div class="line">	void call(String msg)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;[&quot;+msg);</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			Thread.sleep(1000);</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;]&quot;)</div><div class="line">	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> class Caller implements Runnable</div><div class="line"> &#123;</div><div class="line">	String msg;</div><div class="line">	Callme target;</div><div class="line">	Thread t;</div><div class="line">	</div><div class="line">	Caller(Callme targ,String s)</div><div class="line">	&#123;</div><div class="line">		target = targ;</div><div class="line">		msg = s;</div><div class="line">		t = new Thread(this);</div><div class="line">		t.start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	void run()</div><div class="line">	&#123;</div><div class="line">		//uses synchronized block</div><div class="line">		synchronized(target)</div><div class="line">		&#123;</div><div class="line">			target.call(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> class Synch</div><div class="line"> &#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Callme target = new Callme();</div><div class="line">		</div><div class="line">		Caller th1 = new Caller(target,&quot;Hello&quot;);</div><div class="line">		Caller th2 = new Caller(target,&quot;Java&quot;);</div><div class="line">		Caller th3 = new Caller(target,&quot;Android&quot;);</div><div class="line">		</div><div class="line">		//waiting for threads to end</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			th1.t.join();</div><div class="line">			th2.t.join();</div><div class="line">			th3.t.join();</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<pre><code>在此，没有使用synchronized修饰call()方法。反而在Caller类的run()方法中使用了synchronized语句，这会使该版本的输出和前面版本的相同。
</code></pre><p><strong>11.8 线程间通信</strong></p>
<pre><code>这里的线程间通信其实操作系统中所讲的同步，同步首先互斥。例如，生产者和消费者问题。

Java通过提供wait()、notify()以及notifyAll()方法，提供了一种巧妙的进程间通信机制，这些方法在Object中是作为final方法实现的，因此所有类都具有这些方法。所有这3个方法都只能在同步上下文中调用：
(1)wait()方法通知调用线程放弃监视器并进入休眠，直到其他一些线程进入同一个监视器并调用notify()方法或notifyAll()方法。 
(2)notify()方法唤醒调用相同对象的wait()方法的线程。
(3)notifyAll()方法唤醒调用相同对象的wait()方法的所有线程，其中的一个线程将得到访问授权。

这些方法都是在Object类中定义的，如下所示：

final void wait() throws InterruptedException
final void notify()
final void notifyAll()

wait()方法还有梁歪一种形式，允许指定等待的时间间隔。

在通过例子演示线程通信之前，还有重要的一点需要指出。尽管在正常情况下，wait()方法会等待直到调用notify()或notifyAll()方法，但是还有一种几率很小却可能发生的情况，等待线程由于假唤醒(spurious wakeup)而被唤醒。对于这种情况，等待线程也会被唤醒。然而却没有调用notify()或notifyAll()方法(本质上，线程在没有什么明显理由的情况下就被恢复了)。因为存在这种极小却可能发生的情况，Orical推荐应当在一个检查线程等待条件的循环中调用wait()方法。

首先分析下面的示例程序，该例以不正确的方式实现了一个简单形式的生产者/消费者问题。该例包含4个类：类Q是试图同步的队列；类Producer是产生队列条目的线程对象；类Customer是使用队列条目的线程对象；类PC是一个小类型，用于创建类Q、Producer和Customer的实例。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">class Q</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	</div><div class="line">	synchronized int get()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Got: &quot;+n);</div><div class="line">		return n;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void put(int n)</div><div class="line">	&#123;</div><div class="line">		this.n = n;</div><div class="line">		System.out.println(&quot;Put: &quot;+n);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Producter implements Runnable</div><div class="line">&#123;</div><div class="line">	Q q;</div><div class="line">	</div><div class="line">	Producter(Q q)</div><div class="line">	&#123;</div><div class="line">		this.q = q;</div><div class="line">		new Thread(this,&quot;Producter&quot;).start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		int i = 0;</div><div class="line">		</div><div class="line">		while(true)</div><div class="line">		&#123;</div><div class="line">			q.put(++i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Consumer implements Runnable</div><div class="line">&#123;</div><div class="line">	Q q;</div><div class="line">	</div><div class="line">	Consumer(Q q)</div><div class="line">	&#123;</div><div class="line">		this.q = q;</div><div class="line">		new Thread(this,&quot;Consumer&quot;).start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		while(true)</div><div class="line">		&#123;</div><div class="line">			q.get();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PC</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Q q = new Q();</div><div class="line">		new Producter(q);</div><div class="line">		new Consumer(q);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Press Contrlo-C to stop.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下(根据处理器的速度和加载任务，实际输出可能不同)：

put: 1 
get: 1 
get: 1 
get: 1 
get: 1 
get: 1 
put: 2 
put: 3
put: 4
put: 5 
put: 6
put: 7
get: 7
可以看出，生产者在将1放入队列之后，消费者开始运行，并且连续5次获得相同的数值1.然后，生产者恢复执行，并产生数值2到7，而不让消费者有机会使用它们。

使用Java编写这个程序的正确方式是使用wain()和notify()方法在两个方向上发信号，如下所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">class Q</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	//刚开始valueSet == 0,表示队列为空，没有数据。生产者可以向队列中放入数据，将valueSet = true,表示队列中存入了数据，消费者可以从</div><div class="line">	//队列中取出数据。取出数据后valueSet = 0，生产者可以放入数据，依次循环。</div><div class="line">	boolean valueSet = false;</div><div class="line">	</div><div class="line">	synchronized int get()</div><div class="line">	&#123;</div><div class="line">		while(!valueSet)</div><div class="line">		&#123;</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				wait();</div><div class="line">			&#125;</div><div class="line">			catch(InterruptedException)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;InterruptedException caught.&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Got: &quot;+n);</div><div class="line">		valueSet = false;</div><div class="line">		notify();</div><div class="line">		return n;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void put(int n)</div><div class="line">	&#123;</div><div class="line">		while(valueSet)</div><div class="line">		&#123;</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				wait();</div><div class="line">			&#125;</div><div class="line">			catch(InterruptedException e)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;InterruptedException caught.&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		this.n = n;</div><div class="line">		valueSet = true;</div><div class="line">		System.out.println(&quot;Put: &quot;+n);</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Producter implements Runnable</div><div class="line">&#123;</div><div class="line">	Q q;</div><div class="line">	</div><div class="line">	Producter(Q q)</div><div class="line">	&#123;</div><div class="line">		this.q = q;</div><div class="line">		new Thread(this,&quot;Producter&quot;).start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		int i = 0;</div><div class="line">		</div><div class="line">		while(true)</div><div class="line">		&#123;</div><div class="line">			q.put(++i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Consumer implements Runnable</div><div class="line">&#123;</div><div class="line">	Q q;</div><div class="line">	</div><div class="line">	Consumer(Q q)</div><div class="line">	&#123;</div><div class="line">		this.q = q;</div><div class="line">		new Thread(this,&quot;Consumer&quot;).start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		while(true)</div><div class="line">		&#123;</div><div class="line">			q.get();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PC</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Q q = new Q();</div><div class="line">		new Producter(q);</div><div class="line">		new Consumer(q);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Press Contrlo-C to stop.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
put: 1
get: 1 
put: 2 
get: 2 
put: 3 
get: 3 
put: 4 
get: 4 
put: 5 
get: 5
</code></pre><p>死锁：</p>
<pre><code>例如，当两个线程循环依赖一对同步对象时，会发生死锁现象。
假设一个线程进入对象X的监视器，另一个线程进入对象Y的监视器。如果X中的线程试图调用对象Y中的任何同步方法，同时Y中的线程也试图调用X中的任何同步方法，则X中的线程和Y中的线程同时被阻塞，两个线程则会永远等待下去。

例如： 
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">class A </div><div class="line">&#123;</div><div class="line">	synchronized void foo(B b)</div><div class="line">	&#123;</div><div class="line">		String name = Thread.currentThread.getName();</div><div class="line">		</div><div class="line">		System.out.println(name+&quot; entered A.foo&quot;);</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			Thread.sleep(1000);</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;A interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(name+&quot; trying to call B.last()&quot;);</div><div class="line">		b.last();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void last()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside A.last&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B </div><div class="line">&#123;</div><div class="line">	synchronized void bar(A a)</div><div class="line">	&#123;</div><div class="line">		String name = Thread.currentThread().getName();</div><div class="line">		System.out.println(name+&quot; entered B.bar&quot;);</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			Thread.sleep(1000);</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;B Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(name+&quot; trying to call A.last()&quot;);</div><div class="line">		a.last();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void last()</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Inside A.last&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Deadlock implements Runnable</div><div class="line">&#123;</div><div class="line">	A a = new A();</div><div class="line">	B b = new B();</div><div class="line">	</div><div class="line">	Deadlock()</div><div class="line">	&#123;</div><div class="line">		Thread.currentThread().setName(&quot;MainThread&quot;);</div><div class="line">		Thread t = new Thread(this,&quot;RacingThread&quot;);</div><div class="line">		t.start();</div><div class="line">		</div><div class="line">		a.foo(b);</div><div class="line">		System.out.println(&quot;Back in main thread&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		b.bar(a);</div><div class="line">		System.out.println(&quot;Back in other thread&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		new Deadlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>当运行这个程序，会看到如下输出：
MainThread entered A.foo
RacingThread entered B.bar
MainThread trying to call B.last()
RacingThread trying to call A.last()

可以看出程序出现了死锁线程。当等待a的监视器时，RacingThread拥有b的监视器。同时，MainThread拥有a,并且在等待获取b。这个程序永远不会结束。正如该程序所演示的那样，如果多线程程序偶尔被锁住，那么首先应当检查是否是由于死锁造成的。
</code></pre><p><strong>11.9 挂起、恢复与停止线程</strong></p>
<pre><code>有时挂起线程的执行是有用的。例如，可以使用单独的线程显示一天的时间。如果用户不想要时钟，那么可以挂起时钟线程。无论是什么情况，挂起线程都是一件简单的事情。线程一旦挂起，重新启动线程也很简单。

Java早起版本(例如Java 1.0)和现代版本(例如Java 2.0开始)提供的用来挂起、恢复以及停止线程的机制不同。在Java 2以前，程序使用Thread类定义的suspend()、resume()和stop()方法，暂停、重新启动和停止线程的执行。

虽然这些方法对于管理线程执行看起来是一种合理并且方便的方式，但是在新的Java程序中不能使用它们。下面是其中的原因。在几年前Java 2 不推荐使用Thread类的suspend()方法，因为suspend()方法有时会导致严重的系统故障。假定为关键数据结构加锁，如果这是线程被挂起，那么这些锁将无法释放。其他可能等待这些资源的线程会被死锁。

方法resume()也不推荐使用。虽然不会造成问题，但是如果不使用suspend()方法，就不能使用resume()方法，它们是配对使用的。

对于Thread类的stop()方法，Java 2也反对使用，因为这个方法也会造成严重的系统故障。假定线程正在向关键的重要数据结构中写入数据，并且只完成了部分发生变化的数据。如果这是停止线程，那么数据结构可能会处于损坏状态。问题是：stop()会导致释放调用线程的所有锁。因此，另一正在等待相同锁的线程可能会使用这些以损坏的数据。

在现代Java版本中，线程必须被设计为run()方法周期性的进行检查，以确定是否应当挂起、恢复或停止线程自身的执行。通常这是通过建立用来标志线程执行状态的变量完成的。这要这个标志变量被设置为&quot;运行&quot;，run()方法就必须让线程继续执行。如果标志变量被设置为&quot;挂起&quot;,线程就必须暂停。如果标志变量被设置为&quot;停止&quot;，线程就必须停止。当然，编写这种代码的方式有很多，但是对于所有程序中心主题是相同的。

下面例子演示了如何使用继承自Object的wait()和notify()方法控制线程的执行。下面分析这个程序中的操作。
NewThread类包含布尔型实例变量suspendFlag，该变量用于控制线程的执行，构造函数将该变量初始化为false。方法run()包含检查suspendFlag变量的synchronized代码块。如果该变量为true,就调用wait()方法，挂起线程的执行。mysuspend()方法将suspendFlag变量设置为true。myresume()方法将suspendFlag 设置为false，并调用notify()方法以唤醒线程。最后，对main()方法进行修改以调用myspend()和myresume()方法。 
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">class NewThread implements Runnable</div><div class="line">&#123;</div><div class="line">	String name;</div><div class="line">	Thread t;</div><div class="line">	boolean suspendFlag;</div><div class="line">	</div><div class="line">	NewThread(String threadName)</div><div class="line">	&#123;</div><div class="line">		name = threadName;</div><div class="line">		t = new Thread(this,name);</div><div class="line">		System.out.println(&quot;NewThread: &quot;+t);</div><div class="line">		suspendFlag = false;</div><div class="line">		t.start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void run()</div><div class="line">	&#123;</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			for(int i = 15; i &gt; 0; i--)</div><div class="line">			&#123;</div><div class="line">				System.out.println(name+&quot;: &quot;+i);</div><div class="line">				Thread.sleep(200);</div><div class="line">				</div><div class="line">				synchronized(this)</div><div class="line">				&#123;</div><div class="line">					while(suspendFlag)</div><div class="line">					&#123;</div><div class="line">						wait();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(name+&quot; interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(name+&quot; exiting&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void mysuspend()</div><div class="line">	&#123;</div><div class="line">		suspendFlag = true;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	synchronized void myresume()</div><div class="line">	&#123;</div><div class="line">		suspendFlag = false;</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SuspendResume</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		NewThread ob1 = new NewThread(&quot;One&quot;);</div><div class="line">		NewThread ob2 = new NewThread(&quot;Two&quot;);</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			Thread.sleep(1000);</div><div class="line">			ob1.mysuspend();</div><div class="line">			System.out.println(&quot;Suspending thread One&quot;);</div><div class="line">			</div><div class="line">			Thread.sleep(1000);</div><div class="line">			ob1.myresume();</div><div class="line">			System.out.println(&quot;Resume thread One&quot;);</div><div class="line">			</div><div class="line">			Thread.sleep(1000);</div><div class="line">			ob2.mysuspend();</div><div class="line">			System.out.println(&quot;Suspending thread Two&quot;);</div><div class="line">			</div><div class="line">			Thread.sleep(1000);</div><div class="line">			ob2.myresume();</div><div class="line">			System.out.println(&quot;Resume thread Two&quot;);</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main Thread Interrupted&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Waiting for threads to finish&quot;);</div><div class="line">			ob1.t.join();</div><div class="line">			ob2.t.join();</div><div class="line">		&#125;</div><div class="line">		catch(InterruptedException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Main thread exiting&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Main thread exiting&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>后面会看到更多使用现代线程控制机制的例子。尽管这种机制没有旧机制那么&quot;清晰&quot;,但是不管怎样，这是确保不会发生运行错误所需要做的。
</code></pre><p>对于所有新代码，必须使用这种方式。</p>
<p><strong>11.10 获取线程的状态</strong> </p>
<pre><code>线程可以处于许多不同的状态。可以调用Thread类定义的getState()方法来获取线程的当前状态，该方法如下所示：

Thread.State getState()

该方法返回Thread.State类型的值，指示在调用该方法时线程所处的状态。State是Thread类定义的枚举类型。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之枚举、自动装箱与注解（元数据）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E6%9E%9A%E4%B8%BE%E3%80%81%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%B3%A8%E8%A7%A3%EF%BC%88%E5%85%83%E6%95%B0%E6%8D%AE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>12.1 枚举</strong></p>
<pre><code>形式最简单的枚举，看起来和其它语言中的枚举类似。但是，这种相似性只是表面上的。因为在Java中，枚举定义了一种类类型，极大的扩展了枚举
</code></pre><p>的功能。例如在Java中，枚举可以具有构造函数、方法以及实例变量。</p>
<p><strong>12.1.1    枚举的基础知识</strong></p>
<pre><code>创建枚举需要使用关键字enum.例如，下面是一个简单的枚举，其中列出了各种苹果的品种：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">enum Apple</div><div class="line">&#123;</div><div class="line">	Jonathan, GoldenDel, RedDel, Winesap, Cortland</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>标识符Jonathan、GoldenDel等被称为枚举常量。每个枚举常量被隐式声明为Apple的公有、静态final成员。此外，枚举常量的类型是声明它们的枚举类型。因此在Java语言中，这些常量被称为是&quot;自类型化的&quot;。 

定义了枚举后，可以创建枚举类型的变量。但是，尽管枚举定义了类类型，却不能使用new实例化枚举。反而，枚举变量的声明和使用方式在许多方面与基本类型相同。例如：

Apple ap;
ap = Apple.RedDel;

可以使用关系运算发&quot;==&quot;比较两个 枚举常量的相等性。例如：

if(ap == Apple.GoldenDel) //...

枚举值也可以用于控制switch语句。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">switch(ap)</div><div class="line">&#123;</div><div class="line">	case Jonathan:</div><div class="line">		//...</div><div class="line">	case Winesap:</div><div class="line">		//...</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意在case语句中，枚举常量的名称没有使用枚举类型的名称进行限定。也就是说，使用的是Winesap而不是Apple.Winesap。这是因为switch表达式中枚举类型已经隐式的指定了case常量的枚举类型，所以case语句中不需要使用枚举类型的名称对常量进行限制。实际上，如果试图这么做的话，会造成编译时错误。

当显示枚举常量时，例如在println()语句中，会输出常量的名称。例如：

System.out.println(Apple.Winesap);

会显示名称&quot;Winesap&quot;。 
</code></pre><p><strong>12.1.2 values()和valueOf()方法</strong></p>
<pre><code>所有枚举都包含两个预定义的方法：values()和valueOf()。它们的一般形式如下所示：

public static enum-type[] values()
public static enum-type valueOf(String str)

values()方法返回一个包含枚举常量列表的数组，valueOf()方法返回与传递到参数str的字符串相对应的枚举常量。对于这两个方法enum-type是枚举类型。例如，对于前面的Apple枚举，Apple.valueOf(&quot;Winesap&quot;)的返回类型是Winesap.

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">enum Apple</div><div class="line">&#123;</div><div class="line">	Jonathan,GoldenDel,RedDel,Winesap,Cortland</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EnumDemo2</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Apple ap;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Here are all Apple constants:&quot;);</div><div class="line">		</div><div class="line">		Apple[] apples = Apple.values();</div><div class="line">		for(Apple a : apples)</div><div class="line">		&#123;</div><div class="line">			System.out.println(a);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		ap = Apple.valueOf(&quot;Winesap&quot;);</div><div class="line">		System.out.println(&quot;ap contains &quot;+ap);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
Here are all Apple constants:
Jonathan
GoldenDel
RedDel
Winesap
Cortland

ap constants Winesap
</code></pre><p><strong>12.1.3 Java 枚举是类类型</strong></p>
<pre><code>Java枚举是类类型，虽然不能使用new实例化枚举，但是枚举却有许多和其它类相同的功能。枚举定义了类，这为Java枚举提供了超乎寻常的功能。例如可以为枚举提供构造函数、添加实例变量和方法，甚至可以实现接口。

需要理解的重要一点是：每个枚举常量都是所属枚举类型的对象(故枚举不许要使用new实例化枚举，创建枚举类型时，已经实例化了枚举)。因此，如果为枚举定义了构造函数，那么当创建每个枚举常量时都会调用该构造函数。此外，对于枚举定义的实例变量，每个枚举常量都有它自己的副本。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">enum Apple</div><div class="line">&#123;</div><div class="line">	//使用下面自己定义的构造函数初始化枚举常量。</div><div class="line">	Jonathan(10),GoldenDel(9),RedDel(12),Winesap(15),Cortland(8);</div><div class="line"></div><div class="line">	private int price; //price of each apple </div><div class="line"></div><div class="line">	//Constructor</div><div class="line">	Apple(int p)&#123;price = p;&#125;</div><div class="line"></div><div class="line">	int getPrice()&#123;return price;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EnumDemo3</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Apple ap;</div><div class="line">		</div><div class="line">		//Display price of Winesap.</div><div class="line">		System.out.println(&quot;Winesap costs &quot;+Apple.Winesap.getPrice()+&quot;cents.\n&quot;);</div><div class="line">		</div><div class="line">		//Display all apples and prices.</div><div class="line">		System.out.println(&quot;All apple prices:&quot;);</div><div class="line">		for(Apple a : Apple.values())</div><div class="line">		&#123;</div><div class="line">			System.out.println(a+&quot; costs &quot;+a.getPrice()+&quot;cents.&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
Winesap costs 15 cents.

All apple prices:
Jonathan costs 10 cents.
GoldenDel costs 9 cents.
RedDel costs 12 cents.
Winesap costs 15 cents.
Cortland costs 8 cents.


尽管前面的例子只包含一个构造函数，但是枚举可以提供两种甚至更多种重载形式，就像其他类那样。例如下面版本的Apple提供了一个默认构造函数，可以将price变量初始化为-1，表明不能获得价格数据：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">enum Apple</div><div class="line">&#123;</div><div class="line">	Jonathan(10),GoldenDel(9),RedDel,Winesap(15),Cortland(8);</div><div class="line">	</div><div class="line">	private int price;</div><div class="line">	</div><div class="line">	Apple(int p)&#123;price = p;&#125;</div><div class="line">	</div><div class="line">	Apple()&#123;price = -1;&#125;</div><div class="line">	</div><div class="line">	int getPrice()&#123;return price;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意在这个版本中，没有为RedDel提供参数。这意味着会调用无参构造函数，并将RedDel的Price变量设置为-1。

枚举有两条限制：第一，枚举不能继承其他类；第二，枚举不能是超类。这意味着枚举不能扩展。在其他方面，枚举和其他类很相似。
需要记住的关机是:每个枚举常量都是定义它的类的对象。
</code></pre><p><strong>12.1.4 枚举继承自Enum类</strong></p>
<pre><code>尽管声明枚举时不能继承超类，但是所有枚举都自动继承超类java.lang.Enum,这个类定义了所有枚举都可以使用的一些方法。后面将详细介绍Enum类，这里先讨论它的3个方法。

可以获取用于指示枚举常量在常量列表中位置的值，这称为枚举常量的序列值。通过ordinal()方法可以检索序列值，该方法的声明如下所示：

finil int ordianl()

该方法返回调用常量的序列值，序列值从0开始。

可以使用compareTo()方法比较相同类型的两个枚举常量的序列值，该方法的一般形式如下：

finil int compareTo(enum-type e)

可以使用equals()方法来比较枚举常量和其它对象的相等性。
</code></pre><p><strong>12.2 类型封装器</strong></p>
<pre><code>我们已经知道，Java使用基本类型来保持语言支持的基本数据类型。处于性能考虑，为这些数据使用基本类型而不是对象。为这些数据使用对象，即使最简单的计算也会增加不可接受的开销。因此，基本类型不是对象层次的组成部分，它们不能继承Object类。

虽然基本类型提供了性能方面的好处，但是有时会需要对象这种表示形式。例如，不能通过引用为方法传递基本类型。此外，Java实现的许多标准数据结构是针对对象进行操作的，这意味着不能使用这些结构存储基本类型。为了处理这些情况，Java提供了类型封装器，用来将基本类型封装到对象中。类型封装器是类。

类型封装器包括Double、Float、Long、Interger、Short、Byte、Character以及Boolean。这些类提供了大量的方法，通过这些方法可以完全将基本类型集成到Java的对象层次中。
</code></pre><p><strong>12.2.1 Character封装器</strong></p>
<pre><code>Character是char类型的封装器。Character的构造函数为：

Character(char ch);

其中，ch指定了由即将创建的Character对象封装的字符。

为了获取Character对象中的char值，可以调用charValue()方法，如下所示：

char charValue()

该方法返回封装的字符。
</code></pre><p><strong>12.2.2 Boolean封装器</strong></p>
<pre><code>Boolean是用来封装布尔值的封装器，其中定义了以下构造函数：

Boolean(boolean boolValue)
Boolean(String boolString)

在第一个版本中,boolValue必须是true或false。在第二个版本中，如果boolString包含字符串&quot;true&quot;(大写或小写形式都可以)，那么新的Boolean对象将为true，否则将为false。

为了从Boolean对象获取布尔值，可以使用BooleanValue()方法，如下所示：

boolean booleanValue()

该方法返回与调用对象等价的布尔值。
</code></pre><p><strong>12.2.3 数值类型封装器</strong></p>
<pre><code>到目前为止，最常用的类型封装器是那些表示数值的封装器，包括Byte、Short、Integer、Long、Float以及Double。所有这些数值类型封装器都继承自抽象类Number。Number声明了以不同数字格式从对象返回数值的方法，如下所示：

byte byteValue()
short shortValue()
int intValue()
long longValue()
float floatValue()
double doubleValue()

所有数值类型封装器都定义了用于从给定数值或数值的字符串表示形式构造对象的构造函数。例如下面是为Integer定义的构造函数：

Integer(int num)
Integer(String str)

如果str没有包含有效的数值，就会抛出NumberFormatException异常。

所有类型封装器都重写了toString()方法，用来返回封装器所包含数值的人类可以阅读的形式，从而可以通过将封装器对象传递给println()方法来输出数值。例如，不必将之转换为基本类型。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Wrap</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Integer iOb = new Integer(100);</div><div class="line">		</div><div class="line">		int i = iOb.intValue();</div><div class="line">		</div><div class="line">		System.out.println(i+&quot; &quot;+iOb); //display 100  100 </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>将数值封装到对象中的过程称为装箱。因此在这个程序中，下面这行代码将数值100装箱到一个Integer对象中：

Integer iOb = new Integer(100);

从类型封装器中抽取数值的过程称为拆箱。例如，这个程序使用下面这条语句拆箱iOb中的数值：

int i = iOb.intValue();


上面程序使用的装箱和拆箱数值的一般过程，在Java原始版本中就已经提供了。但是，自JDK 5 以后，Java通过自动装箱从根本上改进了这一过程，下面对此进行介绍。
</code></pre><p><strong>12.3 自动装箱/拆箱</strong></p>
<pre><code>自JDK 5 开始，Java增加了两个重要特性：自动装箱和自动拆箱。
自动装箱：无论何时，只要需要基本类型的对象，就自动将基本类型自动封装(装箱)到与之等价的类型封装器中，而不需要显示的构造对象。
自动拆箱：当需要时自动抽泣(拆箱)以封装对象的数值的过程。不需要调用intValue()或doubleValue()这类方法。

自动装箱/拆箱特性极大的简化了一些算法的编码，移除了单调乏味的手动装箱和拆箱数值的操作。它们还有助于防止错误的发生。此外，它们对于泛型非常重要，因为泛型只能操作对象。最后，集合框架需要利用自动装箱的特性进行工作。

其实，自动装箱/拆箱类似于数据类型的隐式类型转换。基本数据类型和基本数据对象之间互相进行隐式的类型转换。

有了自动装箱特性，封装基本类型将不必在手动创建对象。只需要将数值赋值给类型封装器的引用即可，Java会自动创建对象：

Integer iOb = 100;

注意没有使用new显示的创建对象。Java会自动处理这个过程。

为了拆箱对象，可以简单的将对象引用赋值给基本类型变量。例如：

int i = iOb;

自动装箱/拆箱实例：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class AutoBox</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Integer iOb = 100;</div><div class="line">		</div><div class="line">		int i = iOb;</div><div class="line">		</div><div class="line">		System.out.println(i+&quot; &quot;+iOb); display 100  100 </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>12.3.1 自动装箱与方法</strong></p>
<pre><code>除了赋值这种简单的情况外，无论何时，如果必须将基本类型转换为对象，就会发生自动装箱；无论何时，如果对象必须转换为基本类型，就会自动拆箱。因此，当向方法传递参数或从方法返回数值时，都可能发生自动拆箱/装箱。例如，下面的程序：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class AutoBox2</div><div class="line">&#123;</div><div class="line">	static int m(Integer v)</div><div class="line">	&#123;</div><div class="line">		return v;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Integer iOb = m(100);</div><div class="line">		</div><div class="line">		System.out.println(iOb);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出: 100 

在表达式计算中也会出现自动装箱/拆箱的情况。

通常，应当限制类型封装器的使用，只有当需要基本类型的对象表示形式时才应当使用。提供的自动装箱/拆箱不是用来作为消除基本类型的&quot;后门&quot;。
</code></pre><p><strong>12.4 注解(元数据)</strong></p>
<pre><code>从JDK 5开始，Java支持在源文件中嵌入补充信息，这类信息称为注解(annotation)。注解不会改变程序的动作，因此也就不会改变程序的语义。但是在开发和部署期间，各种工具可以使用这类信息。

由于设计注解的目的主要是用于其他的开发和部署工具，故在此先不做介绍，当用到时在写着部分。
//...................................................
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之I/O以及其它主题]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8BI-O%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AE%83%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>13.1 I/O的基础知识</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在前面的实例程序中没有大量使用I/O。实际上，除了print()和println()方法之外，基本上没有使用其他的I/O方法。原因很简单：大多数实际的Java应用程序不是基与文本的控制台程序。相反，要么是面向图形的程序——这类程序依赖于Java的GUI框架(如Swing、AWT或JavaFX)来进行用户交互，要么是Web应用程序。尽管作为教学演示，基于文本的控制台程序是很优秀的，但是对于使用Java编写实际的程序，它们并不重要。此外，Java对控制台I/O的支持也是有限的，即使是简单的示例程序，使用它们也有些蹩脚。基于文本的控制台I/O对于实际的Java编程确实用处不大。</div></pre></td></tr></table></figure></p>
<p><strong>13.1.1 流</strong></p>
<pre><code>Java程序通过流执行I/O。流是一种抽象，要么产生信息，要么使用信息。流通过Java的I/O系统链接到物理设备。所有流的行为方式都是相同的，尽管与它们链接的物理设备是不同的。因此，可以为任意类型的设备应用相同的I/O类和方法。这意味着可以将许多不同类型的输入————磁盘文件、键盘或网络socket，抽象为输入流。与之对应，输出流可以引用控制台、磁盘文件或网络连接。流是输入/输出的一种清晰的方式，例如，代码中的所有部分都不需要理解键盘和网络之间的区别。流是Java在有java.io包定义的类层次中实现的。

注意：除了在java.io包中定义的基于流的I/O外，Java还提供了基于缓冲和基于通道的I/O,它们是在java.nio及其子包中定义的。
</code></pre><p><strong>13.1.2 字节流和字符流</strong></p>
<pre><code>Java定义了两种类型的流：字节流和字符流。
字节流为处理字节的输入和输出提供了方法。例如，当读取和写入二进制数据时，使用的就是字节流。
字符流为处理字符的输入和输出提供了方便的方法。它们使用Unicode编码，所以可以被国际化。此外，在某些情况下，字符流比字节流高效。

另外一点：在最底层，所有I/O仍然是面向字节的。基于字符的流只是为了处理字符提供了一种方便和高效的方法。

1.字节流

字节流是通过两个类层次定义的。在顶级是两个抽象类：InputStream和OutputStream。每个抽象类都有几个处理各种不同设备的具体子类，例如磁盘文件、网络连接甚至磁盘缓冲区。

抽象类InputStream和OutputStream定义了一些其他流类实现的一些关键方法。其中最重要的两个方法是read()和write(),这两个方法分别分别读取和写入字节数据。每个方法都有抽象形式，派生的流类必须重写这两个方法。

2.字符流类

字符流是通过两个类层次定义的。在顶层是两个抽象类：Reader和Writer。这两个抽象类处理Unicode字符流。
</code></pre><p><strong>13.1.3 预定义流</strong></p>
<pre><code>所有Java程序都自动导入java.lang包。这个包定义了System类，该类封装了运行时环境的某些方法。System还包含了3个预定义的流变量：in、out以及err.这些变量在System类中被声明为public、static以及final。这意味着程序中其他任何部分都可以使用它们，而不需要引用特定的System对象。

System.out引用标准的输出流，默认情况下是控制台。System.in引用标准的输入流，默认情况下是键盘。System.err引用标准的错误流，默认情况下也是控制台。但是，这些流可以被重定向到任何兼容的I/O设备。

System.in是InputStream类型的对象；System.out和System.err是PrintStream类型的对象。这些都是字节流，尽管他们通常用于从控制台读取字符以及向控制台写入字符。可以看出，如果愿意的话，可以在基于字符的流中封装这些流。
</code></pre><p><strong>13.2 读取控制台输入</strong></p>
<pre><code>在Java1.0中，执行控制台输入的唯一方法是使用字节流。现在仍然可以使用字节流读取控制台输入。但是，对于商业应用程序，读取控制台输入最好方法是使用面向字符的流。使用面向字符的流可以使程序更容易国际化和维护。

在Java中，控制台输入是通过从System.in读取完成的。为了获得与控制台关联的基于字符的流，可以在BufferedReader对象中封装System.in。BufferedReader支持缓冲的输入流。通常使用的构造函数如下：

BufferedReader(Reader inputReader)

其中inputReader是与即将创建的BufferedReader实例链接的字符流。而System.in是字节流，故需要先将字节流转换为字符流。Reader是抽象类，InputStreamReader是它的一个具体子类，该类将字节转换为字符。为了获得与System.in链接的InputStreamReader对象，使用下面的构造函数：

InputStreamReader(InputStream inputStream)

因为System.in引用InputStream类型的对象，所以可以用作inputStream参数。将这些内容结合起来，下面的代码创建了一个与键盘链接的BufferReader对象：

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

执行这条语句之后，br就通过System.in与控制台链接的基于字符的流。
</code></pre><p><strong>13.2.1 读取字符</strong></p>
<pre><code>int read()throws IOException

每次调用read()方法都会从输入流读取一个字符，并将之作为整形值返回。如果达到流的末尾，就返回-1；

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">	</div><div class="line">class BRRead</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args) throws IOException</div><div class="line">	&#123;</div><div class="line">		char c;</div><div class="line">		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</div><div class="line">			System.out.println(&quot;Enter characters, &apos;q&apos; to quit.&quot;);</div><div class="line">			</div><div class="line">		do</div><div class="line">		&#123;</div><div class="line">			c = (char)br.read();</div><div class="line">			System.out.println(c);</div><div class="line">		&#125;while(c != &apos;q&apos;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>下面是一次示例运行：
Enter characters, &apos;q&apos; to quit.
123abcq
1
2
3 
a 
b 
c 
q 

System.in是按行缓冲的。这意味着在按下Enter之前，实际上没有输入被传递到程序。
</code></pre><p><strong>13.2.2 读取字符</strong></p>
<pre><code>从键盘中读取字符串可以使用BufferReader类的readLine()方法，该方法的一般形式如下所示;

String readLine() throws IOException

可以看出该方法返回一个String字符串。

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import java.io;</div><div class="line">	</div><div class="line">class BRReadLines</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args) throws IOException</div><div class="line">	&#123;</div><div class="line">		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</div><div class="line">			</div><div class="line">		String str;</div><div class="line">		System.out.println(&quot;Enter lines of text.&quot;);</div><div class="line">		System.out.println(&quot;Enter &apos;stop&apos; to quit.&quot;);</div><div class="line">			</div><div class="line">		do</div><div class="line">		&#123;</div><div class="line">			str = br.readLine();</div><div class="line">			System.out.println(str);</div><div class="line">		&#125;while(! str.equals(&quot;stop&quot;));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>13.3 向控制台写输出</strong></p>
<pre><code>在前面提到过，使用print()和println()是向控制台写输出的最容易的方式。这个方法是有PrintStream类(也就是System.out引用的对象的类型)定义的。System.out
</code></pre><p>尽管是字节流，但是对于简单的程序仍然何以使用。</p>
<pre><code>因为PrintStream是派生自OutputStream的输出流，所以还实现了低级的write()方法。因此，可以使用write()向控制台输出。

void write(int byteval);

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class WriteDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int b;</div><div class="line">		b = &apos;A&apos;;</div><div class="line">		System.out.write(b);</div><div class="line">		System.out.write(&apos;\n&apos;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>通常不会使用write()执行控制台输出(尽管在某些情况下这么做是有用的)，因为print()和println()确实更容易使用。
</code></pre><p><strong>13.4 PrintWriter类</strong></p>
<pre><code>尽管使用System.out向控制台输出可以接受，但是最好将其用于调试或者用于实例程序。对于实际的程序，使用Java向控制台输出的推荐方法是通过PrintWriter流。
</code></pre><p>PrintWriter是基于字符的流，为控制台输出使用基于字符的流，可以使程序国际化更容易。</p>
<pre><code>PrintWriter类定义了几个构造函数，在此使用的构造函数如下所示：

Printwrite(OutputStream outputStream,boolean flushingOn)

其中，flushingOn控制Java是否在每次调用println()方法时刷新输出流。如果flushingOn为true,就自动刷新；如果为false，那么不会自动刷新;

PrintWriter类支持print()和println()方法，因此，可以使用与System.out相同的方式使用它们。如果参数不是简单类型，PrintWriter的方法会调用对象的toString()方法，然后输出。例如，下面这行代码是创建一个连接到控制台输出的PrintWriter；

PrintWriter pw = new PrintWriter(System.out,true);

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import.java.io.*;</div><div class="line">	</div><div class="line">class PrintWriterDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		PrintWriter pw = new PrintWriter(System.out,true);</div><div class="line">			</div><div class="line">		pw.println(&quot;This is a string&quot;);</div><div class="line">		int i = -7;</div><div class="line">		pw.println(i);</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出如下：
This is a string 
-7
</code></pre><p><strong>13.5 读/写文件</strong></p>
<pre><code>对于读/写文件，两个最常用的流类是FileInputStreamReader和FileOutputStream，这两个创建与文件链接的字节流。为了打开文件，只需要简单的这些类中某个类的对象，指定文件名作为构造函数的参数即可。尽管两个类也支持其他构造函数，但在此将使用一下方式：

FileInputStream(String fileName) throws FileNotFoundException
FileOutputStream(String fileName) throws FileNotFoundException

其中，fileName指定希望打开的文件名。当创建输入流时，如果文件不存在，就会抛出FileNotFoundException异常。对于输出流，如果不能打开文件或不能创建文件，也会抛出FileNotFoundException异常。FileNotFoundException是IOException的子类。当打开输出文件时，先前存在的同名文件将被销毁。

文件使用完成之后必须关闭文件。关闭文件是通过close()方法完成的，FileInputStream和FileOutputStream都实现了该方法。该方法的声明如下：

void close() throws IOException

关闭文件会释放为文件分配的系统资源，从而允许其他文件使用这些资源。关闭文件失败会导致&quot;内层泄露&quot;，因为未使用的资源没有被释放。

注意：从JDK 7开始，close()方法是由java.lang包中的AutoCloseable接口指定的。java.io包中的Closeable接口继承了AutoCloseable接口，所有流类都实现了这两个接口，包括FileInputStream和FileOutputStream。

可以使用两种方式关闭文件：
第一种是传统方法，当在不需要文件时显示调用close()方法。这是JDK 7之前所有Java版本使用的方式，所以在所有遗留代码中可以看到这种方式。
第二种是使用带资源的try语句，这种try语句是由JDK 7新增的，当不在需要文件时自动关闭文件。在这种方式写没有显示调用close()方法。因为JDK 7以后close()函数由AutoCloseable接口指定。故可以隐身自动关闭文件。

下面先介绍关闭文件的传统方式，后面介绍带资源的try语句。

为了读取文件，可以使用在FileInputStreamReader中定义的read()版本。

int read() throws IOException

每次调用read()方法时，都会从文件读取一个字节，并作为整型值返回。当到达文件末尾时，read()方法返回-1.

下面的程序使用read()方法读取和显示文件的内容，该文件包含ASCII文本。文件名是作为命令行参数指定的。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line"></div><div class="line">class ShowFile</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		FileInputStream fin;</div><div class="line">		</div><div class="line">		if(args.length != 1)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Usage: ShowFile fileName&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//打开文件</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			fin = new FileInputStream(args[0]);</div><div class="line">		&#125;</div><div class="line">		catch(FileNotFoundException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Cannot Open File.&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//访问文件</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			do</div><div class="line">			&#123;</div><div class="line">				i = fin.read();</div><div class="line">				if(i != -1) System.out.print((char)i);</div><div class="line">			&#125;while(i != -1);</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Error reading file.&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//关闭文件 </div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			fin.close();</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Error Closing File.&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>尽管前面的例子中在读取文件后关闭了文件流，但是另个种处理方式通常很有用，就是在finally代码块中调用close()方法。在这种方式下，访问文件的所有方法都被包含在try代码块中，并使用finally代码块关闭文件。对于这种方式，不管try代码块是如何终止的，文件都会被关闭。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">&#123;</div><div class="line">	do</div><div class="line">	&#123;</div><div class="line">		i = fin.read();</div><div class="line">		if(i != -1) System.out.print(i);</div><div class="line">	&#125;while(i != -1);</div><div class="line">&#125;</div><div class="line">catch(IOException e)</div><div class="line">&#123;</div><div class="line">	System.out.println(&quot;Error Reading File.&quot;);</div><div class="line">&#125;</div><div class="line">finally</div><div class="line">&#123;</div><div class="line">	try</div><div class="line">	&#123;</div><div class="line">		fin.close();</div><div class="line">	&#125;</div><div class="line">	catch(IOException e)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Error Closing File.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>尽管这么做对于这个例子没有什么问题，但一般来说，这种方式的一个优点是：即使访问文件的代码因为与I/O无关的异常而终止，finally代码块也仍然会关闭文件。

有时在单个try代码块中(而不是独立的两个代码块)中封装打开文件和访问文件的代码，然后使用finally代码块关闭文件更容易一些。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line"></div><div class="line">class ShowFile</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		FileInputStream fin = null;</div><div class="line">		</div><div class="line">		if(args.length != 1)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Usage: ShowFile fileName&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			fin = new FileInputStream(args[0]);</div><div class="line">			</div><div class="line">			do</div><div class="line">			&#123;</div><div class="line">				i = fin.read();</div><div class="line">				if(i != -1) System.out.println((char) i);</div><div class="line">			&#125;while(i != -1);</div><div class="line">		&#125;</div><div class="line">		catch(FileNotFoundException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;File Not Found.&quot;);</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;An I/O Error Occurred&quot;);</div><div class="line">		&#125;</div><div class="line">		finally</div><div class="line">		&#123;</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				if(fin != null) fin.close();</div><div class="line">			&#125;</div><div class="line">			catch(IOException e)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Error Closing File&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>对于前面的例子，还可以更紧凑的使用try/catch语句。因为FileNotFoundException是IOException的子类，所以这种异常不需要单独捕获。例如，下面的语句进行了重新编写以消除捕获FileNotFoundException异常，在这种情况下，会显示错误的标准异常消息。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">&#123;</div><div class="line">	fin = new FileInputStream(args[0]);</div><div class="line">	</div><div class="line">	do</div><div class="line">	&#123;</div><div class="line">		i = fin.read();</div><div class="line">		if(i != -1) System.out.println((char) i);</div><div class="line">	&#125;while(i != -1);</div><div class="line">&#125;</div><div class="line">catch(IOException e)</div><div class="line">&#123;</div><div class="line">	System.out.println(&quot;I/O Error: &quot;+e);</div><div class="line">&#125;</div><div class="line">finally</div><div class="line">&#123;</div><div class="line">	try</div><div class="line">	&#123;</div><div class="line">		if(fin != null) fin.close();</div><div class="line">	&#125;</div><div class="line">	catch(IOException e)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Error Closing File&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>为了向文件中写入内容，可以使用FileOutputStream定义的write()方法，该方法最简单的形式如下：

void write(int byteval) throws IOException

例如，使用write()方法复制文件：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line"></div><div class="line">class CopyFile</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		FileInputStream fin;</div><div class="line">		FileOutputStream fout;</div><div class="line">		</div><div class="line">		if(args.length != 2)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Usage: CopyFile from to&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		try</div><div class="line">		&#123;</div><div class="line">			fin = new FileInputStream(args[0]);</div><div class="line">			fout = new FileOutputStream(args[1]);</div><div class="line">			</div><div class="line">			do</div><div class="line">			&#123;</div><div class="line">				i = fin.read();</div><div class="line">				if(i != -1) fout.write(i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;I/O Error: &quot;+e);</div><div class="line">		&#125;</div><div class="line">		finally</div><div class="line">		&#123;</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				if(fin != null) fin.close();</div><div class="line">			&#125;</div><div class="line">			catch(IOException e2)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Error Closing Input File&quot;);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			try</div><div class="line">			&#123;</div><div class="line">				if(fout != null) fout.close();</div><div class="line">			&#125;</div><div class="line">			catch(IOException e2)</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;Error Closing Output File&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>13.6 自动关闭文件</strong></p>
<pre><code>在前面，一旦不在需要文件，示例程序就显示调用close()方法以关闭文件。这是JDK 7以前的Java版本使用的关闭文件方式。JDK 7之后增加了一个新特性，该特性提供了另外一种资源管理(例如文件流)的方式，这种方式能自动关闭文件。这个特性有时被称为自动资源管理，该特性以try语句的扩展板为基础。自动资源管理的主要优点是：当不在需要文件(或其他资源)时，可以防止无意中释放它们。

自动资源管理基于try语句的扩展形式，它的一般形式如下所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try(resource-specification)</div><div class="line">&#123;</div><div class="line">	//use the resource</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>其中，resource-specification是用来声明和初始化资源(例如文件流)的语句。该语句包含一个变量声明，在该变量声明中使用将被管理的对象引用初始化变量。当try语句块结束时，自动释放资源。
当然，这种形式的try语句也可以包含catch和finally子句。新形式的try语句被称为带资源的try语句。

对于那些实现了AutoCloseable接口的资源，才能使用带资源的try语句。AutoCloseable接口由java.lang包定义，该接口定义了close()方法。java.io包中的Closable接口继承自AutoCloseable接口。所有流类都实现了这两个接口。因此，当使用流时————包括文件流，可以使用带资源的try语句。

下面是ShoeFile程序的改写版，该版本使用自动文件关闭功能：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line"></div><div class="line">class ShowFile</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		</div><div class="line">		if(args.length != 1)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Usage: ShowFile fileName&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		try(FileInputStream fin = new FileInputStream(args[0]))</div><div class="line">		&#123;</div><div class="line">			do</div><div class="line">			&#123;</div><div class="line">				i = fin.read();</div><div class="line">				if(i != -1) System.out.println((char) i);</div><div class="line">			&#125;while(i != -1);</div><div class="line">		&#125;</div><div class="line">		catch(FileNotFoundException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;File Not Found.&quot;);</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;An I/O Error Occurred&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>在这个程序中，请特别注意在try语句中打开文件的方式：

try(FileInputStream fin = new FileInputStream(args[0])){}

注意try语句的资源约定部分声明了一个FileImputStream类型的变量fin,然后将由FileInputStream类构造函数打开的文件的引用赋值给该变量。因此，该程序的这个版本中，变量fin局限于try代码块，当进入try代码块时创建。当离开代码块时，会隐式的调用close()方法以关闭与fin关联的流。不需要显示的调用close()方法，这意味着不可能忘记关闭文件。这是使用带资源的try语句的关键好处。

try语句中声明的资源被隐式声明为final，理解这一点很重要。这意味着在创建资源变量后，不能将其他资源赋值给该变量。此外，资源的作用域局限于带资源的try语句。

可以在一条try语句中管理多个资源。为此，只需要简单的使用分号分隔每个资源约定即可。下面的程序显示了一个例子。该程序对前面显示的CopyFile进行了改写：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line"></div><div class="line">class CopyFile</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int i;</div><div class="line">		</div><div class="line">		if(args.length != 2)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;Usage: CopyFile from to&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		try(FileInputStream fin = new FileInputStream(args[0]);</div><div class="line">			FileOutputStream fout = new FileOutputStream(args[1]))</div><div class="line">		&#123;		</div><div class="line">			do</div><div class="line">			&#123;</div><div class="line">				i = fin.read();</div><div class="line">				if(i != -1) fout.write(i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch(IOException e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;I/O Error: &quot;+e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>13.7 applet的基础知识</strong></p>
<pre><code>applet好像已经过时了，这里先不写了。
</code></pre><p><strong>13.9 使用instanceof运算符</strong></p>
<pre><code>运算符instanceof德尔一般形式如下所示；

objref instanceof type

其中,objref是对类实例的引用，type是类类型。如果objref是指定的类型或者可以可以被转化为这种指定类型，那么instanceof运算符的求值结果为true;否则为false。
</code></pre><p><strong>13.11 本地方法</strong></p>
<pre><code>偶尔可能希望调用使用非Java语言编写的子例程，尽管这种情况很少见。典型的，这类子例程是作为可以执行的代码(对于正在使用的CPU和环境而言是可执行的代码，即本地代码)而存在的。但是，因为Java程序被编译为字节码，然后由Java运行时系统解释执行(或及时编译),所以看起来不可能从Java程序中调用本地代码子例程。幸运的是，这个结论是错误的。Java提供了native关键字，用于声明本地代码方法。一旦方法使用native进行声明，就可以从Java程序内部调用这些方法，就像调用其他Java方法一样。

为了声明本地方法，在方法声明前使用native修饰符，但不能为方法定义任何方法体。例如：

public native int meth();

在声明了本地方法后，必须编写本地方法，并且需要遵循复杂的步骤序列，将本地方法和Java代码链接起来。

大多数本地代码都是使用C语言编写的。将C代码集成到Java程序中的机制称为Java本地接口(Java Native Interface,JNI)。对于JNI的详细描述超出了本书的范围，不过下面提供的信息对于简单应用程序来说是足够的。

注意：需要遵循的准确步骤根据不同的Java环境可能有所不同，它们还依赖于实现本地代码的语言。后续讨论假定使用Windows环境，使用C语言实现本地代码。另外，这里介绍的方法使用动态链接库，但是从JDK 8开始，也可以创建静态链接库。

要理解这个过程，最容易的方法是通过一个例子。首先，输入下面的简短程序，该程序使用了本地方法test():
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class NativeDemo</div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		NativeDemo ob = new NativeDemo();</div><div class="line">		</div><div class="line">		ob.i = 10;</div><div class="line">		System.out.println(&quot;This is ob.i before the native method: &quot;+ob.i);</div><div class="line">		</div><div class="line">		ob.test();</div><div class="line">		System.out.println(&quot;This is ob.i after the native method: &quot;+ob.i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//declare native method</div><div class="line">	public native void test();</div><div class="line">	</div><div class="line">	//load DLL that contains static method </div><div class="line">	//只有加载进动态链接库DLL(NativeDemo.dll)，才能调用本地方法，因为，本地方法打包在了动态链接库中</div><div class="line">	static</div><div class="line">	&#123;</div><div class="line">		//加载动态链接库NativeDemo.dll,注意加载链接库时不需要写后缀名.dll </div><div class="line">		System.loadLibrary(&quot;NativeDemo&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意test()方法被声明为native并且没有方法体。稍后将使用C语言实现这个方法。还请注意static代码块。在前面已经解释过，static代码块只执行一次，当程序开始时执行(或更精确的说，当第一次加载它的类时执行)。这个例子中，static代码块用于加载包含test()本地实现的动态链接库。

动态链接库是由loadLibrary()方法加载的，该方法是System类的一部分，它的一般形式如下所示：

static void loadLibrary(String filename)

其中，filename是标识库文件名的字符串。对于Windows环境，假定库文件具有.DLL扩展名。

输入程序代码后，编译代码，生成NativeDemo.class。接下来便是生成动态链接库NativeDemo.DLL。步骤如下：

(1)必须使用javah.exe(javah.exe包含于JDK中)生成文件NativeDemo.h。

  在test()方法实现中将包含此头文件NativeDemo.h。

  为了生成NativeDemo.h的头文件，使用下面的命令：

  javah -jni NativeDemo

  这个命令将生成文件名为NativeDemo.h的头文件。在实现test()方法的C文件中必须包含这个头文件。这个命令生成的输出如下所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class="line">#include &lt;jni.h&gt;</div><div class="line">/* Header for class NativeDemo */</div><div class="line"></div><div class="line">#ifndef _Included_NativeDemo</div><div class="line">#define _Included_NativeDemo</div><div class="line">#ifdef __cplusplus</div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#endif</div><div class="line">/*</div><div class="line">* Class:     NativeDemo</div><div class="line">* Method:    test</div><div class="line">* Signature: ()V</div><div class="line">*/</div><div class="line">JNIEXPORT void JNICALL Java_NativeDemo_test</div><div class="line">(JNIEnv *, jobject);</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line">#endif</div></pre></td></tr></table></figure>
<pre><code>请特别注意下面的代码，它定义了将要创建test()函数的原型：

JNIEXPORT void JNICALL Java_NativeDemo_test(JNIEnv *, jobject);

注意函数的名称是Java_NativeDemo_test(),必须使用它作为要实现的本地函数的名称。也就是说，不是创建名为test()的C函数，而是创建名为Java_NativeDemo_test()的函数。NativeDemo部分是添加的前缀，因为test()方法是作为NativeDemo类的一部分定义的。记住，另外一个类也可能定义属于自己的test()本地方法，这和NativeDemo声明的test()本地方法完全不同。通过在前缀中包含类名，可以提供一种区分不同版本的手段。作为一般规则，为本地函数提供的名称将包含声明它们的类的名称。

在生成必要的头文件之后，可以编写test()方法的实现代码，并将它们保存在NativeDemo.c文件中：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#&lt;jin.h&gt;  </div><div class="line">#include &quot;NativeDemo.h&quot;</div><div class="line">#include&lt;studio.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">JNIEXPORT void JNICALL Java_NativeDemo_test(JNIEnv *env, jobject obj)</div><div class="line">&#123;</div><div class="line">	jclass cls;</div><div class="line">	jfieldId fid;</div><div class="line">	jint i;</div><div class="line"></div><div class="line">	printf(&quot;Starting the native method.\n&quot;);</div><div class="line">	cls = (*env)-&gt;GetObjectClass(env,obj);</div><div class="line">	fid = (*env)-&gt;GetFieldID(env,cls,&quot;i&quot;,&quot;I&quot;);</div><div class="line"></div><div class="line">	if(fid == 0)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;Could not get field id.\n&quot;);</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	i = (*env)-&gt;GetIntField(env,obj,fid);</div><div class="line">	printf(&quot;i = %d\n&quot;,i);</div><div class="line">	(*env)-&gt;SetIntField(env,obj,fid,2*i);</div><div class="line">	printf(&quot;Ending the native method.\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意这个文件包含了jni.h头文件，该头文件包含接口信息。这个头文件是由Java编译器提供的。头文件NativeDemo.h之前有Javah创建。

在这个函数中，GetObjectClass()方法用于获取一个包含有关NativeDemo类信息的C结构。GetFieldID()方法返回一个C结构，该结构包含于类名为&quot;i&quot;的域变量有关的信息。GetIntField()方法该域变量的初始值，SetIntField()方法在该域变量中保存一个更新后的值(用于处理其他类型数据的其他方法请查看jni.h头文件)。

在创建了NativeDemo.c文件后，必须进行编译并创建DLL。要通过Microsoft C/C++编译器完成该工作，需要使用下面的命令行(可能需要指定jni.h以及其次级文件jin_md.h的路径)：

CI /LD NativeDemo.c 

这会生成文件NativeDemo.dll。一旦该工作完成，就可以执行Java程序了，生成的输出如下：


This is ob.i before the native method: 10 
Starting the native method.
i = 10 
Ending the native method.
This is ob.i after the native method: 20.

为什么要创建动态链接库的原因：因为Java代码中执行本地函数meth()需要向动态链接库中查找函数，而不是在NativeDemo.c文件中查找函数。类似于Java调用函数，需要向类的.class文件中查找函数，引入第三方库也是类似，调用的函数需要向第三方库中查找，而不是向源代码中查找。

本地方法存在的问题：
(1)潜在的安全性风险：因为本地方法执行的实际的机器代码，所有可以访问宿主系统的所有部分。也就是说，本地代码可以离开Java执行环境。
(2)可移植性丢失：本地代码因为包含在DLL中，所以必须存在于执行Java程序的机器上。而且，本地方法依赖于CPU和操作系统，所以DLL本身是不可移植的。
   因此，使用本地方法的Java程序只能运行于已经安装了兼容DLL的机器上。

 因此，应当限制使用本地代码，因为它们会使Java程序不可移植，并且会造成严重的安全性风险。
</code></pre><p><strong>13.12 使用assert</strong></p>
<pre><code>assert关键字有两种形式。第一种形式如下所示：

assert condition;

其中，condition是一个求值结果必须为布尔类型的表达式。如果结果为true，那么断言为真，不会发生其他动作。如果条件为false,那么断言失败并抛出默认的AssertionError对象。

assert关键字的第二种形式如下所示：

assert condition: expr;

在这个版本中，expr是传递给AssertionError构造函数的值。这个值被转换成响应的字符串格式，并且如果断言失败，将会显示该字符串。
</code></pre><p><strong>13.14 通过this()调用重载的构造函数</strong></p>
<pre><code>当使用重载的构造函数时，在一个构造函数中调用另一个构造函数有时是有用的。在Java中，这是通过使用this关键字的另外一种形式完成的，它的一般形式如下所示

this(arg-list)

当执行this()时，首先执行与arg-list标识的参数列表相匹配的构造函数。然后，如果在原始构造函数中还有其他语句时，就执行这些语句。在构造函数中，对this()的调用必须是第一条语句。

例如：下面没有使用this()的类。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">class MyClass</div><div class="line">&#123;</div><div class="line">	int a;</div><div class="line">	int b;</div><div class="line">	</div><div class="line">	MyClass(int i,int j)</div><div class="line">	&#123;</div><div class="line">		a = i;</div><div class="line">		b = j;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	MyClass(int i)</div><div class="line">	&#123;</div><div class="line">		a = i;</div><div class="line">		b = i;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	MyClass()</div><div class="line">	&#123;</div><div class="line">		a = 0;</div><div class="line">		b = 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">使用this()的类，如下所示：</div><div class="line"></div><div class="line">class MyClass</div><div class="line">&#123;</div><div class="line">	int a;</div><div class="line">	int b;</div><div class="line">	</div><div class="line">	MyClass(int i,int j)</div><div class="line">	&#123;</div><div class="line">		a = i;</div><div class="line">		b = j;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	MyClass(int i)</div><div class="line">	&#123;</div><div class="line">		this(i,i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	MyClass()</div><div class="line">	&#123;</div><div class="line">		this(0,0);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>使用this()需要牢记两条限制。
首先，在调用this()this时不能使用当前类的任何实例变量。
其次，在同一个构造函数中不能同时使用supper()和this(),因为它们都必须是构造函数中的第一条语句。

注意：this()最适合用于包含大量初始化代码的构造函数，而不适合用于那些只简单设置少了域变量值的构造函数。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之lambda表达式]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>15.1 lambda表达式简介</strong></p>
<pre><code>对于理解lambda表达式的Java实现，有两个结果十分关键。第一个就是lambda表达式自身，第二个是函数式接口。

lambda表达式本质上就是一个匿名(即未命名的方法)。但是这个方法不能独立执行的，而是用于实现由函
数式接口定义的一个方法。因此，lambda表达式会导致产生一个匿名类。lambda表达式也常被称为闭包。

函数式接口是仅包含一个抽象方法的接口。一般来说，这个方法指明了接口的目标用途。因此，函数式接口通常表示单个动作。例如，标准接口Runnable是一个函数式接口，因为它只定义了一个方法run().因此，run()定义了Runnable的动作。此外，函数式接口定义了lambda表达式的目标类型。特别注意：lambda表达式只能用于其目标类型已经被指定的上下文中。另外，函数式接口有时候被称为SAM类型，意思是单抽象方法(Single Abstract Method)。 

注意：
函数式接口可以定义Object定义的任何公有方法，例如equals()，而不影响其作为&quot;函数式接口&quot;的状态。Object的公有方法被视为函数式接口的隐式成员，因为函数式接口的实例会默认自动实现它们。
</code></pre><p><strong>15.1.1 lambda表达式的基础知识</strong></p>
<pre><code>lambda表达式在Java语言中引入了一个新的语法元素和操作符。这个操作符是-&gt;,有时候被称为lambda操作符或箭头操作符。它将lambda表达式分成两部分。左侧指定了lambda表达式所需要的所有参数(如果不需要参数，则使用空的参数列表)。右侧指定了lambda体，即lambda表达式要执行的动作。在用语言描述时，可以把-&gt;表达成&quot;成了&quot;或&quot;进入&quot;。

Java定义了两种lambda体。第一种包含单独一个表达式，另一种包含一个代码块。

(1)lambda体包含单独一个表达式

首先，看一个最简单的lambda表达式。它的计算结果是一个常量值，如下所示：

()-&gt;123.45

这个lambda表达式没有形参，所以参数列表为空。它返回常量值123.45.因此，这个表达式的作用类似于下面的方法：

double myMeth(){return 123.45;}

当然，lambda表达式定义的方法没有名称。

下面给出一个更有意思的表达式：

()-&gt;Math.random()*100

这个lambda表达式使用Math.random()获得一个随机数，将其乘以100，然后返回结果。这个lambda表达式也不需要参数。

当lambda表达式需要参数时，需要在操作符左侧的参数列表中加以指定。下面是一个简单的例子：

(n)-&gt;(n%2)==0

如果参数n的值是偶数，这个lambda表达式会返回true。尽管可以显示指定参数的类型，例如本例中的n，但是通常不需要这么做，因为很多时候，参数的类型是可以推断出来的。与命名方法一样，lambda表达式可以指定需要用到的任意参数的数量。
</code></pre><p><strong>15.1.2 函数式接口</strong> </p>
<pre><code>函数式接口是指仅定义了一个抽象方法的接口。从JDK8开始，可以为接口声明的方法指定默认行为，即所谓的默认方法。如今，只有当没有指定默认方法实现时，接口方法才是抽象方法。因为没有指定默认实现的接口方法隐式的是抽象方法，所以没有必要使用abstract修饰符(如果愿意的话，也可以指定该修饰符)。

下面是函数式接口的例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface MyNumber</div><div class="line">&#123;</div><div class="line">	double getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>在本例中，getValue()方法隐式的是抽象方法，并且是MyNumber定义的唯一方法。因此，MyNumber是一个函数式接口，其功能由getValue()定义。

如前所述，lambda表达式不是独立执行的，而是构成了一个函数式接口定义的抽象方法的实现，该函数式接口定义了它的目标类型。结果，只有在定义了lambda表达式的目标类型的上下文中，才能使用该表达式。当把一个lambda表达式赋给一个函数式接口的引用时，就创建了这样的上下文。

下面通过一个例子来说明如何在参数上下文中使用lambda表达式。首先，声明对函数式接口MyNumber的一个引用：

MyNumber myNum;

接下来，将一个lambda表达式赋值给该接口引用：

myNum = ()-&gt;123.45

当目标类型上下文中出现lambda表达式时，就会自动创建实现了函数式接口的一个类的实例(类似于匿名类)，函数式接口声明的抽象方法的行为由lambda表达式定义。当通过目标调用该方法时，就会执行lambda表达式。因此，lambda表达式成了getValue()方法的实现。因此，下面的代码将显示123.45：

System.out.println(myNum.getValue());

因为赋给myNum的lambda表达式返回值123.45，所以调用getValue()方法时返回的值也是123.45。

为了在目标类型上下文中使用lambda表达式，抽象方法的类型和lambda表达式的类型必须兼容。例如，如果抽象方法指定了两个int类型的参数，那么lambda表达式也必须执行两个参数，其类型要么被显示指定为int类型，要么在上下文中可以被隐式的推断为int类型。总的来说，lambda表达式的参数的类型和数量必须与方法的参数兼容；返回类型必须兼容；并且lambda表达式可能抛出的异常必须能被方法接受。
</code></pre><p><strong>15.1.3 几个lambda表达式示例</strong></p>
<pre><code>(1)
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//函数式接口 </div><div class="line">interface MyNumber</div><div class="line">&#123;</div><div class="line">	double getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class lambdaDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		MyNumber myNum;</div><div class="line">		</div><div class="line">		myNum = ()-&gt;123.45;</div><div class="line">		System.out.println(&quot;A fixed value: &quot;+myNum.getValue());</div><div class="line">		</div><div class="line">		myNum = ()-&gt;Math.random()*100;</div><div class="line">		System.out.println(&quot;A random value: &quot;+myNum.getValue());</div><div class="line">		</div><div class="line">		//lambda表达式的返回值类型与函数式接口中抽象函数的类型不匹配。</div><div class="line">	//	myNum = ()-&gt;&quot;123.03&quot;	//error! </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>(2)带参数的lambda表达式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">interface NumericTest</div><div class="line">&#123;</div><div class="line">	boolean test(int n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class lambdaDemo2</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		NumericTest isEven = (n)-&gt;(n%2)==0;</div><div class="line">		if(isEven.test(10)) System.out.println(&quot;10 is even&quot;);</div><div class="line">		if(!isEven.test(9)) System.out.println(&quot;9 is not even&quot;);</div><div class="line">		</div><div class="line">		NumericTest isNonNeg = (n)-&gt; n&gt;=0;</div><div class="line">		if(isNonNeg.test(1)) System.out.println(&quot;1 is non-negative&quot;);</div><div class="line">		if(!isNonNeg.test(-1)) System.out.println(&quot;-1 is negative&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>测试奇偶性的lambda表达式，如下所示：

NumericTest isEven = (n)-&gt;(n%2)==0;

注意，这里没有指定n的类型。相反，n的类型是从上下文中推断出来的。本例中，其类型是从NumericTest接口定义的test()方法的参数类型推断出来的，而该参数的类型是Int。在lambda表达式中，也可以显示指定参数的类型。例如，下面的写法也是合法的：

NumericTest isEven = (int n)-&gt;(n%2)==0;

如果lambda表达式只有一个参数，在操作符的左侧指定该参数时，没有必要使用括号扩住该参数的名称。例如下面的下法也是合法的：

NumericTest isEven = n-&gt;(n%2)==0;

(3)接受两个参数的lambda表达式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">interface NumericTest2</div><div class="line">&#123;</div><div class="line">	boolean test(int n,int d);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class lambdaDemo3</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		//测试一个数字是否是另一个数字的因子。</div><div class="line">		NumericTest2 isFactor = (n,d) -&gt; (n%d)==0;</div><div class="line">		</div><div class="line">		if(isFactor.test(10,2)) System.out.println(&quot;2 is a factor of 10&quot;);</div><div class="line">		if(!isFactor.test(10,3)) System.out.println(&quot;3 is not a factor of 10&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意指定这种lambda表达式的方法：

NumericTest2 isFactor = (n,d) -&gt; (n%d)==0;

两个参数n和d在参数列表中指定，并使用逗号分隔开。可以把这个例子推而广之。每当需要一个以上的参数时，就在lambda操作符的左侧，使用一个带括号的参数列表指定参数，参数之间使用逗号分隔开。

对于lambda表达式中的多个参数，有一点十分重要：如果需要显示的声明一个参数的类型，那么必须为所有的参数声明类型。例如下面的代码是合法的：

NumericTest2 isFactor = (int n,int d) -&gt; (n%d)==0;

但下面的不合法：

NumericTest2 isFactor = (int n,d) -&gt; (n%d)==0;
</code></pre><p><strong>15.2 块lambda表达式</strong></p>
<pre><code>前面例子中显示的lambda体只包含单个表达式。这种类型的lambda体被称为表达式体，具有表达式体的lambda表达式有时被称为表达式lambda。在表达式体重，操作符右侧的代码必须包含单独一个表达式。尽管表达式lambda十分有用，但是有时候会要求使用一个以上的表达式。为了处理这种情况，Java支持另外一种类型的lambda表达式，其中操作符右侧的代码可以由一个代码块构成，其中可以包含多条语句。这种类型的lambda体被称为块体。具有块体的lambda表达式有时候被称为块lambda。

块lambda表达式扩展了lambda表达式内部可以处理的操作类型，因为它允许lambda体包含多条语句。例如，在lambda块中，可以声明变量、使用循环、指定if和switch语句、创建嵌套代码块等。创建块lambda很容易，只需要使用花括号包围lambda体，就像创建其他语句一样。

除了允许多条语句，块lambda的使用方法与刚才讨论过的表达式lambda十分类似。但是，也有一个重要区别：在块lambda中必须显示使用return语句来返回值。必须这么做，因为块lambda体代表的不是一个单独的表达式。

下面的例子是使用块lambda来计算并返回一个int类型值的阶乘：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">interface NumericFunc</div><div class="line">&#123;</div><div class="line">	inf func(int n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class BlockLambdaDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		NumericFunc factorial = (n)-&gt;</div><div class="line">		&#123;</div><div class="line">			int result = 1;</div><div class="line">			</div><div class="line">			for(int i=1; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				result = i*result;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return result;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		System.out.println(&quot;The factorial of 3 is &quot;+factorial.func(3));</div><div class="line">		System.out.println(&quot;The factorial of 5 is &quot;+factorial.func(5));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>注意：
当lambda表达式中出现return语句时，只是从lambda体返回，而不会导致包围lambda体的方法返回。
</code></pre><p><strong>15.3 泛型函数式接口</strong></p>
<pre><code>lambda表达式自身不能指定类型参数。因此，lambda表达式不能是泛型(当然，由于存在类型推断，所有lambda表达式都展现出了一些类似于泛型的特征)。然而，与lambda表达式关联的函数式接口可以泛型。此时，lambda表达式的目标类型部分由声明函数式接口引用时指定的参数类型决定。

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">interface SomeFunc&lt;T&gt;</div><div class="line">&#123;</div><div class="line">	T func(T t);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class GenericFunctionalInterfaceDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		SomeFunc&lt;String&gt; reverse = (str)-&gt;</div><div class="line">		&#123;</div><div class="line">			int i;</div><div class="line">			String result = &quot;&quot;;</div><div class="line">			</div><div class="line">			for(i = str.length()-1; i&gt;=0; i--)</div><div class="line">			&#123;</div><div class="line">				result += str.charAt(i);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return result;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		System.out.println(&quot;lambda reserved is &quot;+reverse.func(&quot;lambda&quot;));</div><div class="line">		</div><div class="line">		SomeFunc&lt;Integer&gt; factorial = (n)-&gt;</div><div class="line">		&#123;</div><div class="line">			int result = 1;</div><div class="line">			</div><div class="line">			for(int i=1; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				result = result*i;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return result;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		System.out.println(&quot;The factorial of 3 is &quot;+factorial.func(3));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
lambda reserved is adbmal
The factorial of 3 is 6

其中，T指定了func()函数的返回类型和参数类型。这意味着它与任何接收一个参数，并返回一个相同类型的值的lambda表达式兼容。

SomeFunc接口用于提供对两种不同类型的lambda表达式的引用。第一种表达式使用String类型，第二种表达式使用Integer类型。因此，同一个函数式接口可以用于reserve lambda表达式和factorial lambda表达式。区别仅在于传递给SomeFunc的参数类型。
</code></pre><p><strong>15.4 作为参数传递lambda表达式</strong></p>
<pre><code>为了将lambda表达式作为参数传递，接收lambda表达式的参数的类型必须是与该lambda表达式兼容的函数式接口的类型。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">//Use lambda expressions as an argument to method</div><div class="line"></div><div class="line">interface StringFunc</div><div class="line">&#123;</div><div class="line">	String func(String n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class lambdasAsArgumentsDemo</div><div class="line">&#123;</div><div class="line">	static String stringOp(StringFunc sf,String s)</div><div class="line">	&#123;</div><div class="line">		return sf.func(s);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		String inStr = &quot;lambda add power to java&quot;;</div><div class="line">		String outStr;</div><div class="line">		</div><div class="line">		System.out.println(&quot;Here is input string: &quot;+inStr);</div><div class="line">		</div><div class="line">		outStr = stringOp((str)-&gt;str.toUpperCase(),inStr);</div><div class="line">		System.out.println(&quot;The string in uppercase: &quot;+outStr);</div><div class="line">		</div><div class="line">		outStr = stringOp((str)-&gt;</div><div class="line">		&#123;</div><div class="line">			String result = &quot;&quot;;</div><div class="line">			int i;</div><div class="line">			</div><div class="line">			for(i=0; i&lt;str.length(); i++)</div><div class="line">			&#123;</div><div class="line">				if(str.charAt(i) != &apos;&apos;)</div><div class="line">				&#123;</div><div class="line">					result += str.charAt(i);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return result;</div><div class="line">		&#125;,inStr);</div><div class="line">		System.out.println(&quot;The string with spaces removed: &quot;+outStr);</div><div class="line">		</div><div class="line">		//当块lambda看上去特别长，不适合嵌入到方法的调用中时，很容易把块lambda赋给一个函数式接口变量.</div><div class="line">		//然后，可以简单地把该引用传递给方法。</div><div class="line">		StringFunc reverse = (str)-&gt;</div><div class="line">		&#123;</div><div class="line">			String result = &quot;&quot;;</div><div class="line">			int i;</div><div class="line">			</div><div class="line">			for(i=str.length()-1; i&gt;=0; i--)</div><div class="line">			&#123;</div><div class="line">				result += str.charAt(i);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			result result;</div><div class="line">		&#125;;</div><div class="line">		System.out.println(&quot;The string reserved: &quot;+stringOp(reverse,inStr));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Here is input string: lambda add power to java
The string in uppercase: LAMBDAS ADD POWER TO JAVA 
The string with spaces removed: lambdaaddpowertojava
The string reserved: avaJ ot rewop dda sadbmal

在该程序中，首先注意stringOp()方法。它有两个参数，第一个参数的类型是StringFunc,而StringFunc是一个函数式接口。因此，这个参数可以接受对任何StringFunc实例的引用，包括由lambda表达式创建的实例。stringOp的第二个参数是String类型，也就是要操作的字符串。

接下来，注意对stringOp()的第一次调用，如下所示：

outStr = stringOp((str)-&gt;str.uppercase(),inStr);

这里，传递了一个简单的表达式lambda作为参数。这会创建函数式接口StringFunc的一个实例，并把对该实例的一个引用传递给stringOp()方法的第一个参数这就把嵌入在一个类实例中的lambda代码传递给了方法。目标类型上下文由参数的类型决定。因此lambda表达式与该类型兼容，调用是合法的。

当块lambda看上去特别长，不适合嵌入到方法的调用中时，很容易把块lambda赋给一个函数式接口变量，正如上面代码中那样。然后，可以简单地把该引用传递给方法。
</code></pre><p><strong>15.5 lambda表达式与异常</strong></p>
<pre><code>lambda表达式可以抛出异常。但是，如果抛出经检查的异常，该异常就必须与函数式接口的抽象方法的throws子句中列出的异常兼容。下面的例子演示了这个事实。它计算一个double数组的平均值。但是，如果传递了长度为0的数组，就会抛出自定义异常EmptyArrayException。从示例中可以看出，DoubleNumericArrayFunc函数式接口内声明的func()方法的throws子句中列出了此异常。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">interface DoubleNumericArrayFunc</div><div class="line">&#123;</div><div class="line">	double func(double[] n)throws EmptyArrayException;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EmptyArrayException extends Exception</div><div class="line">&#123;</div><div class="line">	EmptyArrayException()</div><div class="line">	&#123;</div><div class="line">		super(&quot;Array Empty&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class lambdaExceptionDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		double[] values = &#123;1.0, 2.0, 3.0, 4.0, 5.0&#125;;</div><div class="line">		</div><div class="line">		DoubleNumericArrayFunc average = (n)-&gt;</div><div class="line">		&#123;</div><div class="line">			double sum = 0;</div><div class="line">			</div><div class="line">			if(n.length == 0)</div><div class="line">			&#123;</div><div class="line">				throw new EmptyArrayException();</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			for(int i=0; i&lt;n.length; i++)</div><div class="line">			&#123;</div><div class="line">				sum += n[i];</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return sum / n.length;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		System.out.println(&quot;The average is &quot;+average.func(values));</div><div class="line">		</div><div class="line">		//This causes an exception to be throw.</div><div class="line">		System.out.println(&quot;The average is &quot;+average.func(new double[0]));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>对average.func()的第一次调用返回了值2.5。在第二次调用中，由于传递了一个长度为0的数组，EmptyArryException异常被抛出。记住，在func()方法中包含throws子句是必要的。如果不这么做，那么由于lambda表达式不在于func()兼容，程序将无法通过编译。

注意：
函数式接口DoubleNumericArrayFunc的func()方法指定的参数是数组。然而，lambda表达式的参数是n，而不是n[]。回忆一下，lambda表达式的参数类型将从目标上下文中推断得出。在这里，目标上下文是double[]，所以n的类型将会是double[]。没有必要指定n[](这么做也不合法)。将参数显示的声明为double[] n是合法的，但是在本例中这么做不会有什么好处。
</code></pre><p><strong>15.6 lambda表达式和变量捕获</strong></p>
<pre><code>在lambda表达式中，可以访问其外层作用域定义的变量。例如，lambda表达式可以使用其外层定义的实例或静态变量。lambda表达式也可以显示或隐式地访问this变量，该变量引用lambda表达式的外层类的调用的实例。因此，lambda表达式可以获取或设置其外层类的实例或静态变量的值，以及调用其外层类定义的方法。

但是，当lambda表达式使用其外层作用域定义的局部变量时，会产生一种特殊的情况，称为变量捕获。在这种情况下，lambda表达式只能使用实质上final的局部变量。实质上final的变量是指在第一次赋值以后，值不在发生变化的变量(即在后面的程序中没有改变变量的值)。没有必要显示的将这种变量声明为final，不过那样做也不是错误(外层作用域的this参数自动是实质上final变量，lambda表达式没有自己的this参数)。

lambda表达式不能修改外层作用域内的局部变量，理解这一点很重要。修改局部变量会移除其实质上的final状态，从而使捕获该变量变得不合法。

下面程序演示了实质上的final的局部变量和可变局部变量的区别。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">interface MyFunc</div><div class="line">&#123;</div><div class="line">	int func(int n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class VarCapture</div><div class="line">&#123;</div><div class="line">	int num = 10;</div><div class="line">	</div><div class="line">	MyFunc mylambda = (n)-&gt;</div><div class="line">	&#123;</div><div class="line">		//This use of num is ok.It does not modify num.</div><div class="line">		int v = num + n;</div><div class="line">		</div><div class="line">		//Hower,the following is illegal because it attempts to modify the value of num.	</div><div class="line">//		num++;</div><div class="line"></div><div class="line">		return v;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	//The following line would also cause an error,because it would remove the effectively </div><div class="line">	//final status from num.</div><div class="line">//	num = 9;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>正如注释所指出的，num实质是final变量，所有可以在mylambda内使用。但是，如果修改了num，不管是在lambda表达式内还是表达式外，num就会丢失其实质上final的状态。这会导致发生错误，程序将无法通过编译。

需要重点强调，lambda表达式可以使用和修改调用其调用类的实例变量，只是不能使用其外层作用域内的局部变量，除非该变量实质上是final变量。
</code></pre><p><strong>15.7 方法引用</strong></p>
<pre><code>有一个重要的特性与lambda表达式相关，叫做方法引用。方法引用提供了一种引用而不执行方法的方式。这种特性与lambda表达式相关，因为它也需要由兼容的函数式接口构成的目标类型上下文。计算时，方法引用会创建函数式接口的一个实例。
</code></pre><p><strong>15.7.1 静态方法的方法引用</strong></p>
<pre><code>要创建静态方法引用，需要使用下面的一般语法：

className:methodName

注意： 
类名与方法名之间使用双冒号分隔开。::是JDK 8新增的一个分隔符，专门用于此目的。在于目标类型兼容的任何地方，都
可以使用这个方法的引用。

下面的程序演示了一个静态方法的引用：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">interface StringFunc</div><div class="line">&#123;</div><div class="line">	String func(String n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyStringOps</div><div class="line">&#123;</div><div class="line">	static String strReverse(String str)</div><div class="line">	&#123;</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		int i;</div><div class="line">		</div><div class="line">		for(i=str.length()-1; i&gt;=0; i--)</div><div class="line">		&#123;</div><div class="line">			result += str.charAt(i);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MethodRefDemo</div><div class="line">&#123;</div><div class="line">	static String stringOp(StringFunc sf,String s)</div><div class="line">	&#123;</div><div class="line">		return sf.func(s);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		String inStr = &quot;lambda add power to Java&quot;;</div><div class="line">		String outStr;</div><div class="line">		</div><div class="line">		outStr = stringOp(MyStringOps::strReverse,inStr);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Original string: &quot;+inStr);</div><div class="line">		System.out.println(&quot;String reserved: &quot;+outStr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Original string: lambda add power to Java
String reserved: avaJ ot rewop dda adbmal

在程序中，特别注意下面这行代码：

outStr = stringOp(MyStringOps::strReverse,inStr);

这里，将对MyStringOps内声明的静态方法strReverse()的引用传递给stringOp()方法的第一个参数。可以这么做，因为
strReverse与StringFunc函数式接口兼容。因此，表达式MyStringOps::strReverse的计算结果为对象引用，其中，
strReverse提供了StringFunc的func()方法的实现。 
</code></pre><p><strong>15.7.2 实例方法的方法引用</strong></p>
<pre><code>要传递对某个对象的实例方法的引用，需要使用下面的基本语法：

objRef::methodName

可以看出，这种语法与用于静态方法的语法类似，只不过这里使用对象引用而不是类名。下面使用实例方法引用重写了前面的程序：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">interface StringFunc</div><div class="line">&#123;</div><div class="line">	String func(String n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyStringOps</div><div class="line">&#123;</div><div class="line">	String strReverse(String str)</div><div class="line">	&#123;</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		int i;</div><div class="line">		</div><div class="line">		for(i=str.length()-1; i&gt;=0; i--)</div><div class="line">		&#123;</div><div class="line">			result += str.charAt(i);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MethodRefDemo2</div><div class="line">&#123;</div><div class="line">	static String stringOp(StringFunc sf,String s)</div><div class="line">	&#123;</div><div class="line">		return sf.func(s);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		String inStr =&quot;lambda add power to Java&quot;;</div><div class="line">		String outStr;</div><div class="line">		</div><div class="line">		MyStringOps strOps = new MyStringOps();</div><div class="line">		</div><div class="line">		outStr = stringOp(strOps::strReverse,inStr);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Original string: &quot;+inStr);</div><div class="line">		System.out.println(&quot;String reserved: &quot;+outStr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>这个程序产生的输出与上一个版本相同。

也可以指定一个实例方法，使其能够用于给定类的任何对象而不仅指定对象。此时需要像下面这样创建方法引用：

ClassName::instanceMethodName

这里使用了类的名称，而不是具体的对象，尽管指定的是实例方法。使用这种形式时，函数式接口的第一个参数匹配调用对象，第二个参数匹配方法指定的参数。

下面是一个例子。它定义了一个方法counter()，用于统计某个数组中，满足函数式接口MyFunc的fun()方法定义的条件的对象个数。本例中，它统计HighTemp类的实例个数。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">interface MyFunc&lt;T&gt;</div><div class="line">&#123;</div><div class="line">	boolean func(T v1,T v2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class HighTemp</div><div class="line">&#123;</div><div class="line">	private int hTemp;</div><div class="line">	</div><div class="line">	HighTemp(int ht)</div><div class="line">	&#123;</div><div class="line">		hTemp = ht;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean sameTemp(HighTemp ht2)</div><div class="line">	&#123;</div><div class="line">		return hTemp = ht2.hTemp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	boolean lessThanTemp(HighTemp ht2)</div><div class="line">	&#123;</div><div class="line">		return hTemp &lt; ht2.hTemp;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class InstanceMethWithObjectRefDemo</div><div class="line">&#123;</div><div class="line">	static &lt;T&gt; int counter(T[] vals,MyFunc&lt;T&gt; f,T v)</div><div class="line">	&#123;</div><div class="line">		int count = 0;</div><div class="line">		</div><div class="line">		for(int i=0; i&lt;vals.length; i++)</div><div class="line">		&#123;</div><div class="line">			if(f.func(vals[i],v)) count++;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int count;</div><div class="line">		</div><div class="line">		HighTemp[] weekDayHighs = &#123;</div><div class="line">				new HighTemp(89),new HighTemp(82),</div><div class="line">				new HighTemp(90),new HighTemp(89),</div><div class="line">				new HighTemp(89),new HighTemp(91),</div><div class="line">				new HighTemp(84),new HighTemp(83)&#125;;</div><div class="line">				</div><div class="line">		cout = counter(weekDayHighs,HighTemp::sameTemp,new HighTemp(89));</div><div class="line">		System.out.println(cout+&quot; days had a high of 89&quot;);</div><div class="line">		</div><div class="line">		HighTemp[] weekDayHighs2 = &#123;</div><div class="line">				new HighTemp(31),new HighTemp(12),</div><div class="line">				new HighTemp(24),new HighTemp(19),</div><div class="line">				new HighTemp(18),new HighTemp(12),</div><div class="line">				new HighTemp(-1),new HighTemp(13)&#125;;</div><div class="line">		</div><div class="line">		cout = counter(weekDayHighs2,HighTemp::sameTemp,new HighTemp(12));</div><div class="line">		System.out.println(count+&quot; days had a high of 12&quot;);</div><div class="line">		</div><div class="line">		cout = counter(weekDayHighs,HighTemp::lessThanTemp,new HighTemp(89));</div><div class="line">		System.out.println(count+&quot; days had a high less than 89&quot;);</div><div class="line">		</div><div class="line">		count = counter(weekDayHighs2,HighTemp::lessThanTemp,new HighTemp(19));</div><div class="line">		System.out.println(count+&quot; days had a high of less than 19&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
3 days had a high of 89 
2 days had a high of 12 
3 days had a high less than 89 
5 days had a hign less than 19 

在这个程序中，注意HighTemp有两个实例方法：someTemp()和lessThanTemp()。如果两个HighTemp对象包含相同的温度，sameTemp()方法返回true。如果调用对象的温度小于被传递的对象的温度，lessThanTemp()方法返回true。这两个方法都有一个HighTemp类型的参数，并且都返回布尔结果。因此，这两个方法都与MyFunc函数式接口兼容，因为调用对象类型可以映射到func()的第一个参数，传递的实参可以映射到func()的第二个参数。因此，当下面的表达式：

HighTemp::sameTemp

被传递给counter()方法时，会创建函数式接口的一个实例，其中第一个参数的参数类型就是实例方法的调用对象的类型，也就是HighTemp。第二个参数的类型也是HighTemp，因为这是sameTemp()方法的参数。对于lessThanTemp()，这也是成立的。

另外一点，通过使用super，可以引用方法的超类版本。如下所示：

super::name

方法的名称由name指定。

备注：
上面程序中函数式接口中的函数boolean func(T v1,T v2)中含有两个参数，而HighTemp中函数sameTemp(HighTemp ht2)含有一个参数，但是能够兼容的原因是：
其实HighTemp类中的sameTemp(HighTemp ht2)其实包含两个参数，默认隐藏调用这个函数的引用this。
故，当使用类的实例方法作为方法引用时，函数式接口的第一个参数匹配类的实例方法的调用对象，第二个参数才匹配方法指定的参数。
</code></pre><p><strong>15.7.3 泛型中的方法引用</strong></p>
<pre><code>在泛型类或泛型方法中，也可以使用方法引用。例如，分析下面程序：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">interface MyFunc&lt;T&gt;</div><div class="line">&#123;</div><div class="line">	int func(T[] vals,T v);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyArrayOps</div><div class="line">&#123;</div><div class="line">	static &lt;T&gt; int countMatching(T[] vals,T v)</div><div class="line">	&#123;</div><div class="line">		int count = 0;</div><div class="line">	</div><div class="line">		for(int i=0; i&lt;vals.length; i++)</div><div class="line">		&#123;</div><div class="line">			if(vals[i] == v) count++;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		return count;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">class GenericMethodRefDemo</div><div class="line">&#123;</div><div class="line">	static&lt;T&gt; int myOp(MyFunc&lt;T&gt; f,T[] vals,T v)</div><div class="line">	&#123;</div><div class="line">		return f.func(vals,v);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	Integer[] vals = &#123;1,2,3,4,2,3,4,4,5&#125;;</div><div class="line">	String[] strs = &#123;&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Two&quot;&#125;;</div><div class="line">	int count;</div><div class="line">	</div><div class="line">	count = myOp(MyArrayOps::&lt;Integer&gt;countMatching,vals,4);</div><div class="line">	System.out.println(&quot;vals contains &quot;+count+&quot; 4s&quot;);</div><div class="line">	</div><div class="line">	count = myOp(MyArrayOps::&lt;String&gt;countMatching,strs,&quot;Two&quot;);</div><div class="line">	System.out.println(&quot;strs contains &quot;+count+&quot; Twos&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
vals contains 3 4s
strs contains 2 Twos

在程序中，MyArrayOps是非泛型类，包含泛型方法countMatching()。该方法返回数组中与指定值匹配的元素的个数。注意这里如何指定泛型类型参数。例如，在main()方法中，对countMatching()方法的第一次调用如下所示：

count = myOp(MyArrayOps::&lt;Integer&gt;countMatching,vals,4);

这里传递了类型参数Integer。注意，参数传递发生在::的后面。这种语法可以推广。当把泛型方法指定为方法引用时，类型参数出现在::之后、方法名之前。但是，需要指出的是，在这种情况(和其它许多情况)下，并非必须显示指定类型参数，因为类型参数会被自动推断得出。对于指定泛型类的情况，类型参数位于类名的后面、::的前面。

前面的例子显示了使用方法引用的机制，但是没有展现它们真正的优势。方法引用能够一展拳脚的一处地方是在于集合框架一起使用时。在第18章详细介绍。

例如：找到集合中最大元素的一种方法是使用Collections类定义的max()方法。对于这里使用的max()版本，必须传递一个集合引用，以及一个实现了Comparator&lt;T&gt;接口的对象的实例。Comparator&lt;T&gt;接口指定如何比较两个对象，它只定义了抽象方法compare()，该方法接受两个参数，其类型均为要比较的对象的类型。如果第一个参数大于第二个参数，该方法返回一个正数；如果两个参数相等，返回0；如果第一个参数小于第二个参数，返回一个负数。

过去，要在max()方法中使用用户定义的对象，必须首先通过一个类显式实现Comparator&lt;T&gt;接口，然后创建该类的一个实例，通过这种方法获得Comparator&lt;T&gt;接口的一个实例，然后，把这个实例作为比较器传递给max()方法。在JDK 8中，现在可以简单地将比较方法的引用传递给max()方法，因为这将自动实现比较器。

下面的简单的示例显示了这个过程。该例创建MyCLass对象的一个ArrayList，然后找到列表中具有最大值的对象(这是由比较方法定义的)。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class MyClass</div><div class="line">&#123;</div><div class="line">	private int val;</div><div class="line">	</div><div class="line">	MyClass(int v)&#123;val = v;&#125;</div><div class="line">	</div><div class="line">	int getValue()&#123;return val;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class UseMethodRef</div><div class="line">&#123;</div><div class="line">	static int compareMC(MyClass a,MyClass b)</div><div class="line">	&#123;</div><div class="line">		return a.getValue()-b.getValue();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		ArrayList&lt;MyClass&gt; a1 = new ArrayList&lt;MyClass&gt;();</div><div class="line">		</div><div class="line">		a1.add(new MyClass(1));</div><div class="line">		a1.add(new MyClass(4));</div><div class="line">		a1.add(new MyClass(2));</div><div class="line">		a1.add(new MyClass(9));</div><div class="line">		a1.add(new MyClass(3));</div><div class="line">		a1.add(new MyClass(7));</div><div class="line">		</div><div class="line">		//UseMethodRef::compareMC生成了抽象接口Comparator定义的compare()方法的实例。</div><div class="line">		MyClass maxValObj = Collections.max(a1,UseMethodRef::compareMC);</div><div class="line">		</div><div class="line">		System.out.println(&quot;Maximum value is: &quot;+maxValObj.getValue());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Maximum value is: 9 

在程序中，注意MyClass即没有定义自己的比较方法，也没有实现Comparator接口。但是，通过调用max()方法，仍然可以获得MyClass对象列表中的最大值，这是因为UseMethodRef定义了静态方法compareMC()，它与Comparator定义的compare()方法兼容。因此，没哟必要显式的实现Comparator接口并创建其实例。
</code></pre><p><strong>15.8 构造函数引用</strong></p>
<pre><code>与创建方法引用相似，可以创建构造函数的引用。所需语法的一般形式如下所示：

className::new 

可以把这个引用赋值给定义的方法与构造函数兼容的任何函数式接口的引用。下面是一个例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">interface MyFunc</div><div class="line">&#123;</div><div class="line">	MyClass func(int n);</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyClass</div><div class="line">&#123;</div><div class="line">	private int val;</div><div class="line">	</div><div class="line">	MyClass(int v)&#123;val = v;&#125;</div><div class="line">	</div><div class="line">	MyClass()&#123;val = 0;&#125;</div><div class="line">	</div><div class="line">	int getValue()&#123;return val;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ConstructorRefDemo</div><div class="line">&#123;</div><div class="line">	MyFunc myClassCons = MyClass::new;</div><div class="line">	</div><div class="line">	MyClass mc = myClassCons.func(100);</div><div class="line">	System.out.println(&quot;val in mc is: &quot;+mc.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
val in mc is: 100 

在程序中，注意MyFunc的func()方法返回MyClass类的引用，并且有一个int类型的参数。接下来，注意MyClass定义了两个构造函数。第一个构造函数指定了一个int类型的参数，第二个构造函数是无参构造函数。现在，分析下面这行代码：

MyFunc myClassCons = MyClass::new;

这里，表达式MyClass::new创建了对MyClass构造函数的引用。在本例中，因为为MyFunc的func()方法接受了一个int类型的参数，所以被引用的构造函数是MyClass(int v),它是正确匹配的构造函数。还要注意，对这个构造函数的引用被赋值给
了名为myClassCons的MyFunc引用。这条语句执行后，可以使用myClassCons来创建MyClass的一个实例，如下面这行代码所示：

MyClass mc = myClassCons.func(100);

实质上，myClassCons成了调用MyClass(int v)的另一种方式。
</code></pre><p><strong>15.9 预定义的函数式接口</strong></p>
<pre><code>直到现在，本章中的实例都定义了自己的函数式接口，以便清晰地演示lambda表达式和函数式接口背后的基本概念。但是很多时候，并不需要自己定义函数式接口，因为JDK 8中包含了新包java.util.function，其中提供了一些预定义的函数式
接口。在第2部分详细讨论，这里只做简单简介。

java.util.function包中提供的一些预定义函数式接口：UnaryOperator&lt;T&gt;,BinaryOperator&lt;T&gt;,Consumer&lt;T&gt;,Supplier&lt;T&gt;,Function&lt;T,R&gt;,Predicate&lt;T&gt;。

Function&lt;T,R&gt;:对类型为T的对象应用操作，并返回结果。结果是类型为R的对象。包含的方法名为apply()。

下面的程序通过使用Function接口重写前面的BlocklambdaDemo示例，演示了Function接口的实际应用。BlocklambdaDemo示例通过实现了一个阶乘，演示了块lambda。该示例创建了自己的函数式接口NumericFunc，但其实也可以使用内置的Function接口中定义的抽象函数apply()，如程序的下面这个版本所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import java.util.function.Function;</div><div class="line"></div><div class="line">class UseFunctionInterfaceDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Function&lt;Integer,Integer&gt; factorial = (n)-&gt;</div><div class="line">		&#123;</div><div class="line">			int result = 1;</div><div class="line">			</div><div class="line">			for(int i=1; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				result = result*i;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			return result;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		System.out.println(&quot;The factorial of 3 is &quot;+factorial.apply(3));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>这个版本产生的输出与前一个版本相同。
Function&lt;T,R&gt;是预定义的函数式接口，抽象函数为apply()，故不需要自己定义函数式接口。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之字符串处理]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<pre><code>在Java中，字符串也是一连串的的字符。但是，不像其他语言作为字符数组实现字符串，Java将字符串实现为String类型的对象。

当创建String对象时，创建的字符串不能修改。也就是说，一旦创建一个String对象，就不能改变这个字符串中包含的字符。乍一看，这好像是一个严重的限制。但是，情况并非如此。仍然可以执行各种字符串操作。区别是，当每次需要已存在字符串的修改版本时，会创建包含修改后内容的新String对象。原始字符串保持不变。使用这种方式的原因是：实现固定的、不能修改的字符串与实现能够修改的字符串相比效率更高。对于那些需要能够修改的字符串的情况，Java提供了两个选择：
StringBuffer和StringBuilder。这两个类用来保存在创建之后可以进行修改的字符串。

String、StringBuffer和StringBuilder类都是在java.lang中定义的。因此，所有程序自动都可以使用它们。所有这些类被声明为final，这意味着这些类不能有子类。这使得对于通用的字符串操作，可以采取特定的优化以提供性能。这3个类实现了
CharSequence接口。

最后一点：所谓String类型对象中的字符串是不可改变的，是指创建了String实例后不能修改String实例的内容。但是，在任何时候都可以修改String引用变量，使其指向其他String对象。
</code></pre><p><strong>16.1 String类的构造函数</strong></p>
<pre><code>String类支持几个构造函数：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String()</div><div class="line"></div><div class="line">String(chars[])</div><div class="line">String(chars[],int startIndex,int numChars)</div><div class="line"></div><div class="line">String(String strObj)</div><div class="line"></div><div class="line">String(byte[] chars)</div><div class="line">String(byte[] chars,int startIndex,int numChars)</div><div class="line"></div><div class="line">String(StringBuffer strBufObj)</div><div class="line">String(StringBuilder strBuildObj)</div></pre></td></tr></table></figure>
<pre><code>注意：
无论何时，从数组创建String对象都会复制数组的内容。在创建字符串之后，如果改变数组内容，String对象不会发生改变。
</code></pre><p><strong>16.2 字符串的长度</strong></p>
<pre><code>字符串的长度是指字符串包含字符的数量。为了获取这个值，调用length()方法，如下所示：

int length()

下面的代码输出&quot;3&quot;，因为在字符串s中3个字符：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">char[] chars = &#123;&apos;a&apos;,&apos;b&apos;,&apos;c&apos;&#125;;</div><div class="line">String s = new String(chars);</div><div class="line">System.out.println(s.length());</div></pre></td></tr></table></figure>
<p><strong>16.3 特殊的字符串操作</strong></p>
<p><strong>(1)字符串转换和toString()方法</strong><br>    当Java在执行连接操作期间，将数据转换成相应的字符串表示形式时，是通过调用String定义的字符串转换方法valueOf()的某个重载版本来完成的。valueOf()方法针对所有基本类型以及Object类型进行了重载。对于基本类型，valueOf()方法返回一个字符串，该字符串包含与调用值等价的人类可以阅读的形式。对于对象，valueOf()方法调用对象的toString()方法。在本章后面将详细分析valueOf()方法。在此，首先分析toString()方法，因为，该方法决定了所创建类对象的字符串表示形式。</p>
<pre><code>每个类都实现了toString()方法，因为该方法是由Object定义的。然而，toString()方法的默认实现很少能够满足需求。对于自己创建的大多中重要类，你会希望重写toString()方法，并提供自己的字符串表示形式。幸运的是，这很容易完成。
toString()方法的一般形式如下：

String toString()

为创建的类重写toString()方法，可以将其完全集成到Java开发环境中。例如，可以把他们用于print()和println()语句，还可以用于字符串连接表达式中。下面的程序通过为Box类重写toString()方法，演示了这一点：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Box</div><div class="line">&#123;</div><div class="line">	double width;</div><div class="line">	double height;</div><div class="line">	double depth;</div><div class="line">	</div><div class="line">	Box(double w,double h,double d)</div><div class="line">	&#123;</div><div class="line">		width = w;</div><div class="line">		height = h;</div><div class="line">		depth = d;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public String toString()</div><div class="line">	&#123;</div><div class="line">		return &quot;Dimensions are &quot;+width+&quot; by &quot;+depth+&quot; by &quot;+height+&quot;.&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class toStringDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Box b = new Box(10,12,14);</div><div class="line">		String s = &quot;Box b: &quot;+b;</div><div class="line">		</div><div class="line">		System.out.println(b);</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Dimensions are 10.0 by 14.0 by 12.0
Box b: Dimensions are 10.0 by 14.0 by 12.0

可以看出，在连接表达式或println()调用中使用Box对象时，会自动调用Box的toString()方法。 
</code></pre><p><strong>(2)比较字符串</strong></p>
<pre><code>为了比较两个字符串是否相等，可以使用equals()方法，它的一般形式如下：

boolean equals(Object str)

其中，str是将要与调用String对象进行比较的String对象。如果字符串以相同的顺序包含相同的字符，该方法返回true，否则返回false。比较是大小写敏感的。

为了执行忽略大小写区别的比较，可以调用equalsIgnoreCase()。
</code></pre><p><strong>(3)equals()与==</strong></p>
<pre><code>equals()方法与&quot;==&quot;运算符执行不同的操作，理解这一点很重要。equals()方法比较String对象中的字符。&quot;==&quot;运算符比较两个对象的引用，查看它们是否指向相同的实例。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class EqualsNotEqualTo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		String s1 = &quot;Hello&quot;;</div><div class="line">		String s2 = new String(s1);</div><div class="line">		</div><div class="line">		System.out.println(s1+&quot; equals &quot;+ s2+&quot; -&gt; &quot;s1.equals(s2));</div><div class="line">		System.out.println(s1+&quot; == &quot;+s2+&quot; -&gt; &quot;+(s1==s2));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>16.7 修改字符串</strong></p>
<pre><code>因为String对象是不可改变的，所以当希望修改String对象时，必须将之复制到StringBuffer或StringBuilder对象中，或者使用String类提供的方法来构造字符串修改后的新副本。
</code></pre><p><strong>(1) substring()</strong></p>
<pre><code>使用substring()方法可以提取子串，它有两种形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String substring(int startIndex)</div><div class="line">String substring(int startIndex,int endIndex)</div></pre></td></tr></table></figure>
<p><strong>(2) concat()</strong></p>
<pre><code>可以使用concat()方法连接两个字符串，如下所示：

String concat(String str)

该方法创建一个新对象，这个新对象包含调用字符串并将str的内容追加到结尾。concat()与&quot;+&quot;执行功能相同。
</code></pre><p><strong>(3) replace()</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String replace(char original,char replacement)</div><div class="line">String replace(CharSequence original,CharSequence replacement)</div></pre></td></tr></table></figure>
<p><strong>(4) trim()</strong></p>
<pre><code>String trim()

该方法返回调用字符串的副本，并移除开头和结尾的所有空白字符。
</code></pre><p><strong>16.8 使用valueOf()转换数据</strong></p>
<pre><code>valueOf()方法将数据从内部格式转换成人类可以阅读的方式。valueOf()是静态方法，String针对所有Java内置类型对该方法进行了重载，从而使你创建的所有类类型的对象都可以作为valueOf()方法的参数(请记住，Object是所有类的超类)。下面是valueOf()方法的几种形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static String valueOf(double num)</div><div class="line">static String valueOf(long num)</div><div class="line">static String valueOf(Object ob)</div><div class="line">static String valueOf(char[] chars)</div></pre></td></tr></table></figure>
<pre><code>前面讨论过，当需要其他某类型的数据的字符串表示形式时会调用valueOf()方法，例如在连接操作期间。可以使用任何数据类型直接调用直接调用valueOf()方法，从而得到可读的字符串表示形式。所有简单类型都被转换成他们通用的字符串表示形式。传递给valueOf()方法的所有对象都将返回调用对象的toString()方法的结果。实际上，可以直接调用toString()方法得到相同的结果。
</code></pre><p><strong>16.9 改变字符串中字符的大小写</strong></p>
<pre><code>String toLowerCase() //将字符串的所有字符从大写改成小写
String toUpperCase() //将字符串的所有字符从小写改成大写
</code></pre><p><strong>16.10 连接字符串</strong></p>
<pre><code>JDK 8为String类添加了一个新方法join()，用于连接两个或更多个字符串，并使用分隔符分隔各个字符串，如空格或逗
号。join()方法有两种形式，第一种形式如下所示：

static String join(CharSequence delim,CharSequence ...strs)

其中，delim指定了分隔符，用于分隔strs指定的字符序列。因为String类实现了一个CharSequence接口，所以strs可以是一个字符串列表。
</code></pre><p><strong>16.12 StringBuffer类</strong></p>
<pre><code>StringBuffer支持可修改的字符串。String表示长度固定、不可修改的字符序列。与之对应，StringBuffer表示可增长、可写入的字符序列。StringBuffer允许在中间插入字符和子串，或者在末尾追加字符和子串。StringBuffer能够自动增长，从而为这类添加操作准备空间，并且通常预先分配比实际需要更多的字符空间，以允许空间增长。
</code></pre><p><strong>16.12.1 StringBuffer类的构造函数</strong></p>
<pre><code>StringBuffer类定义了以下4个构造函数：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StringBuffer()</div><div class="line">StringBuffer(int size)</div><div class="line">StringBuffer(String str)</div><div class="line">StringBuffer(CharSequence chars)</div></pre></td></tr></table></figure>
<pre><code>默认构造函数(没有参数的那个)预留16个字符的空间，不要在分配。
第2个版本接受一个显示设置缓冲区大小的整型参数。
第3个版本接受一个设置StringBuffer对象初始化内容的String参数，并额外预存16个字符的空间，不需要再分配。
第4个版本构造函数创建包含字符序列的对象，并额外预留16个字符的空间，包含的字符序列是由chars指定的。
如果没有要求特定的缓冲区长度，StringBuffer会为16个附加字符分配空间，因为在分配空间是很耗时的操作。此外，频繁的分配空间会产生内存碎片。通过为一部分二外字符分配空间，StringBuffer减少了在此分配空间的次数。
</code></pre><p><strong>16.12.3 ensureCapacity()</strong></p>
<pre><code>在创建了StringBuffer对象后，如果希望为特定数量的字符预先分配空间，可以使用ensureCapacity()方法设置缓冲区的大小。如果事先知道将要向StringBuffer对象追加大量的小字符串，这个方法时有用的。
ensureCapacity()方法的一般形式为：

void ensureCapacity(int minCapacity)

其中，minCapacity指定了缓冲区的最下尺寸(出于效率考虑，可能会分配比minCapacity更大的缓冲区)

备注：缓冲区即上面创建StringBuffer对象时预留的16个字符空间，因为默认缓冲器的大小为16。
</code></pre><p><strong>16.12.2 length()和capacity()</strong></p>
<pre><code>通过length()方法可以获得StringBuffer对象的当前长度，而通过capacity()方法可以获得已分配的容量。
这两个方法的一般形式如下：

int length()
int capacity()

下面是一个例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class StringBufferDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		StringBuffer sb = new StringBuffer(&quot;Hello&quot;);</div><div class="line">		</div><div class="line">		System.out.println(&quot;buffer = &quot;+sb);</div><div class="line">		System.out.println(&quot;length = &quot;+sb.length());</div><div class="line">		System.out.println(&quot;capacity = &quot;+sb.capacity());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
buffer = Hello
length = 5
capacity = 21

因为sb在创建时是使用字符串&quot;Hello&quot;初始化的，所以它的长度是5。因为自动添加了16个附加字符的空间，所以它的容量是21.当sb的长度超过这个capacity容量时，capacity会自动扩展、增大。
</code></pre><p><strong>16.12.4 setLength()</strong></p>
<pre><code>可以使用setLength()方法设置StringBuffer对象中字符串的长度，一般形式为：

void setLength(int len)

其中，len指定字符串的长度，值必须非负。

当增加字符串的大小时，会向末尾添加null字符。如果调用setLength()方法时，使用的值小于length()方法返回的当前值，那么超出新长度的字符将会丢失。
</code></pre><p><strong>16.12.5 charAt()与setCharAt()</strong></p>
<pre><code>通过charAt()方法可以从StringBuffer获取单个字符的值，使用setCharAt()方法可以设置StringBuffer对象中某个字符的值。这两个方法的一般形式如下：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char charAt(int where)</div><div class="line">void setCharAt(int where,char ch)</div></pre></td></tr></table></figure>
<p><strong>16.12.6 getChars()</strong></p>
<pre><code>可以使用getChars()方法将StringBuffer对象的子串复制到数组中，一般形式为：

void getChars(int sourceStart,int sourceEnd,char target[],int targetStart)
</code></pre><p><strong>16.12.7 append()</strong></p>
<pre><code>append()方法将各种其他类型数据的字符串表示形式连接到调用StringBuffer对象的末尾。给方法有一些重载版本，下面是其中的几个：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">StringBuffer append(String str)</div><div class="line">StringBuffer append(int num)</div><div class="line">StringBuffer append(Object obj)</div></pre></td></tr></table></figure>
<pre><code>通常调用String.valueOf()来获取每个参数的字符串的表示形式，结果将被添加到当前StringBuffer对象的末尾。
</code></pre><p><strong>16.12.8 insert()</strong></p>
<pre><code>insert()方法将一个字符串插入到另一个字符串中。

下面是其中的几种重载形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">StringBuffer insert(int index,String str)</div><div class="line">StringBuffer insert(int index,char ch)</div><div class="line">StringBuffer insert(int index,Object obj)</div></pre></td></tr></table></figure>
<p><strong>16.12.9reverse()</strong></p>
<pre><code>可以使用reverse()方法颠倒StringBuffer对象中的字符，如下所示：

StringBuffer reverse()

该方法返回调用对象的反转形式。
</code></pre><p><strong>16.12.10 delete()与deleteCharAt()</strong></p>
<pre><code>使用delete()和deleteCharAt()方法可以删除StringBuffer对象中的字符。这些方法如下所示：

StringBuffer delete(int startIndex,int endIndex)
StringBuffer deleteCharAt(int loc)
</code></pre><p><strong>16.12.11 replace()</strong></p>
<pre><code>通过调用replace()方法可以使用一个字符集替换StringBuffer对象中的另个一字符集。该方法的签名如下所示：

StringBuffer replace(int startIndex,int endIndex,String str)
</code></pre><p><strong>16.12.12 substring()</strong></p>
<pre><code>通过调用substring()方法可以获得StringBuffer对象的一部分。该方法有以下两种重载形式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String substringI(int startIndex)</div><div class="line">String substring(int startIndex,int endIndex)</div></pre></td></tr></table></figure>
<p><strong>16.3 StringBuilder类</strong></p>
<pre><code>StringBui类是由JDK 5引入的，以增强Java的字符串处理能力。StringBuilder与StringBuffer类似，只有一个重要的区
别：StringBuilder不是同步的，这意味着它不是线程安全的。StringBuilder的优势在于能得到更高的性能。但是，如果可以修改的字符串将被多个线程修改，并且没有使用其他同步措施的话，就必须使用StringBuffer，而不能使用StringBuilder。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之集合框架]]></title>
      <url>http://freeshow.github.io/2016/07/23/Java%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong>18.1 集合概述</strong></p>
<p>1.集合框架在设计上需要满足几个目标。<br>    首先，框架必须是高性能的。基本集合(动态数组、链表、树以及哈希表)的实现是高效的。很少需要手动编写这些”数据 引擎”中的某个。<br>    其次，框架必须允许不同类型的集合以类似的方式进行工作，并且具有高度的互操作性。<br>    再次，扩展或改造集合必须易于实现。<br>    最后，必须添加可以将标准数组继承到集合框架中的机制。</p>
<p>2.算法是集合机制中的另一个重要部分。算法操作集合，并且被定义为Collections类中的静态方法。因此，所有集合都可以使用它们。每个集合都不需要实现特定于自己的版本，所发为操作集合提供了标准的方式。</p>
<p>3.于集合密切相关的另个一内容是Iterator接口。迭代器为访问集合中的元素提供了通用、标准的方式，每次访问一个元素。因此，迭代器提供了枚举集合内容的一种方式。因为每个集合都提供了迭代器，所以可以通过Iterator定义的方法访问所有集合类的元素。因此，对循环遍历集合的代码进行很小的修改，就可以将其用于循环遍历列表。</p>
<p>4.JDK 8添加了另一种类型的迭代器，叫做spliterator.简单的说，spliterator就是为并行迭代提供支持的迭代器。支持<br>spliterator的接口有Spliterator和支持基本类型的几个嵌入式接口。JDK 8还添加了用于基本类型的迭代器接口，例如<br>PrimitiveIterator和 PrimitiveIterator.OfDouble。</p>
<p><strong>18.3 集合接口</strong></p>
<pre><code>集合框架定义了一些核心接口，核心接口决定了集合类的本质特性。换句话说，具体类只是提供了标准接口的不同实现。
</code></pre><p><strong>1.Collection接口</strong></p>
<pre><code>Collection接口是构建集合框架的基础，因为定义集合的所有类都必须实现该接口。
Collection接口是泛型接口，其声明如下：

interface Collection&lt;E&gt;

其中，E指定了集合将要存储的对象的类型。Collection扩展了Iterable接口，这意味着所有集合都可以使用for-each风格的for循环进行遍历(回想一下，只有实现了Iterable接口的类才能通过for循环进行遍历)。 

Collection声明了所有集合都将拥有的核心方法。

通过调用add()方法可以将对象添加到集合中。
通过调用addAll()方法，可以将一个集合的所有内容添加到另一个集合中。

通过使用remove()方法可以移除一个对象。
为了移除一组对象，需要调用removeAll()方法。 
通过调用retainAll()方法，可以移除除了指定元素之外的所有元素。
要想移除满足某些条件的元素，可以使用removeIf()方法(Predicate是JDK 8新增的一个函数式接口)。 
为了清空集合，可以调用clear()方法。 

toArray()方法返回一个数组，其中包含调用集合中存储的元素。

通过调用equals()方法可以比较两个集合的相等性。&quot;相等&quot;的精确含义根据集合的不同可以有所区别。

另一个重要的方法是iterator()，它返回集合的一个迭代器。新的soliterator()方法返回集合的一个spliterator。当操作集合时会频繁用到迭代器。最后，stream()和parallelStream()方法返回使用集合作为元素来源的流(第29章将详细讨论新的Stream接口)。 
</code></pre><p><strong>2. List接口</strong></p>
<pre><code>List接口扩展了Collection，并且声明了用来存储一连串元素的集合的行为。在列表中可以使用从0开始的索引，通过元素的位置插入或访问元素。列表可以包含重复的元素。List是泛型接口，其声明如下：

interface List&lt;E&gt;

其中，E指定了将存储与列表中的对象的类型。

除了Collection定义的方法外，List还定义了自己的一些方法。

为了获得存储在特定位置的元素，使用对象的索引调用get()方法。为了给列表中的元素赋值，可以调用set()方法，并指定将要修改的对象的索引。为了查找对象的索引，可以使用indexOf()或laseIndexOf()方法。 

通过调用subList()方法，指定子列表的开始索引和结束索引，可以获得列表的子列表。
List定义的sort()方法是排序列表的一种方法。
</code></pre><p><strong>3. Set接口</strong></p>
<pre><code>Set接口定义了组(set)。它扩展了Collection接口，并且声明了集合中不允许有重复元素的组行为。所以，如果为组添加重复的元素，add()方法就会返回false。Set接口没有定义自己的其他方法。Set是泛型接口，其声明如下：

interface Set&lt;E&gt;

其中，E指定了组将包含的对象的类型。
</code></pre><p><strong>4. SortedSet接口</strong></p>
<pre><code>SortedSet接口扩展了Set接口，并且声明了以升序进行排序的组行为。SortedSet是泛型接口，其声明如下：

interface SortedSet&lt;E&gt;
</code></pre><p><strong>5. NavigableSet接口</strong></p>
<pre><code>NavigableSet接口扩展了SortedSet接口，并且该接口声明了支持基于最接近匹配原则检索元素的集合行为。
NavigableSet是泛型接口，其声明如下：

interface NavigableSet&lt;E&gt;
</code></pre><p><strong>6. Queue接口</strong></p>
<pre><code>Queue接口扩展了Collection接口，并且声明了队列的行为，队列通常是先进先出的列表。但是，还有基于其他准则的队列类型。Queue是泛型接口，其声明如下：

interface Queue&lt;E&gt;
</code></pre><p><strong>7. Deque接口</strong></p>
<pre><code>Deque接口扩展了Queue接口，并声明了双端队列的行为。双端队列既可以想标准队列那样先进先出，也可以像堆栈那样后进先出。Deque是泛型接口，其声明如下：

interface Deque&lt;E&gt; 

注意Deque接口提供了push()和pop()方法。这些方法使得Deque接口的功能与堆栈类似。
</code></pre><p><strong>18.4 集合类</strong> </p>
<pre><code>现在已经熟悉了集合接口，下面开始分析实现它们的标准类。其中的一些类提供了可以使用的完整实现。其他一些类是抽象的，它们提供了可以作为创建具体集合开始点的大体实现。作为一般规则，集合类不是同步的，但是在后面章节将会看到，可以获得它们的同步版本。

注意：
除了集合类之外，还有一些遗留的类，例如，Vector、Stack以及Hashtable，也进行了重新设计以支持集合。
</code></pre><p><strong>1. ArrayList类</strong></p>
<pre><code>ArrayList类扩展了AbstractList类并实现了List接口。ArrayList是泛型类，其声明如下：

class ArrayList&lt;E&gt;

在Java中，标准数组的长度是固定的。ArrayList类支持能够按需增长的动态数组。ArrayList就是元素为对象引用的长度可变的数组。

注意：遗留类Vector也支持动态数组。

ArrayList具有如下所示的构造函数：

ArrayList()
ArrayList(Collection&lt;? extends E&gt; c)
ArrayList(int capacity)

第1个构造函数构建了一个空的数组列表。
第2个构造函数构建了一个数组列表，使用集合c的元素进初始化。
第3个构造函数构建了一个初始容量为capacity的数组。
容量是用于存储元素的数组的大小，当数组中的元素等于容量时，当在向数组列表中添加元素时，容量会自动增长。

尽管存储对象时，ArrayList对象的容量会自动增长，但是可以调用ensureCapacity()方法以手动增长ArrayList对象的容量。如果事先知道将在集合中存储的元素比当前保存的元素多很多，你可能希望这么做。在开始时，一次性增加容量，从而避免以后多次重新分配内存。因为重新分配内存很耗时，阻止不必要的内存分配次数可以提高性能。

ensureCapacity()方法的签名如下：

void ensureCapacity(int cap)

其中，cap指定集合新的最小容量。

相反，如果希望减小ArrayList对象数组的大小，进而使其大小精确的等于当前容纳的元素的数量，可以调用trimToSize()方法，该方法如下所示：

void trimToSize()
</code></pre><p><strong>2.    LinkedList类</strong></p>
<pre><code>LinkedList类扩展了AbstractSequentialList类，实现了List、Deque以及Queue接口，并且它还提供了一种链表数据结构。
LinkedList是泛型类，其声明如下：

class LinkedList&lt;E&gt;

LinkedList具有两个构造函数，如下所示：

LinkedList()
LinkedList(Collection&lt;? extends E&gt; c)
</code></pre><p><strong>3.    HashSet类</strong></p>
<pre><code>HashSet类扩展了AbstractSet类并实现了Set接口，该类用于创建使用哈希表存储元素的集合。HashSet是泛型类，其声明如下：

class HashSet&lt;E&gt;

哈希表使用称之为散列的机制存储信息。在散列机制中，键的信息用于确定唯一的值，称为哈希码。然后将哈希码用作索引，在索引位置存储与键关联的数据。将键转换为哈希码是自动执行的————你永远不会看到哈希码本身。此外，你的代码不能直接索引哈希表。散列机制的优势是add()、contains()、remove()以及size()方法的执行时间保持不变，即使是对于比较大的数组也是如此。

HashSet类定义了一下构造函数：

HashSet()
HashSet(Collection&lt;? extends E&gt; c)
HashSet(int capacity)
HashSet(int capacity,float fillRatio)

HashSet不能保证元素的顺序，注意这一点很重要，因为散列处理的过程通常不创建有序的组。如果需要有序的进行存储，那么需要另外一个组，TreeSet是一个比较好的选择。

下面是演示了HashSet的一个例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class HashSetDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		HashSet&lt;String&gt; hs = new HashSet&lt;String&gt;();</div><div class="line">		</div><div class="line">		hs.add(&quot;Beta&quot;);</div><div class="line">		hs.add(&quot;Alpha&quot;);</div><div class="line">		ha.add(&quot;Eta&quot;);</div><div class="line">		</div><div class="line">		System.out.println(hs);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
[Eta,Beta,Alpha]

正如前面所解释的，元素不是按有序的顺序存储的，精确的输出可能不同。
</code></pre><p><strong>4.    LinkedHashSet类</strong></p>
<pre><code>LinkHashSet类扩展了HashSet类，它没有添加自己的方法。LinkedHashSet是泛型类，其声明如下：

class LinkedHashSet&lt;E

LinkedHashSet维护组中条目的一个链表。链表中条目的顺序也就是插入它们的顺序，这使得可以按照插入顺序迭代集合。换句话说，当使用迭代器遍历LinkedHashSet时，元素将以插入它们的顺序返回。
</code></pre><p><strong>5.    TreeSet类</strong></p>
<pre><code>TreeSet扩展了AbstractSet类并实现了NavigableSet接口，用于创建使用树进行存储的组。对象以升序存储，访问和检索速度相当快，这使得存储大量的、必须能够快速查找到的有序信息来说，TreeSet是极佳选择。

TreeSet是泛型类，其声明如下：

class TreeSet&lt;T&gt;

TreeSet具有如下构造函数：

TreeSet()
TreeSet(Collection&lt;? extends E&gt; c)
TreeSet(Comparator&lt;? super E&gt; comp)
TreeSet(SortedSet&lt;E&gt; ss)

第1种形式构建一个空树，将按照元素的自然顺序以升序进行存储。
第2种形式构建一个包含集合c中元素的树。
第3种形式构建了一个空树，将按照comp指定的比较器进行存储(比较器将在本章后面描述)
第4种形式构建一个包含ss中元素的树。

下面演示TreeSet类的一个例子：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class TreeSetDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();</div><div class="line">		</div><div class="line">		ts.add(&quot;C&quot;);</div><div class="line">		ts.add(&quot;A&quot;);</div><div class="line">		ts.add(&quot;B&quot;);</div><div class="line">		ts.add(&quot;E&quot;);</div><div class="line">		ts.add(&quot;F&quot;);</div><div class="line">		ts.add(&quot;D&quot;);</div><div class="line">		</div><div class="line">		System.out.println(ts);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>该程序输出：
[A,B,C,D,E,F]
</code></pre><p><strong>6.    PriorityQueue类</strong></p>
<pre><code>PriorityQueue扩展了AbstractQueue类并实现了Queue接口，用于创建根据队列的比较器来判定优先次序的队列。
PriorityQueue是泛型类，其声明如下：

class PriorityQueue&lt;E&gt;

PriorityQueue是动态的、按需增长的。

PriorityQueue定义了一下7个构造函数：

PriorityQueue()
PriorityQueue(int capacity)
PriorityQueue(Comparator&lt;? super E&gt; comp) (JDK 8新增)
PriorityQueue(int capacity,Comparator&lt;? super E&gt; comp)
PriorityQueue(Collection&lt;? extends E&gt; c)
PriorityQueue(PriorityQueue&lt;? extends E&gt; c)
PriorityQueue(SortedSet&lt;? extends E&gt; c)

第1个构造函数构建一个空队列，其实容量为11.
第2个构造函数构建一个具有指定初始容量的的队列。
第3个构造函数指定了一个比较器。
第4个构造函数构建具有指定容量和比较器的队列。
最后3个构造函数创建使用参数c传递过来的集合中的元素进行初始化的队列。
对于由这些构造函数创建的所有队列，当添加元素时，容量都会自动增长。

当创建PriorityQueue对象时，如果没有指定比较器，将使用队列中存储数据类型的默认比较器。默认比较器以升序对队列进行排序。但是，通过提供定制的比较器，可以指定不同的排序模式。
</code></pre><p><strong>7.    ArrayDeque类</strong></p>
<pre><code>ArrayDeque扩展了AbstractCollection类并实现了Deque接口，没有添加自己的方法。ArrayDeque是泛型类，其声明如下：

class ArrayDeque&lt;E&gt;

ArrayDeque定义了以下构造函数：

ArrayDeque()
ArrayDeque(int size)
ArrayDeque(Collection&lt;? extends E&gt; c)

下面演示了ArrayDeque，这里使用它来创建一个堆栈：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class ArrayDequeDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		ArrayDeque&lt;String&gt; ad = new ArrayDeque&lt;&gt;();</div><div class="line">		</div><div class="line">		//Use an ArrayDeque like a stack</div><div class="line">		ad.push(&quot;A&quot;);</div><div class="line">		ad.push(&quot;B&quot;);</div><div class="line">		ad.push(&quot;D&quot;);</div><div class="line">		ad.push(&quot;E&quot;);</div><div class="line">		ad.push(&quot;F&quot;);</div><div class="line">		</div><div class="line">		System.out.print(&quot;Poping the stack: &quot;);</div><div class="line">		</div><div class="line">		while(ad.peek() != null)</div><div class="line">		&#123;</div><div class="line">			System.out.print(ad.pop()+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Poping the stack: F E D B A 
</code></pre><p><strong>8.    EnumSet类</strong></p>
<pre><code>EnumSet扩展了AbstractSet类并实现了Set接口，专门用于枚举类型的元素。EnumSet是泛型类，其声明如下：

class EnumSet&lt;E extends EnumSet&lt;E&gt;&gt;

其中，E指定了元素。注意E必须扩展Enum&lt;E&gt;,这强制要求元素必须是指定的枚举类型。
</code></pre><p><strong>18.5 通过迭代器访问集合</strong></p>
<pre><code>迭代器是实现了Iterator或ListIterator接口的对象。Iterator接口允许遍历、获取或移除元素。ListIterator接口扩展了
Iterator接口，允许双向遍历列表，并且允许修改元素。Iterator和ListIterator是泛型接口，它们的声明如下：

interface Iterator&lt;E&gt;
interface ListIterator&lt;E&gt; 
</code></pre><ol>
<li><p>Iterator接口声明的方法：</p>
<p> void forEachRemainning(Consumer&lt;? super E&gt; action):对于集合中为处理的元素，执行action指定的动作(JDK 8 新增)<br> boolean hasNext():如果还有更多的元素，就返回true；否则返回false。<br> E next():返回下一个元素，如果不存在下一个元素，就抛出NoSuchElementException异常<br> void remove():移除当前元素。如果在调用next()方法之前试图调用remove()方法，就会抛出IllegalStateException异常</p>
</li>
<li><p>ListIterator接口声明的方法：</p>
<p> void add(E obj):将obj插入到列表中，新插入的元素位于下一次next()方法调用返回的元素之前。<br> void forEachRemainning(Consumer&lt;? super E&gt; action):对于集合中为处理的元素，执行action指定的动作(JDK 8 新增)<br> boolean hasNext():如果存在下一个元素，就返回true；否则返回false。<br> boolean hasPrevious():如果存在前一个元素，就返回true；否则返回false。<br> E next():返回下一个元素，如果不存在下一个元素，就抛出NoSuchElementException异常<br> int nextIndex():返回下一个元素的索引。如果不存在下一个元素，就返回列表的大小。<br> E previous():返回前一个元素。如果不存在前一个元素，就抛出NoSuchElementException异常<br> int previousIndex():返回前一个元素的索引。如果不存咋前一个元素，返回-1;<br> void remove():从列表中删除当前元素。如果在调用next()或previous()方法之前调用remove()方法，</p>
<pre><code>就会抛出IllegalStateException异常。
</code></pre><p> void set(E obj):将obj赋值给当前的元素，也就是next()或previous()方法调用最后返回的元素。</p>
</li>
</ol>
<p>注意： 从JDK 8开始，也可以使用Spliterator循环遍历集合。Spliterator的工作方式与Iterator不同，稍后将会详解。</p>
<p><strong>18.5.1 使用迭代器</strong></p>
<pre><code>为了能够通过迭代器访问集合，首先必须获得迭代器。每个集合类都提供了iterator()方法，该方法返回一个指向集合开头的迭代器。通过使用这个迭代器对象，可以访问集合中的每个元素，每次访问一个元素。通常为了使用迭代器遍历集合的内容，需要以下步骤：
(1)通过调用集合的iterator()方法，获取指向集合开头的迭代器。
(2)建立一个hasNext()方法调用循环。只要hasNext()返回true，就继续迭代。
(3)在循环中，通过调用next()方法获取每一个元素。

对于实现了List接口的集合可以调用listIterator()方法以获取迭代器。列表迭代器提供了向前和向后两个方向访问集合的能力，并且允许修改元素。除此之外，ListIterator与Iterator的用法类似。

例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class IteratorDemo</div><div class="line">&#123;</div><div class="line">	//Create an array list.</div><div class="line">	ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();</div><div class="line">	</div><div class="line">	//Add elements to the array list.</div><div class="line">	al.add(&quot;C&quot;);</div><div class="line">	al.add(&quot;A&quot;);</div><div class="line">	al.add(&quot;E&quot;);</div><div class="line">	al.add(&quot;B&quot;);</div><div class="line">	al.add(&quot;D&quot;);</div><div class="line">	al.add(&quot;F&quot;);</div><div class="line">	</div><div class="line">	//Use iterator to display contents of al.</div><div class="line">	System.out.println(&quot;Original contents of al: &quot;);</div><div class="line">	Iterator&lt;String&gt; itr = al.iterator();</div><div class="line">	while(itr.hasNext())</div><div class="line">	&#123;</div><div class="line">		String element = itr.next();</div><div class="line">		System.out.print(element+&quot; &quot;);</div><div class="line">	&#125;</div><div class="line">	System.out.println();</div><div class="line">	</div><div class="line">	//Modify objects being iterated.</div><div class="line">	ListIterator&lt;String&gt; litr = al.listIterator();</div><div class="line">	while(litr.hasNext())</div><div class="line">	&#123;</div><div class="line">		String element = litr.next();</div><div class="line">		litr.set(element+&quot;+&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	System.out.print(&quot;Modified contents of al: &quot;);</div><div class="line">	itr = al.iterator();</div><div class="line">	while(itr.hasNext())</div><div class="line">	&#123;</div><div class="line">		String element = itr.next();</div><div class="line">		System.out.print(element+&quot; &quot;);</div><div class="line">	&#125;</div><div class="line">	System.out.println();</div><div class="line">	</div><div class="line">	//Now,display the list backwards.</div><div class="line">	System.out.print(&quot;Modified list backwards: &quot;);</div><div class="line">	while(litr.hasPrevious())</div><div class="line">	&#123;</div><div class="line">		String element = litr.previous();</div><div class="line">		System.out.print(element+&quot; &quot;);</div><div class="line">	&#125;</div><div class="line">	System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Original contents of al: C A E B D F 
Modified contents of al: C+ A+ E+ B+ D+ F+
Modified list backwards: F+ D+ B+ E+ A+ C+
</code></pre><p><strong>18.5.2 使用for-each循环替代迭代器</strong></p>
<pre><code>如果不修改集合的内容，也不用反向获取元素，那么使用for-each风格的for循环遍历集合通常比使用迭代器更方便。请记住，可以使用for循环遍历任何实现了Iterator接口的集合对象。因为所有集合类都实现了这个接口。
</code></pre><p><strong>18.6 Spliterator</strong>  </p>
<pre><code>JDK 8新增了一种叫做spliterator的迭代器，这种迭代器有Spliterator接口定义。Spliterator用于循环遍历元素序列，在
这一点上与刚才介绍过的迭代器类似。但是，使用spliterator的方法与使用迭代器的不同。另外，它提供的功能远比
Iterator或ListIterator多。可能对于Spliterator来说，最重要的一点是它支持并行迭代序列的一部分。Spliterator支持
并行编程。然后，即使用不到并行编程，也可以使用Spliterator。这么做的一个理由是它将hasNext()和next()操作合并到
一个方法中，从而提高效率。

Spliterator是一个泛型接口，其声明如下所示：

interface Spliterator&lt;T&gt;

Spliterator接口声明的几个下面用到的方法：

default void forEachRemainning(Consumer&lt;? super T&gt; action):将action应用到数据源中未被处理的每一个元素。

boolean tryAdvance(Consumer&lt;? super T&gt; action)：
在迭代中的下一个元素上执行action。如果有下一个元素，就返回true；否则返回false；

将Spliterator用于基本迭代任务十分简单：只需要调用tryAdvance()方法，直到其返回false。如果要为序列中的每个元素应用相同的动作，forEachRemainning()提供了一种高效的替代方法。对于这两个方法，在每次迭代中将发生的动作都有
Consumer对象对每个元素执行的操作定义。Consumer是一个函数式接口，向对象应用了一个动作。他是java.util.function
中声明的一个泛型接口。Consumer仅指定了一个抽象方法accept()，如下所示：

void accept(R objRef)

对于tryAdvance()，每次迭代会将序列中的下一个元素传递个objRef。通常，实现Consumer最简单的方法是lambda表达式。

下面的程序给出了Spliterator的一个简单示例。注意，这个程序同时演示了tryAdvance()和forEachRemainning()。另外，还要注意这些方法如何把Iterator的next()和hasNext()方法操作到一个调用中：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class SpliteratorDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		//Create an array list for doubles.</div><div class="line">		ArrayList&lt;Double&gt; vals = new ArrayList&lt;&gt;();</div><div class="line">		</div><div class="line">		vals.add(1.0);</div><div class="line">		vals.add(2.0);</div><div class="line">		vals.add(3.0);</div><div class="line">		vals.add(4.0);</div><div class="line">		vals.add(5.0);</div><div class="line">		</div><div class="line">		//Use tryAdvance() to display contents of vals.</div><div class="line">		System.out.println(&quot;Contents of vals: &quot;);</div><div class="line">		Spliterator spltitr = vals.spliterator();</div><div class="line">		while(spltitr.tryAdvance((n) -&gt; System.out.println(n)));</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Create new list that contains square roots.</div><div class="line">		spltitr = vals.spliterator();</div><div class="line">		ArrayList&lt;Double&gt; sqrs = new ArrayList&lt;&gt;();</div><div class="line">		while(spltitr.tryAdvance((n) -&gt; sqrs.add(Math.sqrt(n))));</div><div class="line">		</div><div class="line">		//Use forEachRemainning() to display contents of sqrs.</div><div class="line">		System.out.println(&quot;Contents of sqrs: &quot;);</div><div class="line">		spltitr = sqrs.spliterator();</div><div class="line">		spltitr.forEachRemainning((n) -&gt; System.out.println(n));</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Contents of vals:
1.0
2.0
3.0
4.0
5.0

Contents of sqrs:
1.0
1.414...
1.732...
2.0
2.236...

虽然这个程序演示了Spliterator的原理，却没有展现其强大的能力。如前所述，在涉及并行处理的地方，Spliterator的最大优势才能体现出来。
</code></pre><p><strong>18.9 使用映射</strong></p>
<pre><code>映射是存储键和值之间关联关系(键值对)的对象。给定一个键，就可以找到对应的值。键和值都是对象。键必须唯一，但是只可以重复。某些映射可以接受null键和null值，其他映射则不能。

关于映射需要注意的关键一点是：它们没有实现Iterator接口。这意味着不能使用for-each风格的for循环遍历映射。此外，不能为映射获取迭代器。但是，正如即将看到的，可以获取映射的集合视图，集合视图允许使用for循环和迭代器。
</code></pre><p><strong>18.9.1 映射接口</strong></p>
<pre><code>支持映射的接口有Map、Map.Entry、NavigableMap和SortedMap。
</code></pre><p><strong>1.    Map接口</strong></p>
<pre><code>Map接口将唯一键映射到值。键是以后用于检索值的对象。给定键和值，可以在Map对象中存储值；存储值以后，可以使用相应的键检索值。Map是泛型接口，其声明如下：

interface Map&lt;K,V&gt;

其中，K指定了键的类型，V指定了值的类型。

映射围绕两个基本方法：get()和put()。为了将值放入映射中，使用put()方法，指定键和值。为了获取值，调用get()方法，传递键作为参数，值会被返回。

尽管映射是集合框架的一部分，但映射不是集合，因为没有实现Collections接口。但是，可以获取映射的集合视图。为此，可以使用entrySet()方法。该方法返回一个包含映射中元素的Set对象。为了获取键的集合视图，使用keySet()方法；为了得到值的集合视图，使用values()方法。对于这3个集合视图，集合都是基于映射的。修改其中的一个集合会影响其他集合。集合视图是将映射集成到更大集合框架中的手段。
</code></pre><p><strong>2.    SortedMap接口</strong></p>
<pre><code>SortedMap接口扩展了Map接口，确保条目以键的升序保存。SortedMap是泛型接口，其声明如下：

interface SortedMap&lt;K,V&gt;
</code></pre><p><strong>3.    NavigableMap接口</strong></p>
<pre><code>NavigableMap接口扩展了SortedMap接口，支持基于最接近匹配原则的条目的检索行为，即支持检索与给定的一个或多个键最相匹配的条目。NavigableMap是泛型接口，其声明如下：

interface NavigableMap&lt;K,V&gt;
</code></pre><p><strong>4.    Map.Entry接口</strong></p>
<pre><code>Map.Entry接口提供了操作映射条目的功能。请记住，Map接口声明的entrySet()方法返回一个包含映射条目的Set对象。组的所有元素都是Map.Entry对象。Map.Entry是泛型接口，起声明如下：

interface Map.Entry&lt;K,V&gt;
</code></pre><p><strong>18.9.2 映射类</strong></p>
<pre><code>AbstractMap:实现了Map接口的大部分
HashMap：扩展了AbstractMap，以使用哈希表
TreeMap：扩展了AbstractMap，以使用树结构
LinkedHashMap：扩展了HashMap，以允许按照插入顺序进行迭代
EnumMap：扩展了AbstractMap，以使用enum键
WeekHashMap:扩展了AbstractMap，以使用带有弱键的哈希表
IdentityHashMap:扩展了AbstractMap，并且当比较文档时使用引用相等性

注意AbstractMap是所有具体映射实现的超类。
</code></pre><p><strong>1.    HashMap类</strong></p>
<pre><code>HashMap扩展了AbstractMap类并实现了Map接口。它使用哈希表存储映射，这使得即使对于比较大的集合，get()和put()方法的执行时间也保持不变。

应当注意哈希映射不保证元素的顺序。所以，向哈希映射添加元素的顺序不一定是通过迭代器读取它们的顺序。

下面的程序演示了HashMap，将名字映射的账户金额。注意获取和使用组视图的方式：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class HashMapDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		HashMap&lt;String,Double&gt; hm = new HashMap&lt;&gt;();</div><div class="line">		</div><div class="line">		hm.put(&quot;John Doe&quot;,new Double(3434.34));</div><div class="line">		hm.put(&quot;Tom Smith&quot;,new Double(123.22));</div><div class="line">		hm.put(&quot;Jane Baker&quot;,new Double(1378.00));</div><div class="line">		hm.put(&quot;Tod Hall&quot;,new Double(99.22));</div><div class="line">		hm.put(&quot;Ralph Smith&quot;,new Double(-19.08));</div><div class="line">		</div><div class="line">		//Get a set of the entries.</div><div class="line">		Set&lt;Map.Entry&lt;String,Double&gt;&gt; set = hm.entrySet();</div><div class="line">		</div><div class="line">		//Display the set.</div><div class="line">		for(Map.Entry&lt;String,Double&gt; me:set)</div><div class="line">		&#123;</div><div class="line">			System.out.print(me.getKey()+&quot;;&quot;)</div><div class="line">			System.out.println(me.getValue());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Deposit 1000 into John Doe&apos;s account.</div><div class="line">		double balance = hm.get(&quot;John Doe&quot;);</div><div class="line">		hm.put(&quot;John Doe&quot;,balance+1000);</div><div class="line">		</div><div class="line">		System.out.println(&quot;John Doe&apos;s new balance: &quot;+hm.get(&quot;John Doe&quot;));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出(精确的顺序可能会有所变化)：
Ralph Smith: -19.08 
Tom Smith: 123.22
John Doe: 3434.34
Tod Hall: 99.22
Jane Baker: 1378.0 

John Doe&apos;s new balance: 4434.34
</code></pre><p><strong>2. TreeMap类</strong></p>
<pre><code>TreeMap扩展了AbstractMap类并实现了NavigableMap接口，该类用于创建存储在树结构中的映射。TreeMap提供了有序存储键/值对的高效手段，并支持快速检索。应当注意，与哈希映射不同，树映射确保元素以键的升序存储。

下面的程序对前面的程序进行了修改，以使用TreeMap类：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class TreeMapDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		TreeMap&lt;String,Double&gt; tm = new TreeMap&lt;&gt;();</div><div class="line">		</div><div class="line">		tm.put(&quot;John Doe&quot;,new Double(3434.34));</div><div class="line">		tm.put(&quot;Tom Smith&quot;,new Double(123.22));</div><div class="line">		tm.put(&quot;Jane Baker&quot;,new Double(1378.00));</div><div class="line">		tm.put(&quot;Tod Hall&quot;,new Double(99.22));</div><div class="line">		tm.put(&quot;Ralph Smith&quot;,new Double(-19.08));</div><div class="line">		</div><div class="line">		Set&lt;Map.Entry&lt;String,Double&gt;&gt; set = tm.entrySet();</div><div class="line">		</div><div class="line">		for(Map.Entry&lt;String,Double&gt; me : set)</div><div class="line">		&#123;</div><div class="line">			System.out.print(me.getKey()+&quot;:&quot;);</div><div class="line">			System.out.println(me.getValue());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Deposit 1000 into John Doe&apos;s account.</div><div class="line">		double balance = tm.get(&quot;John Doe&quot;);</div><div class="line">		tm.put(&quot;John Doe&quot;,balance+1000);</div><div class="line">		</div><div class="line">		System.out.println(&quot;John Doe&apos;s new balance: &quot;+tm.get(&quot;John Doe&quot;));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Jane Baker: 1378.0 
John Doe: 3434.34
Ralph Smith: -19.08 
Tod Hall: 99.22
Tom Smith: 123.22

John Doe&apos;s new balance: 4434.34

注意TreeMap对键进行排序，然而这个例子中，它们根据名(first name)而不是姓(last name)进行排序。正如稍后描述的，在创建映射时，可以通过指定比较器来改变这种行为。
</code></pre><p><strong>3.    LinkedHashMap类</strong></p>
<pre><code>LinkedHashMap扩展了HashMap，在映射中以插入条目的顺序维护一个条目链表，从而可以按照插入顺序迭代整个映射。

也就是说，当遍历LinkedHashMap的集合视图时，将以元素的插入顺序返回元素。也可以创建按照最后访问的顺序返回元素的LinkedHashMa。
</code></pre><p><strong>18.10    比较器</strong> </p>
<pre><code>TreeSet和TreeMap类以有序顺序存储元素。然而，是比较器精确定义了&quot;有序顺序&quot;的含义。默认情况下，这些类使用Java称为&quot;自然顺序&quot;的方式对元素进行排序，自然顺序通常是你所期望的顺序(A在B之前，1在2之前，等等)。如果希望以不同的方式排序元素，可以在构造函组或映射时指定比较器，这样就可以精确控制在有序集合和映射中存储元素的方式。

Comparator是泛型接口，其声明如下：

interface Comparator&lt;T&gt;

在JDK 8之前，Comparator接口只定义了两个方法：compare()和equals()。
compare()方法如下所示，用于比较两个元素以进行排序：

int compare(T obj1,T obj2)

obj1和obj2是要进行比较的对象。在正常情况下，如果对象相等，该方法返回0；如果obj1大于obj2，返回一个正值，反之，返回一个负值。如果要进行比较的对象的类型不兼容，该方法会抛出ClassCastException异常。通过实现compare()方法，可以改变对象的排序方式。例如，为了按照相反的顺序进行排序，可以创建比较器以反转比较的结果。

equals()方法如下所示，用于测试某个对象是否等于比较器：

boolean equals(object obj)

其中，obj是将要进行相等测试的对象。如果obj和调用对象都是比较器，并且使用相同的排序规则，那么该方法返回true；
否则，返回false。不必重写equals()方法，并且大多数简单的比较器都不重写该方法。

在JDK 8后，通过使用默认接口方法和静态接口方法，JDK 8为Comparator添加了许多新功能。下面逐一进行介绍。

通过reserved()方法，可以获得一个比较器，该比较器颠倒了调用reserved()的比较器的排序：

default Comparator&lt;T&gt; reserved()

该方法返回一个颠倒的比较器。

reserseOrder()是与reserve()关联的一个方法，如下所示：

static &lt;T extends Comparable&lt;? super T&gt;&gt; Comparator&lt;T&gt; reserseOrder()

它返回一个颠倒元素的自然顺序的比较器。对应的，通过调用静态的naturalOrder()方法，可以获得一个使用自然顺序的比较器。该方法声明如下所示：

static &lt;T extends Comparable&lt;? super T&gt;&gt; Comparator&lt;T&gt; natualOrder()

如果希望比较器能够处理null值，需要使用下面的nullsFirst()和nullsLast()方法：

static &lt;T&gt; Comparator&lt;T&gt; nullsFirst(Comparator&lt;? super T&gt; comp)
static &lt;T&gt; Comparator&lt;T&gt; nullsLast(Comparator&lt;? super T&gt; comp)

nullsFirst()方法返回的比较器认为null比其他值小，nullLast()方法返回的比较器认为null比其他值大。对于这两个方法，如果被比较的两个值都是非null值，则comp执行比较。如果为comp赋值null，则认为所有非null值都是相等的。

JDK 8添加的另一个默认方法是thenComparing()。该方法返回一个比较器，当第一次比较的结果指出被比较的结果相等时，
返回的这个比较器将执行第二次比较。因此，可以使用该方法创建一个&quot;根据X比较，然后根据Y比较&quot;的序列。例如，当比较城市时，第一次可能比较城市名，第二次可能比较州名。如果城市名相同，则在比较州名。

thenComparing()方法有三种形式。
第一种形式如下所示：它允许通过传入Comparator的实例来指定第二个比较器。

default Comparator&lt;T&gt; thenComparing(Comparator&lt;? super T&gt; thenByComp)

其中，thenByComp指定在第一次比较返回相等后调用的比较器。

thenComparing()的另外两个版本允许指定标准函数式接口Function，如下所示：

default &lt;U extends Comparator&lt;? super U&gt;&gt; Comparator&lt;T&gt; 
    thenComparing(Function&lt;? super T,? extends U&gt; getKey)

default &lt;U extends Comparator&lt;? super U&gt;&gt; Comparator&lt;T&gt; 
    thenComparing(Function&lt;? super T,? extends U&gt; getKey,Comparator&lt;? super U&gt; keyComp)

在这两个版本中，getKey引用的函数用于获得下一个比较键，当第一次比较返回相等后，将使用这个比较键。后一个版本中的keyComp指定了用于比较键的比较器(U指定了键的类型)。
</code></pre><p>使用比较器：</p>
<pre><code>下面演示了一个自定义比较器功能的例子。该例为字符串实现了compare()方法，以与正常顺序相反的顺序进行操作。因此，这将导致树组(tree set)以相反的顺序进行存储。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class MyComp implements Comparator&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	public int compare(String aStr,String bStr)</div><div class="line">	&#123;</div><div class="line">		//Reverse the comparison</div><div class="line">		return bStr.compareTo(aStr);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class CompDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;(new MyComp());</div><div class="line">		</div><div class="line">		ts.add(&quot;C&quot;);</div><div class="line">		ts.add(&quot;A&quot;);</div><div class="line">		ts.add(&quot;B&quot;);</div><div class="line">		ts.add(&quot;E&quot;);</div><div class="line">		ts.add(&quot;F&quot;);</div><div class="line">		ts.add(&quot;D&quot;);</div><div class="line">		</div><div class="line">		for(String element : ts)</div><div class="line">		&#123;</div><div class="line">			System.out.print(element+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
F E D C B A 


尽管上面的程序实现逆序比较器的方法完全可以接受，但是从JDK8开始，还有另外一种方法可以获得解决方案。
即，现在可以简单的对自然顺序比较器调用reversed()方法。该方法返回一个等价的比较器，不过比较器的顺序是相反的。
例如，在前面的程序中，可以把MyComp重写为自然顺序的比较器，如下所示：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class MyComp implements Comparator&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	public int compare(String aStr,String bStr)</div><div class="line">	&#123;</div><div class="line">		return aStr.compareTo(bStr);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>然后，可以使用下面的代码段创建一个反向排序字符串元素的TreeSet:

MyComp mc = new MyComp();

TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;(mc.reserved());

如果把这段新代码放到前面的程序中，得到的结果与原来的一样。在这个例子中，使用reversed()方法没有什么优势。但是，当需要同时创建自然顺序和反向顺序的比较器时，使用reversed()方法能够方便的获得逆序比较器，而不需要显示对其编码。

从JDK 8开始，在前面的例子中，实际上没有必要创建MyComp类，因为可以很方便的使用lambda表达式作为替代。
例如，可以彻底删除MyComp类，使用下面的代码创建字符串比较器:

Comparator&lt;String&gt; mc = (aStr,bStr)-&gt;aStr.compareTo(bStr);

另外还有一点：在这个简单的示例中，通过使用lambda表达式，可以在对TreeSet()构造函数的调用中直接指定逆序比较器，如下所示：

TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;((aStr,bStr) -&gt; bStr.compareTo(aStr));

做了上述修改后，程序得以显著缩短。下面显示了最终版本：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class CompDemo2</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;((aStr,bStr) -&gt; bStr.compareTo(aStr));</div><div class="line">		</div><div class="line">		ts.add(&quot;C&quot;);</div><div class="line">		ts.add(&quot;A&quot;);</div><div class="line">		ts.add(&quot;B&quot;);</div><div class="line">		ts.add(&quot;E&quot;);</div><div class="line">		ts.add(&quot;F&quot;);</div><div class="line">		ts.add(&quot;D&quot;);</div><div class="line">		</div><div class="line">		for(String element : ts)</div><div class="line">		&#123;</div><div class="line">			System.out.print(element+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>作为使用自定义比较器的更实际的例子，下面的程序是前面显示的存储账户余额的TreeMap程序的升级版。在前面的版本中，账户根据名字进行存储，但排序是从名开始的。下面的程序根据姓对账户进行排序。为此，使用比较器比较每个账户的姓，这会使得映射根据姓进行排序。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class TComp implements Comparator&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	public int compare(String aStr,String bStr)</div><div class="line">	&#123;</div><div class="line">		int i,j,k;</div><div class="line">		</div><div class="line">		i = aStr.lastIndexOf(&apos; &apos;);</div><div class="line">		j = bStr.lastIndexOf(&apos; &apos;);</div><div class="line">		</div><div class="line">		k = aStr.subString(i).compareToIgnoreCase(bStr.subString(j));</div><div class="line">		if(k == 0)	//last name match,check entire name</div><div class="line">		&#123;</div><div class="line">			return aStr.compareToIgnoreCase(bStr);</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			return k;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class TreeMapDemo2</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		TreeMap&lt;String,Double&gt; tm = new TreeMap&lt;&gt;(new TComp());</div><div class="line">		</div><div class="line">		tm.put(&quot;John Doe&quot;,new Double(3434.34));</div><div class="line">		tm.put(&quot;Tom Smith&quot;,new Double(123.22));</div><div class="line">		tm.put(&quot;Jane Baker&quot;,new Double(1378.00));</div><div class="line">		tm.put(&quot;Tod Hall&quot;,new Double(99.22));</div><div class="line">		tm.put(&quot;Ralph Smith&quot;,new Double(-19.08));</div><div class="line">		</div><div class="line">		Set&lt;Map.Entry&lt;String,Double&gt;&gt; set = tm.entrySet();</div><div class="line">		</div><div class="line">		for(Map.Entry&lt;String,Double&gt; me : set)</div><div class="line">		&#123;</div><div class="line">			System.out.print(me.getKey()+&quot;:&quot;);</div><div class="line">			System.out.println(me.getValue());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Deposit 1000 into John Doe&apos;s account.</div><div class="line">		double balance = tm.get(&quot;John Doe&quot;);</div><div class="line">		tm.put(&quot;John Doe&quot;,balance+1000);</div><div class="line">		</div><div class="line">		System.out.println(&quot;John Doe&apos;s new balance: &quot;+tm.get(&quot;John Doe&quot;));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Jane Baker: 1378.0 
John Doe: 3434.34
Tod Hall: 99.22
Ralph Smith: -19.08     
Tom Smith: 123.22

John Doe&apos;s new balance: 4434.34

比较器类TComp比较包含名和姓的两个字符串。该类首先比较姓，如果姓相同的话，在根据名进行排序。

如果使用的是JDK 8或更高版本，还有另一种方法来编码前面的程序，让映射首先根据姓进行排序，然后根据名进行排序。
这会用到thenComparing()方法。回忆一下，thenComparing()允许指定第二个比较器，当调用比较器返回相等时，就会使用第二个比较器。下面的程序演示了这种方法，它修改了前面的程序，使之使用thenComparing()方法。 
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">//A comparator that compares last names.</div><div class="line">class CompLastNames implements Comparator&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	public int compare(String aStr,String bStr)</div><div class="line">	&#123;</div><div class="line">		int i,j;</div><div class="line">	</div><div class="line">		i = aStr.lastIndexOf(&apos; &apos;);</div><div class="line">		j = bStr.lastIndexOf(&apos; &apos;);</div><div class="line">	</div><div class="line">		return aStr.subString(i).compareToIgnoreCase(bStr.subString(j));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Sort by entire name when last names are equals.</div><div class="line">class CompThenByFirstName implements Comparator&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	public int compare(String aStr,String bStr)</div><div class="line">	&#123;			</div><div class="line">		return aStr.compareToIgnoreCase(bStr);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class TreeMapDemo2A</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		CompLastNames compLN = new CompLastNames();</div><div class="line">		Comparator&lt;String&gt; compLastThenFirst = compLN.thenComparing(new CompThenByFirstName());</div><div class="line">		</div><div class="line">		TreeMap&lt;String,Double&gt; tm = new TreeMap&lt;&gt;(compLastThenFirst);</div><div class="line">		</div><div class="line">		tm.put(&quot;John Doe&quot;,new Double(3434.34));</div><div class="line">		tm.put(&quot;Tom Smith&quot;,new Double(123.22));</div><div class="line">		tm.put(&quot;Jane Baker&quot;,new Double(1378.00));</div><div class="line">		tm.put(&quot;Tod Hall&quot;,new Double(99.22));</div><div class="line">		tm.put(&quot;Ralph Smith&quot;,new Double(-19.08));</div><div class="line">		</div><div class="line">		Set&lt;Map.Entry&lt;String,Double&gt;&gt; set = tm.entrySet();</div><div class="line">		</div><div class="line">		for(Map.Entry&lt;String,Double&gt; me : set)</div><div class="line">		&#123;</div><div class="line">			System.out.print(me.getKey()+&quot;:&quot;);</div><div class="line">			System.out.println(me.getValue());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Deposit 1000 into John Doe&apos;s account.</div><div class="line">		double balance = tm.get(&quot;John Doe&quot;);</div><div class="line">		tm.put(&quot;John Doe&quot;,balance+1000);</div><div class="line">		</div><div class="line">		System.out.println(&quot;John Doe&apos;s new balance: &quot;+tm.get(&quot;John Doe&quot;));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>这个版本产生的输入与原来的版本相同，二者唯一的区别在于完成的工作方法。

最后，注意为了清晰起见，本例显示创建了两个比较器类CompLastNames和ComThenByFirstName，但是其实也可以使用
lambda表达式。例如：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; compLastName = (aStr,bStr)-&gt;</div><div class="line">   &#123;</div><div class="line">       int i,j;</div><div class="line"></div><div class="line">       i = aStr.lastIndexOf(&apos; &apos;);</div><div class="line">       j = bStr.lastIndexOf(&apos; &apos;);</div><div class="line"></div><div class="line">       return aStr.substring(i).compareToIgnoreCase(bStr.substring(j));</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   Comparator&lt;String&gt; compThenFirstName = (aStr,bStr)-&gt;aStr.compareToIgnoreCase(bStr);</div><div class="line"></div><div class="line">   Comparator&lt;String&gt; comp = compLastName.thenComparing(compThenFirstName);</div><div class="line"></div><div class="line">   TreeMap&lt;String,Double&gt; tm = new TreeMap&lt;&gt;(comp);</div></pre></td></tr></table></figure>
<p><strong>18.11 集合算法</strong></p>
<pre><code>集合框架定义了一些可以应用于集合和映射的算法，这些算法被定义为Collections类中的静态方法中，可以自行查看
Collections类的源码查看这些函数。

注意有些方法用于获取各种集合的同步(线程安全的)副本，例如synchronizedList()和synchronizedSet()。作为一般规则
，标准集合实现不是同步的。必须使用同步算法提供同步。另外一点：同步集合的迭代器必须在synchronized代码块中使用

以unmodifiable开始的一组方法集返回各种不能修改的集合视图。如果希望确保对集合进行某些读取操作——但是不允许写入操作，这些方法是有用的。

下面的程序演示了一些算法，创建并初始化一个链表。reverseOrder()方法返回翻转Integer对象比较结果的比较器。列表元素根据这个比较器进行排序，然后显示。接下来，调用shuffle()方法以随机化链表，然后显示链表中的最大值和最小值
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class AlgorithmsDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		LinkedList&lt;Integer&gt; ll = new LinkedList&lt;Integer&gt;();</div><div class="line">		ll.add(-8);</div><div class="line">		ll.add(20);</div><div class="line">		ll.add(-20);</div><div class="line">		ll.add(8);</div><div class="line">		</div><div class="line">		//Create a reserve order comparator.</div><div class="line">		Comparator&lt;Integer&gt; r = Collections.reserseOrder();</div><div class="line">		</div><div class="line">		//Sort list by using the comparator.</div><div class="line">		Collections.sort(ll,r);</div><div class="line">		</div><div class="line">		System.out.print(&quot;List sorted in reverse: &quot;);</div><div class="line">		for(int i : ll)</div><div class="line">		&#123;</div><div class="line">			System.out.print(i+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		</div><div class="line">		//Shuffle list.</div><div class="line">		Collections.shuffle(ll);</div><div class="line">		</div><div class="line">		//Display randomized list.</div><div class="line">		System.out.print(i+&quot; &quot;);</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">		System.out.println(&quot;Mininum: &quot;+Collections.min(ll));</div><div class="line">		System.out.println(&quot;Maxinum: &quot;+Collections.max(ll));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
List sorted in reserve: 20 8 -8 -20 
List shuffled: 20 -20 8 -8 
Mininum: -20 
Maxinum: 20 

注意是在随机化后，才对链表进行min()和max()操作的。这两个方法的操作都不要求列表是排序过的。
</code></pre><p><strong>18.12    Arrays类</strong></p>
<pre><code>Arrays类提供了对数组操作有用的方法，这些方法有助于连接集合和数组。

asList()方法返回基于指定数组的列表。
static &lt;T&gt; List asList(T ...array)
其中，array是包含数据的数组。

binarySeach()方法使用二分搜索法查找特定数值。

copyOf()方法返回数组的副本。

copyOfRange()方法返回数组中某个范围的副本。

fill()方法可以将某个值赋给数组中的所有元素。

sort()方法用于对数组进行排序。

JDK 8为Arrays类添加了一些新的方法，其中最重要的可能是parallelSort()方法，因为该方法按升序对数组的各部分
进行并行排序，然后合并结果。这种方法可以显著加速排序时间。

通过包含spliterator()方法，JDK 8为Arrays类添加了对spliterator的支持。该方法有两种基本形似。
第一种版本返回整个数组的spliterator,如下所示： 

static&lt;T&gt; Spliterator spliterator(T array[])

这里，array是spliterator将循环遍历的数组。第二种版本的spliterator()方法允许指定希望进行迭代的数组范围。

从JDK 8开始，通过包含stream()方法，Arrays类支持新的Stream接口。stream()方法有两个版本，下面显示了第一个
版本：

static&lt;T&gt; Stream stream(T array[])

这里，array是流将引用的数组。第二种版本的stream()方法允许指定数组内的一个范围。

除了刚才讨论的方法，JDK 8还添加了另外3个新方法。其中两个彼此相关：setAll()和parallelSetAll()。这两个方法
都是为所有元素赋值，但是parallelSetAll()以并行方式工作。

最后JDK 8还为Arrays类添加了一个有意思的方法：parallelPrefix().该方法对数组进行修改，使每个元素都包含对其
前面所有元素应用某个操作的累积结果。


下面演示了如何使用Arra类的一些方法：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line"></div><div class="line">class ArraysDemo</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		//Allocate and initialize array.</div><div class="line">		int[] array = new int[10];</div><div class="line">		for(int i=0; i&lt;10; i++)</div><div class="line">		&#123;</div><div class="line">			array[i] = -3*i;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//Display,sort,and display the array.</div><div class="line">		System.out.print(&quot;Original contents: &quot;);</div><div class="line">		display(array);</div><div class="line">		Arrays.sort(array);</div><div class="line">		System.out.print(&quot;Sorted: &quot;);</div><div class="line">		display(array);</div><div class="line">		</div><div class="line">		//Fill and display the array.</div><div class="line">		Arrays.fill(array,2,6,-1);</div><div class="line">		System.out.print(&quot;After fill(): &quot;);</div><div class="line">		display(array);</div><div class="line">		</div><div class="line">		//Sorted and display the array.</div><div class="line">		Arrays.sort(array);</div><div class="line">		System.out.println(&quot;After sorting again: &quot;);</div><div class="line">		display(array);</div><div class="line">		</div><div class="line">		//Binary seach for -9;</div><div class="line">		System.out.print(&quot;The value -9 is at location: &quot;);</div><div class="line">		int index = Arrays.binarySeach(array,-9);</div><div class="line">		System.out.println(index);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	static void display(int[] array)</div><div class="line">	&#123;</div><div class="line">		for(int i : array)</div><div class="line">		&#123;</div><div class="line">			System.out.print(i+&quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>输出：
Original contents: 0 -3 -6 -9 -12 -15 -18 -21 -24 -27
Sorted: -27 -24 -21 -18 -15 -12 -9 -6 -3 -0 
After fill(): -27 -24 -1 -1 -1 -1 -9 -6 -3 0
After sorting again: -27 -24 -9 -6 -3 -1 -1 -1 -1 0
The value -9 is at location: 2
</code></pre><p><strong>18.13    遗留的类和接口</strong></p>
<pre><code>在本章开头解释过，早期版本的java.util包没有包含集合框架，而是定义了几个类和一个接口，用来提供存储对象的专业方法。

本章介绍的所有现代集合类都不是同步的，但是所有遗留类都是同步的，有些情况这一差别很重要。当然，通过使用
Collections提供的算法，可以很容易的同步集合。

java.util定义的遗留类如下所示：
Dictionary    Hashtable    Properies    Stack    Vector 
还有遗留接口Enumeration.

此处，就介绍遗留类和接口的介绍了。
</code></pre><p>出自：《Java 8编程参考官方教程(第9版)》</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala访问控制修饰符]]></title>
      <url>http://freeshow.github.io/2016/07/23/Scala%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>参考自《Programming in Scala》</p>
<h2 id="一、访问控制修饰符"><a href="#一、访问控制修饰符" class="headerlink" title="一、访问控制修饰符"></a>一、访问控制修饰符</h2><p>包的成员,类或对象可以使用访问控制修饰符,比如 private 和 protected 来修饰,通过这些修饰符可以控制其他部分对这些类,对象的访问。Scala 和访问控制大体上和 Java 类似,但也有些重要的不同,本篇将介绍这些。</p>
<h3 id="私有成员"><a href="#私有成员" class="headerlink" title="私有成员"></a>私有成员</h3><p>Scala的私有成员和Java类似,一个使用 private修饰过的类或对象成员,只能在该类或对象中访问,在Scala中,也可以在嵌套的类或对象中使用。比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Outer</div><div class="line">&#123;</div><div class="line">    class Inner</div><div class="line">    &#123;</div><div class="line">        private def f() &#123;println(&quot;f&quot;)&#125;</div><div class="line"></div><div class="line">        class InnerMost</div><div class="line">        &#123;</div><div class="line">            f() //OK</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    (new Inner).f() //错误，f不可访问</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Scala中,(new Inner).f()是不合法的,因为它是在Inner中定义的私有类型,而在InnerMost中访问f却是合法的,这是因为 InnerMost 是包含在Inner的定义中(子嵌套类型)。<br>在Java语言中,两种访问都是可以的。Java允许外部类型访问其包含的嵌套类型的私有成员。</p>
<h3 id="保护成员"><a href="#保护成员" class="headerlink" title="保护成员"></a>保护成员</h3><p>和私有成员类似,Scala的访问控制比Java来说也是稍显严格些。在 Scala中,由protected定义的成员只能由定义该成员和其派生类型访问。而在 Java中,由protected定义的成员可以由同一个包中的其它类型访问。在Scala中,可以通过其它方式来实现这种功能。</p>
<p>下面为protected的一个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package p</div><div class="line">&#123;</div><div class="line">    class Super</div><div class="line">    &#123;</div><div class="line">        protected def f()&#123;println(&quot;f&quot;)&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class Sub extends Super</div><div class="line">    &#123;</div><div class="line">        f() //OK</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class Other</div><div class="line">    &#123;</div><div class="line">        (new Super).f() //Error:f不可访问</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="公共成员"><a href="#公共成员" class="headerlink" title="公共成员"></a>公共成员</h3><p>public访问控制为Scala定义的缺省方式,所有没有使用private和 protected修饰的成员(定义的类和方法)都是“公开的”,这样的成员可以在任何地方被访问。Scala不需要使用public来指定“公开访问”修饰符。</p>
<p>注意：Scala中定义的类和方法默认都是public的，但在类中声明的属性默认是private的。</p>
<h2 id="二、为访问控制修饰符添加作用域"><a href="#二、为访问控制修饰符添加作用域" class="headerlink" title="二、为访问控制修饰符添加作用域"></a>二、为访问控制修饰符添加作用域</h2><p>Scala 的访问修饰符可以添加作用域参数。作用域的语法如下:<br>private[x]或protected[x]<br>其中x代表某个包,类或者单例对象,表示可以访问这个private或 protected的范围直到X。</p>
<p>通过为访问修饰符添加作用域参数,可以非常精确的控制所定义的类型能够被其它类型访问的范围。尤其是可以支持Java语言支持的 package private,package protected 等效果。</p>
<p>下面的例子为这种用法的一个示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package bobsrockets</div><div class="line">&#123;</div><div class="line">    package navigation</div><div class="line">    &#123;</div><div class="line">    	//如果为private class Navigator,则类Navigator只会对当前包navigation中所有类型可见。</div><div class="line">        //即private默认省略了[X],X为当前包或者当前类或者当前单例对象。</div><div class="line">        //private[bobsrockets]则表示将类Navigator从当前包扩展到对bobsrockets包中的所有类型可见。</div><div class="line">        private[bobsrockets] class Navigator</div><div class="line">        &#123;</div><div class="line">            protected[navigation] def useStarChart() &#123;&#125;</div><div class="line">            class LegOfJourney</div><div class="line">            &#123;</div><div class="line">                private[Navigator] val distance = 100</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            private[this] var speed = 200</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    package launch</div><div class="line">    &#123;</div><div class="line">        import navigation._</div><div class="line">        object Vehicle</div><div class="line">        &#123;</div><div class="line">        	//private val guide：表示guide默认被当前单例对象可见。</div><div class="line">            //private[launch] val guide：表示guide由默认对当前单例对象可见扩展到对launch包中的所有类型可见。</div><div class="line">            private[launch] val guide = new Navigator</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个例子中,类Navigator使用 private[bobsrockets] 来修饰,这表示这个类可以被bobsrockets包中所有类型访问,比如通常情况下 Vehicle无法访问私有类型Navigator,但使用包作用域之后,Vechile 中可以访问Navigator。</p>
<p>private的限定词还可以被执行所属类和对象。例如代码中类LegOfJourney<br>中的distance变量被标记为private[Navigator],表示它在Navigator类的任何地方都可见。这种访问能力与Java里的内部类的私有成员一致。</p>
<p>所有的限定词也可以用于protected，与private意思相同。也就是说，C类里的protected[X]修饰符允许C的所有子类及修饰符所属的包、类或者对象X访问带有此标记的定义。例如代码中的useStartChart方法能被类Navigator的所有子类以及包含在navigator中的所有代码访问。</p>
<p>这种技巧在分散在多个 Package 的大型项目时非常有用,它允许你定义一些在多个子包中可以访问,但对使用这些API的外部客户代码隐藏,而这种效果在Java中是无法实现的。</p>
<p>此外,Scala还支持一种比private还要严格的访问控制,本例中的 private[this],只允许在定义该成员的类型中访问,它表示该成员不仅仅只能在定义该成员的类型中访问,而且只能是由该类型本身访问，这种定义被称为对象私有。比如:本例中speed,使用protected[this]修饰,因此在Navigator类内部访问speed和this.speed是合法的。然而一下的访问，即使发生在Navigator类内部也是不允许的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var other = new Navigator</div><div class="line">other.speed	//error:此行不能编译</div></pre></td></tr></table></figure>
<p>把成员标记为private[this]可以保证它不能被同一个类中其它对象访问。</p>
<p>注意：如果speed被private修饰，则上面的代码可以编译。</p>
<p>现在如果将这些组合应用到LegOfJourney.distance上，会有什么样的效果：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>公开访问</th>
</tr>
</thead>
<tbody>
<tr>
<td>private[bobsrockets]</td>
<td>在外部包中访问</td>
</tr>
<tr>
<td>private[navigation]</td>
<td>与Java的包可见度相同(包内可见)</td>
</tr>
<tr>
<td>private[Navigator]</td>
<td>与Java的private相同(类内可见)</td>
</tr>
<tr>
<td>private[LegOfJourney]</td>
<td>与Scala中的private相同(本类中可见，父类中不可见)</td>
</tr>
<tr>
<td>private[this]</td>
<td>只有同一个对象中可见</td>
</tr>
</tbody>
</table>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala类]]></title>
      <url>http://freeshow.github.io/2016/07/23/Scala%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Scala类"><a href="#Scala类" class="headerlink" title="Scala类"></a>Scala类</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li>类里的属性必须赋初值。</li>
<li>def函数时如果没参数可不带括号。</li>
<li>类中的字段自动带有getter方法和setter方法。</li>
<li>可以用定制的getter/setter方法替换掉字段的定义，而不必修改使用类的客户端—-这就是“统一访问原则”。</li>
<li>用@BeanProperty注解来生成JavaBeans的getXxx/setXxx方法。</li>
<li>每个类都有一个主构造器，这个构造器和类定义“交织”在一起。它的参数直接成为类的字段，主构造器执行类体中所有的语句。</li>
<li>辅助构造器是可选的，它们叫做this。</li>
</ul>
<p>在Scala源文件中，可以包含多个类，所有这些类都具有共有可见性。<br>Scala对每个字段都提供setter和getter方法，比如class Person{var age = 0}，Scala生成面向JVM的类，其中有一个私有的age字段以及相应的getter和setter方法，这两个方法是公有的，如果age是私有的，那么相应的getter和setter也是私有的，在Scala中，getter和setter分别叫做age和age_=。默认的getter和setter是由Scala自动生成，但是你也可以手动生成，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">&#123;</div><div class="line">  private var privateAge = 0</div><div class="line">  //自定义getter方法</div><div class="line">  def age = privateAge</div><div class="line">  //自定义setter方法</div><div class="line">  def age_=(newAge: Int)</div><div class="line">  &#123;</div><div class="line">    if (newAge &gt; privateAge) privateAge = newAge</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object HelloWorld</div><div class="line">&#123;</div><div class="line">  def main(args: Array[String])</div><div class="line">  &#123;</div><div class="line">    var p = new Person()</div><div class="line">    //其实是执行的p.age_=(11)即自定义setter方法。</div><div class="line">    p.age = 11</div><div class="line">    p.age_=(1) //设置age的值，但是该调用其实相当于调用setter方法，在setter方法中有控制语句，所以该句话不起作用</div><div class="line">    //p.age其实是执行的上面自定义getter方法。</div><div class="line">    println(p.age) //取出age的值，相当于getter方法</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="统一访问原则"><a href="#统一访问原则" class="headerlink" title="统一访问原则"></a>统一访问原则</h3><p>由Eiffel语言的发明者Bertrand Meyer提出，内容是“某个模块提供的所有服务都应该能通过统一的表示法访问到，至于它们是通过存储还是通过计算来实现的，从访问方式上应无从获知”。</p>
<p>Scala对setter和getter的控制：</p>
<ol>
<li>如果字段是私有的，则getter和setter方法也是私有的</li>
<li>如果字段是val，则只有getter方法被生成</li>
<li>如果你不需要任何getter和setter，可以将字段声明为private[this]</li>
</ol>
<p>总结，在实现属性时有如下四种选择：</p>
<ol>
<li>var foo:Scala自动合成一个getter和setter</li>
<li>val foo:Scala自动合成getter</li>
<li>由你来定义foo和foo_=方法</li>
<li>由你来定义foo方法</li>
</ol>
<h3 id="对象私有字段"><a href="#对象私有字段" class="headerlink" title="对象私有字段"></a>对象私有字段</h3><p>private[this] var value = 0//类似于某个对象.value这样的访问将不被允许这时候，value就是对象私有的，其他同一个类的对象也无法访问到，对象私有的字段，Scala不会生成getter或setter方法。</p>
<h3 id="Bean属性"><a href="#Bean属性" class="headerlink" title="Bean属性"></a>Bean属性</h3><p>如果你将Scala对象标注为@BeanProperty时，例如：@BeanProperty var name : String = _<br>将会生成四个方法：</p>
<ol>
<li>name:String</li>
<li>name_=(newValue:String):Unit</li>
<li>getName():String</li>
<li>setName(newValue:String):Unit</li>
</ol>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>Scala中定义的类默认都是public的，在类中声明的属性默认是private的，并且Scala会生成默认的get和set的方法。</p>
<p><strong>1.var age = 0</strong></p>
<p>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Student</div><div class="line">&#123;</div><div class="line">	//age默认是private级别的，并且会有默认的公有getter和setter方法</div><div class="line">    //因为getter和setter方法是公有的，故生成的此类的对象可以引用getter和setter方法。</div><div class="line">     var age = 0</div><div class="line">&#125;</div><div class="line"></div><div class="line">object StudentDemo</div><div class="line">&#123;</div><div class="line">	def main(args:Array[String]):Unit =</div><div class="line">    &#123;</div><div class="line">    	var student = new Student</div><div class="line">        student.age = 25</div><div class="line">        println(student.age) //输出25</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码中<br>student.age = 25 等价于student.age_ = (25)<br>即student.age = 25表示引用age属性的setter方法。<br>println(studeng.age)中student.age表示引用age属性的getter方法。因为属性age是私有的，故不可能是引用的age属性，而是引用的age属性的方法。</p>
<p><strong>2.private var age = 0</strong></p>
<p>如果在声明的属性前加上 private修饰，那么要想访问这个属性必须定义get方法，要想给这个属性赋值必须定义set方法<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Student</div><div class="line">&#123;</div><div class="line">	//该属性必须定义它的getter和setter方法，否则生成的对象不能引用该属性</div><div class="line">    //因为privateAge属性生成的getter和setter是私有的</div><div class="line">    private var privateAge = 0</div><div class="line"></div><div class="line">    //下面两个函数实现了age属性</div><div class="line">    //age属性的getter方法</div><div class="line">    def age = privateAge</div><div class="line">    //age属性的setter方法</div><div class="line">    def age_=(newAge:Int)</div><div class="line">    &#123;</div><div class="line">    	if(newAge &gt; privateAge)privateAge = newAge</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object StudentDemo</div><div class="line">&#123;</div><div class="line">	val student = new Student</div><div class="line">    //age的setter方法，即student.age_=(25)</div><div class="line">    student.age = 25</div><div class="line">    //age的getter方法</div><div class="line">    println(student.age) //输出：25</div><div class="line">    student.age_=(1)</div><div class="line">    println(student.age) //输出：25</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3.private[this] var privateAge = 0</strong></p>
<p>如果在上面的基础上再进行修改成如下代码，那么情况就又会有所不同，下面的代码在private的后面有加了[this]，那么说明该属性只允许当前对象中的方法访问，其它对象中的方法不能访问。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Student &#123;</div><div class="line">	//该属性必须定义它的get和set方法，否则生成的对象不能引用该属性</div><div class="line">    private[this] var privateAge = 0</div><div class="line">    def age = privateAge</div><div class="line">    def age_=(newAge:Int)</div><div class="line">    &#123;</div><div class="line">    	if(newAge &gt; privateAge) privateAge = newAge</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //该对象中的isYounger方法不能访问other对象中的privateAge属性</div><div class="line">    //Error</div><div class="line">    def isYounger(other:Student)  = privateAge &lt; other.privateAge</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>Scala类有一个构造器比其他所有构造器都更为重要，它就是主构造器，除了主构造器之外，类还有任意多的辅助构造器，辅助构造器的特点如下：</p>
<ol>
<li>辅助构造器的名称为this。</li>
<li>每一个辅助构造器都必须以一个对先前已定义的其他辅助构造器或主构造器的调用开始。</li>
</ol>
<p>在Scala中，如果没有显式定义主构造器，则自动拥有一个无参的主构造器，主构造器并不以this方法定义，而是与类定义交织在一起。<br>主构造器的参数直接放置在类名之后，称为类参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Person(val name: String, val age: Int)</div><div class="line">&#123;</div><div class="line">  //类参数(...)中的内容就是主构造器中的内容</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果类名之后没有参数，则该类具备一个无参主构造器。这样一个构造器仅仅是简单地执行类体中的所有语句而已。</p>
<table>
<thead>
<tr>
<th>主构造器参数</th>
<th>生成的字段/方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>name:String</td>
<td>对象私有字段</td>
</tr>
<tr>
<td>private val/var name:String</td>
<td>私有字段，私有的getter/setter方法</td>
</tr>
<tr>
<td>val/var name:String</td>
<td>私有字段，公有的getter/setter方法</td>
</tr>
<tr>
<td>@BeanProperty val/var name:String</td>
<td>私有字段，公有的Scala版和JavaBean版getter/setter方法</td>
</tr>
</tbody>
</table>
<p>如果想让主构造器变成私有的，可以这样放置private关键字：<br>class Person private (val id : Int){…}；这样用户就必须通过辅助构造器来构造Person对象</p>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在Scala中，你几乎可以在任何语法结构中内嵌任何语法结构，你可以在函数中定义函数，在类中定义类。要构造一个新的内部对象，只需要简单的new这个类名（new 外部类.内部类）。在内嵌类中，你可以通过外部类.this的方式来访问外部类的this引用，还可以用如下语法建立一个指向该引用的别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class NetWork(val name: String)</div><div class="line">&#123;</div><div class="line">	//语法使得outer变量指向NetWork.this。</div><div class="line">    //对这个变量，可以使用任何合法的名称</div><div class="line">	outer =&gt;</div><div class="line"></div><div class="line">	class Member(val name: String)</div><div class="line">    &#123;</div><div class="line">    	def description = name + &quot; inside &quot; + outer.name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>在Java中内部类属于外部类，而在Scala中内部类属于外部类的实例。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Outer(val name:String)</div><div class="line">&#123;</div><div class="line">    outer =&gt;</div><div class="line"></div><div class="line">    class Inner(val name:String)</div><div class="line">    &#123;</div><div class="line">        def foo(b:Inner) =</div><div class="line">            println(&quot;Outer: &quot;+outer.name+&quot; Inner: &quot;+b.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object OPPInScala</div><div class="line">&#123;</div><div class="line">    def main(args: Array[String])</div><div class="line">    &#123;</div><div class="line">        val outer1 = new Outer(&quot;Hadoop&quot;)</div><div class="line">        val outer2 = new Outer(&quot;Spark&quot;)</div><div class="line"></div><div class="line">        val inner1 = new outer1.Inner(&quot;Java&quot;)</div><div class="line">        val inner2 = new outer2.Inner(&quot;Scala&quot;)</div><div class="line"></div><div class="line">        inner1.foo(inner1)</div><div class="line">        inner2.foo(inner2)</div><div class="line"></div><div class="line">        //inner1是根据outer1创建的，Scala的内部类是面向外部类对象的。</div><div class="line">        //所以inner1的外部类的name必须是outer1的Hadoop,而不能是outer2的Spark.</div><div class="line">        inner1.foo(inner2)  //Error</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考自：<br><a href="http://blog.csdn.net/shijiebei2009/article/details/38666201" target="_blank" rel="external">Scala类</a><br><a href="http://blog.csdn.net/wwz573398723/article/details/47427679" target="_blank" rel="external"> 第7讲 Scala类的属性和对象私有字段实战详解</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala函数（一）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Scala%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Scala函数"><a href="#Scala函数" class="headerlink" title="Scala函数"></a>Scala函数</h2><p>Scala有函数和方法，我们术语说的方法和函数有微小的差别。<br>函数，如果其被定义为某些对象的一个成员，被称为方法。</p>
<p>数定义可以出现在在源文件的任何地方，Scala允许嵌套函数的定义，那就是其他函数定义的内部函数定义。需要注意的最重要的一点是，Scala的函数名称可以类似+, ++, ~, &amp;,-, – , , /, : 等字符。</p>
<h3 id="一、函数的声明、定义、调用"><a href="#一、函数的声明、定义、调用" class="headerlink" title="一、函数的声明、定义、调用"></a>一、函数的声明、定义、调用</h3><h3 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1.函数声明"></a>1.函数声明</h3><p>Scala函数声明有如下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def functionName ([list of parameters]) : [return type]</div></pre></td></tr></table></figure></p>
<h3 id="2-函数定义"><a href="#2-函数定义" class="headerlink" title="2.函数定义"></a>2.函数定义</h3><p>Scala函数定义有如下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def functionName ([list of parameters]) : [return type] = &#123;</div><div class="line">   function body</div><div class="line">   return [expr]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里，返回类型可以是任何有效的scala数据类型，参数列表将是用逗号和参数，返回值类型列表分离变量是可选的。非常类似于Java，一个返回语句可以在函数表达式可用情况下返回一个值。以下是这将增加两个整数并返回的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">object add&#123;</div><div class="line">   def addInt( a:Int, b:Int ) : Int = &#123;</div><div class="line">      var sum:Int = 0</div><div class="line">      sum = a + b</div><div class="line"></div><div class="line">      return sum</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数，它不返回任何东西，可以返回这相当于在Java中void(在Scala中用Unit表示不返回任何类型)，并表示该函数不返回任何单元。Scala中不返回任何东西函数被称为过程。以下是语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">object Hello&#123;</div><div class="line">   def printMe( ) : Unit = &#123;</div><div class="line">      println(&quot;Hello, Scala!&quot;)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-函数调用"><a href="#3-函数调用" class="headerlink" title="3.函数调用"></a>3.函数调用</h3><p>Scala提供了一些语法的变化来调用方法。以下是调用一个方法的标准方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">functionName( list of parameters )</div></pre></td></tr></table></figure></p>
<p>如果函数被对象的一个实例调用使用，那么使用类似于Java点标记如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[instance.]functionName( list of parameters )</div></pre></td></tr></table></figure></p>
<p>下面是一个例子用来定义，然后调用函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">object Test &#123;</div><div class="line">   def main(args: Array[String]) &#123;</div><div class="line">        println( &quot;Returned Value : &quot; + addInt(5,7) );</div><div class="line">   &#125;</div><div class="line">   def addInt( a:Int, b:Int ) : Int = &#123;</div><div class="line">      var sum:Int = 0</div><div class="line">      sum = a + b</div><div class="line"></div><div class="line">      return sum</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="二、函数定义的几种写法"><a href="#二、函数定义的几种写法" class="headerlink" title="二、函数定义的几种写法"></a>二、函数定义的几种写法</h3><p><strong>注意</strong>：Scala里方法参数的一个重要特征是它们都是val，不是var。参数是val的理由是val更容易讲清楚。你不需要多看代码以确定是否val被重新赋值，而var则不然。 如果你想在方法里面给参数重新赋值，结果是编译失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def addOne(x:Int):Int = &#123;</div><div class="line">		//Error：编译不过，因为x是val</div><div class="line">        x += 1</div><div class="line">        return x</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-始终带返回值"><a href="#1-始终带返回值" class="headerlink" title="1.始终带返回值"></a>1.始终带返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def add(x:Int,y:Int):Int=&#123;</div><div class="line">  x+y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-省略非Unit返回值；如果没有写返回值，则根据等号后面的东西进行类型推演"><a href="#2-省略非Unit返回值；如果没有写返回值，则根据等号后面的东西进行类型推演" class="headerlink" title="2.省略非Unit返回值；如果没有写返回值，则根据等号后面的东西进行类型推演"></a>2.省略非Unit返回值；如果没有写返回值，则根据等号后面的东西进行类型推演</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def test(x:Int)=&#123;</div><div class="line">     x</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="3-省略等号，返回Unit"><a href="#3-省略等号，返回Unit" class="headerlink" title="3.省略等号，返回Unit"></a>3.省略等号，返回Unit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def returnVoid()&#123;</div><div class="line">     println(&quot;return void&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：当你去掉方法体前面的等号时，它的结果类型将注定是Unit。不论方法体里面包含什么都不例外，因为Scala编译器可以把任何类型转换为Unit。例如，如果方法的最后结果是String，但方法的结果类型被声明为Unit，那么String将被转变为Unit并失去它的值。下面是这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; def g() &#123; &quot;this String gets lost too&quot; &#125;</div><div class="line">g: ()Unit</div></pre></td></tr></table></figure></p>
<p>即只有当函数返回值类型为Unit时，才可以省略=，如果大意将=省略，则会导致将想要返回的函数返回值类型转化为Unit类型。</p>
<h3 id="4-省略花括号，如果函数仅包含一条语句，那么连花括号都可以选择不写"><a href="#4-省略花括号，如果函数仅包含一条语句，那么连花括号都可以选择不写" class="headerlink" title="4.省略花括号，如果函数仅包含一条语句，那么连花括号都可以选择不写"></a>4.省略花括号，如果函数仅包含一条语句，那么连花括号都可以选择不写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def max2(x: Int, y: Int) = if (x &gt; y) x else y</div></pre></td></tr></table></figure>
<hr>
<h2 id="三、本地函数"><a href="#三、本地函数" class="headerlink" title="三、本地函数"></a>三、本地函数</h2><p>Scala中你可以把函数定义在别的函数之内，就好像本地变量那样，这种函数称为本地函数。这种本地函数仅在包含它的代码块中可见。</p>
<p>参考自：<br><a href="http://my.oschina.net/scipio/blog/277456?fromerr=8z7aB5YR" target="_blank" rel="external">Scala函数的定义的几种写法</a><br><a href="http://www.yiibai.com/scala/scala_functions.html" target="_blank" rel="external">Scala函数</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala函数（二）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Scala%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>说明：此博客是《Programming in Scala》的笔记，仅用于自己学习使用.</p>
<h2 id="一、头等函数"><a href="#一、头等函数" class="headerlink" title="一、头等函数"></a>一、头等函数</h2><h3 id="1-函数字面量"><a href="#1-函数字面量" class="headerlink" title="1.函数字面量"></a>1.函数字面量</h3><p>Scala的函数是头等函数。你不仅可以定义和调用函数，还可以把它们写成匿名的字面量，并把它们作为值传递。</p>
<p>函数字面量被编译进类，并在运行期实例化为函数值。因此函数字面量和值的区别在于函数字面量存在于源代码，而函数值作为对象存在与运行期。这个区别很像类(源代码)和对象(运行期)之间的区别。</p>
<p>已下是对数执行递增操作的函数字面量的简单例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x:Int) =&gt; x+1</div></pre></td></tr></table></figure></p>
<p>=&gt;指明这个函数把左边的东西(任意整数x)转变成右边的东西(x+1)。所以，这个函数可以把任意整数x映射为x+1.</p>
<p>函数值是对象，所以如果愿意，可以将其存入变量。它们也是函数，所以你可以使用通常的括号函数调用写法调用它们。已下是这两种操作的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; var increase = (x:Int) =&gt; x+1</div><div class="line">increase: (Int) =&gt; Int = &lt;function&gt;</div><div class="line"></div><div class="line">scala&gt; increase(10)</div><div class="line">res0: Int = 11</div></pre></td></tr></table></figure></p>
<p>如果你想让函数字面量包含多条语句，可以用花括号包住函数体，一行放一条语句，这样就组成了代码快。与方法一样，但函数值被调用时，所有语句将被执行，而函数的返回值就是最后一行表达式产生的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">scala&gt; increase = (x:Int) =&gt; &#123;</div><div class="line">	println(&quot;We&quot;)</div><div class="line">	println(&quot;are&quot;)</div><div class="line">    println(&quot;here&quot;)</div><div class="line">    x+1</div><div class="line">&#125;</div><div class="line">increase: (Int) =&gt; Int = &lt;function&gt;</div><div class="line"></div><div class="line">scala&gt; increase(10)</div><div class="line">We</div><div class="line">are</div><div class="line">here</div><div class="line">res4:Int = 11</div></pre></td></tr></table></figure>
<p>许多Scala库给你使用它们的机会。例如所有的集合类都能用到foreach方法。它以函数作为入参，并对每个元素调用该函数。下面是如何用它打印输出所有列表元素的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scala&gt; val someNumbers = List(1,2,3)</div><div class="line">someNumbers:List[Int] = List(1,2,3)</div><div class="line"></div><div class="line">scala&gt; someNumbers.foreach((x:Int) =&gt; println(x))</div><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>另举一个例子，关于集合类型的filter方法。这个方法选择集合类型里可以通过用户提供的测试的元素。测试是通过调用作为入参的函数实现的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; someNumbers.filter((x:Int) =&gt; x &gt; 1)</div><div class="line">res6:List[Int] = List(2,3)</div></pre></td></tr></table></figure></p>
<h3 id="2-函数字面量的短路式"><a href="#2-函数字面量的短路式" class="headerlink" title="2.函数字面量的短路式"></a>2.函数字面量的短路式</h3><p>Scala提供了许多方法去除冗余信息并把函数字面量写的更简单。</p>
<p>一种让函数字面量更简介的方式是去除参数类型。因此，前面带过滤器的例子可以写成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; someNumbers.filter((x) =&gt; x&gt;1)</div><div class="line">res7: List[Int] = List(2,3)</div></pre></td></tr></table></figure></p>
<p>Scala编译器知道x一定是整数，因为它看到你立刻使用了这个函数过滤整数列表(由someNumbers暗示)。这被称为目标类型化。</p>
<p>某些参数的类型是被推断的，省略其外的括号，是第二种去除无用字符的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; someNumbers.filter(x =&gt; x&gt;1)</div><div class="line">res7: List[Int] = List(2,3)</div></pre></td></tr></table></figure></p>
<h3 id="二、占位符语法"><a href="#二、占位符语法" class="headerlink" title="二、占位符语法"></a>二、占位符语法</h3><p>如果想让函数字面量更简洁，可以把下划线当做一个或更多参数的占位符，只要每个参数在函数字面量内仅出现一次。比如，_&gt;1对于检查值是否大于零的函数来说就是非常短的标注：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; sonmeNumbers.filter(_ &gt;  1)</div><div class="line">res9: List[Int] = List(2,3)</div></pre></td></tr></table></figure></p>
<p>你可以把下划线看做表达式里需要被“填入”的空白。这个空白在每次函数被调用的时候用函数的参数填入。因此，函数字面量_ &gt; 0与稍微冗长一点儿的x =&gt; x  &gt; 0 相同，演示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; someNumbers.filter(x =&gt; x &gt; 1)</div><div class="line">res10: List[Int] = List(2,3)</div></pre></td></tr></table></figure></p>
<p>有时你把下划线当做参数的占位符，编译器可能无法推断缺失的参数类型。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala val f = _ + _</div><div class="line">&lt;console&gt;:4:error: missing parameter type for expanded</div></pre></td></tr></table></figure></p>
<p>这种情况下，你可以使用冒号指定类型，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val f = (_:Int) + (_:Int)</div><div class="line">f: (Int,Int) =&gt; Int = &lt;function&gt;</div><div class="line"></div><div class="line">scala&gt; f(5,10)</div><div class="line">res11: Int = 15</div></pre></td></tr></table></figure></p>
<p>请注意<em>+</em>将扩展成带两个参数的函数字面量。这样也解释了为何仅当每个参数在函数字面量中最多出现一次时，你才能使用这种短路格式。多个下划线指代多个参数，而不是单个参数的重复使用。第一个下划线代表第一个参数，第二个下划线代表第二个，第三个，…，如此类推。</p>
<h2 id="三、部分应用函数"><a href="#三、部分应用函数" class="headerlink" title="三、部分应用函数"></a>三、部分应用函数</h2><p>尽管前面的例子里下划线替代的只是单个参数，你还可以使用单个下划线替换整个参数列表。例如，写成print(<em>),或者更好的方法你还可以写成println</em>.下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">someNumbers.foreach(println _)</div></pre></td></tr></table></figure></p>
<p>Scala把这种短路格式直接看做是你输入了下列代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">someNumbers.foreach(x =&gt; println(x))</div></pre></td></tr></table></figure></p>
<p>因此，这个例子中的下划线不是单个参数的占位符。它是整个参数列表的占位符。请记住要在函数名和下划线之间留一个空格。</p>
<p>以这种方式使用下划线时，就是正在写一个部分应用函数。Scala里，当你地啊用函数，传入任何需要的参数，实际是把函数应用到参数上。如给定下列函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; def sum(a:Int,b:Int,c:Int)=a+b+c</div><div class="line">scala&gt;sum(1,2,3)</div><div class="line">res12: Int = 6</div></pre></td></tr></table></figure></p>
<p>部分应用函数是一种表达式，你不需要提供函数需要的所有参数。代之以仅提供部分，或不提供所需参数。比如，要创建调用sum的部分应用表达式，而不提供任何3个所需参数，只要在”sum”之后放一个下划线即可。然后可以把得到的函数存入变量。举例来说：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val a = sum _</div><div class="line">a: (Int,Int,Int) =&gt; Int = &lt;function&gt;</div></pre></td></tr></table></figure></p>
<p>有了这个代码，Scala编译器以部分应用函数表达式，sum _,实例化一个带3个缺失整数参数的函数值，并把这个新的函数值的索引赋值给变量a。当你把这个新函数值应用于3个参数之上时，他就地啊用sum,并传入这3个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; a(1,2,3)</div><div class="line">res13: Int = 6</div></pre></td></tr></table></figure></p>
<p>现在，尽管sum <em>确实是一个偏函数，或许对你来说为什么这么称呼并不是很熟悉。这个名字源自于函数未被应用于它的所有参数。在sum </em>的例子里，它没有应用于任何参数。不过还可以通过提供某些但不是全部需要的参数表达一个偏函数。举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val b = sum(1,_:Int,3)</div><div class="line">b:(Int) =&gt; = &lt;function&gt;</div></pre></td></tr></table></figure></p>
<p>这个例子里，你提供了第一个和最后一个参数给sum,但中间参数缺失。因此仅有一个参数缺失，Scala编译器会产生一个新的函数类。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; b(2)</div><div class="line">res15: Int = 6</div></pre></td></tr></table></figure></p>
<p>在这个例子中其实是调用的sum(1,2,3)</p>
<h2 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h2><p>到这里为止，所有函数字面量的例子仅参考传入的参数。例如，(x:Int)=&gt;x&gt;1里，函数体x&gt;0用到的唯一变量x,被定义为函数参数。然而也可以参考定义在其它地方的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x: Int) =&gt; x + more //more是多少？</div></pre></td></tr></table></figure></p>
<p>函数把”more”加入参考，但什么是more呢？从这个函数来看，more是个自由变量，因为函数字面量自身没有给出其含义。相对地，x变量是一个绑定变量，因为它在函数的上下文中有明确意义：被定义为函数的唯一参数是Int。如果你尝试独立使用这个函数字面量，范围内没有任何more的定义，编译器会报错说：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; (x : Int) =&gt; x + more</div><div class="line">&lt;console&gt;:5:error: not found: value more</div></pre></td></tr></table></figure></p>
<p>另一方面，只要有一个叫做more的某种东西，同样的函数字面量将正常工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scala&gt; var more = 1</div><div class="line"></div><div class="line">scala&gt; val addMore = (x : Int) =&gt; x + more</div><div class="line"></div><div class="line">scala&gt; addMore(10)</div><div class="line">res19: Int = 11</div></pre></td></tr></table></figure></p>
<p>依照这个函数字面量在运行时创建的函数值（对象）被称为闭包。名称源自于通过“捕获”自由变量的绑定，从而对函数字面量执行的“关闭”行动。不带自由变量的函数字面量，如(x : Int) =&gt; x + 1,被称为封闭项，这里项指的是一小部分源代码。因此依照这个函数字面量在运行时创建的函数值严格意义上讲就不是闭包，因为(x : Int) =&gt; x + 1在编写的时候就已经封闭了。但任何带有自由变量的函数字面量，如(x : Int) =&gt; x + more,都是开放项。因此，任何一(x : Int) =&gt; x + more 为模板在运行期创建的函数值将必须捕获对自由变量more的绑定。因此得到的函数值将包含指向捕获的more变量的索引。又由于函数值是关闭这个开放项(x: Int) =&gt; x + more的行动的最终产物，因此被称为闭包。</p>
<p>这个例子带来一个问题：如果more在闭包创建之后被改变了会发生什么事？Scala里，答案是变化如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; more = 9999</div><div class="line"></div><div class="line">scala&gt; addMore(10)</div><div class="line">res21: Int = 10009</div></pre></td></tr></table></figure></p>
<p>直觉上，Scala的闭包捕获了变量本身，而不是变量指向的值。就像前面演示的例子，依照(X: Int) =&gt; x + more创建的闭包看到了闭包之外做出的对more的变化。反过来也同样。闭包对捕获变量做出的改变在闭包之外也可见。下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val someNumbers = List(-11,-10,-5,0,5,10)</div><div class="line">scala&gt; var sum = 0</div><div class="line">scala&gt; someNumbers.foreach(sum += _) //sum是自由变量</div><div class="line">scala&gt; sum</div><div class="line">res23: Int = -11</div></pre></td></tr></table></figure></p>
<p>例子用一个循环的方式计算List的累加和。变量sum处于函数字面量sum += _的外围，函数字面量把数累加到sum上。尽管这是一个在运行期间改变sum的闭包，作为结果的累加值，-11,仍然在闭包之外可见。</p>
<h2 id="五、重复参数"><a href="#五、重复参数" class="headerlink" title="五、重复参数"></a>五、重复参数</h2><p>Scala中，你可以指明函数的最后一个参数是重复的。从而允许客户向函数传入可变长度参数列表。想要标注一个重复参数，可以在参数的类型之后放一个星号。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scala&gt; def echo(args: String*) =</div><div class="line">		for(arg &lt;- args) println(arg)</div><div class="line">scala&gt; echo()</div><div class="line"></div><div class="line">scala&gt; echo(&quot;one)</div><div class="line">one</div><div class="line"></div><div class="line">scala&gt; echo(&quot;hello&quot;,&quot;world&quot;)</div><div class="line">hello</div><div class="line">world</div></pre></td></tr></table></figure></p>
<p>函数内部，重复参数的类型是声明类型的数组。因此，echo函数里被声明为类型”String”的args的类型实际上是Array[String]。然而，如果你一个合适类型的数组，并尝试把它当做重复参数传入，你会得到一个编译器错误。</p>
<p>要实现这个做法，你需要在数组参数后面添加一个冒号和一个_*符号，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val arr = Array(&quot;How&quot;,&quot;are&quot;,&quot;you?&quot;)</div><div class="line">scala&gt; echo(arr: _*)</div><div class="line">How</div><div class="line">are</div><div class="line">you?</div></pre></td></tr></table></figure></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala单例对象]]></title>
      <url>http://freeshow.github.io/2016/07/23/Scala%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>声明：作为自己学习Scala的笔记，只是为了以后复习Scala方便。</p>
<h2 id="Singleton对象"><a href="#Singleton对象" class="headerlink" title="Singleton对象"></a>Singleton对象</h2><p>Scala比Java更为面向对象的特点之一是Scala不能定义静态成员，而是代之以定义单例对象(singleton object)。除了用object关键字替换了class关键字以外，单例对象的定义看上去与类定义一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 私有构造方法</div><div class="line">class Marker private(val color:String) &#123;</div><div class="line"></div><div class="line">    println(&quot;Creating &quot; + this)</div><div class="line"></div><div class="line">    override def toString(): String = &quot;marker color &quot;+ color</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 伴生对象，与类共享名字，可以访问类的私有属性和方法</div><div class="line">object Marker&#123;</div><div class="line"></div><div class="line">    private val markers: Map[String, Marker] = Map(</div><div class="line">        &quot;red&quot; -&gt; new Marker(&quot;red&quot;),</div><div class="line">        &quot;blue&quot; -&gt; new Marker(&quot;blue&quot;),</div><div class="line">        &quot;green&quot; -&gt; new Marker(&quot;green&quot;)</div><div class="line">    )</div><div class="line"></div><div class="line">    def apply(color:String) = &#123;</div><div class="line">        if(markers.contains(color)) markers(color) else null</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    def getMarker(color:String) = &#123;</div><div class="line">        if(markers.contains(color)) markers(color) else null</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object ObjectDemo &#123;</div><div class="line">    def main(args: Array[String]) &#123;</div><div class="line">        // 方法糖 apply</div><div class="line">        //单例对象在第一次被访问时才会被初始化。</div><div class="line">        println(Marker(&quot;red&quot;))</div><div class="line"></div><div class="line">        println()</div><div class="line"></div><div class="line">        // 单例函数调用，省略了.(点)符号</div><div class="line">        println(Marker getMarker &quot;blue&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Creating marker color red</div><div class="line">Creating marker color blue</div><div class="line">Creating marker color green</div><div class="line">marker color red</div><div class="line"></div><div class="line">marker color blue</div></pre></td></tr></table></figure></p>
<p>上面例子中单例对象叫做Maker，与Maker类同名。当单例对象与某个类共享同一个名称时，它就被称为是这个类的伴生对象。类和它的伴生对象必须定义在一个源文件中。类被称为是这个单例对象的伴生类。类和它的伴生对象可以相互访问其私有成员。</p>
<p>对于Java程序员来说，可以把单例对象当做是Java中可能会用到的静态 方法工具类。也可以用类似的语法做方法调用：单例对象名，点，方法名。</p>
<p>类和单例对象间的差别是，单例对象不带参数，而类可以。因为单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚构类的实例，并指向静态的变量，因此它们与Java静态类有着相同的初始化语义。</p>
<p>特别要指出的是，单例对象在第一次被访问的时候才会被初始化。</p>
<h2 id="将伴生对象作为工厂使用"><a href="#将伴生对象作为工厂使用" class="headerlink" title="将伴生对象作为工厂使用"></a>将伴生对象作为工厂使用</h2><p>我们通常将伴生对象作为工厂使用。</p>
<p>下面是一个简单的例子，可以不需要使用’new’来创建一个实例了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Bar(foo: String)</div><div class="line"></div><div class="line">object Bar &#123;</div><div class="line">	def apply(foo: String) = new Bar(foo)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建对象是只需要使用工厂方法，而不许要使用new来创建：<br>val bar = Bar(“foo”) 等价与<br>var bar = Bar.apply(“foo”)</p>
<h2 id="独立对象-standalone-object"><a href="#独立对象-standalone-object" class="headerlink" title="独立对象(standalone object)"></a>独立对象(standalone object)</h2><p>不与伴生类共享名称的单例对象被称为独立对象。它可以用在很多地方。例如，作为相关功能方法的工具类，或者定义Scala应用的入口点。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">class ApplyDemo</div><div class="line">&#123;</div><div class="line">    def apply() = &quot;apply in class&quot;</div><div class="line">    def test</div><div class="line">    &#123;</div><div class="line">        println(&quot;test&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">  * 伴生对象，相当于类的静态方法</div><div class="line">  */</div><div class="line">object ApplyDemo &#123;</div><div class="line"></div><div class="line">    def stat</div><div class="line">    &#123;</div><div class="line">        println(&quot;static method&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    def apply() = new ApplyDemo</div><div class="line"></div><div class="line">    var count = 0</div><div class="line"></div><div class="line">    def incc =</div><div class="line">    &#123;</div><div class="line">        count += 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">object ClassTest &#123;</div><div class="line">    def main(args: Array[String]): Unit = &#123;</div><div class="line">        ApplyDemo.stat</div><div class="line"></div><div class="line">        //类名后面加括号，相当于调用伴生对象的apply方法</div><div class="line">        val a = ApplyDemo()</div><div class="line">        a.test</div><div class="line"></div><div class="line">		//对象加括号相当于调用对象的apply方法</div><div class="line">        println(a())</div><div class="line"></div><div class="line">		val b = ApplyDemo.apply()</div><div class="line">        b.test</div><div class="line"></div><div class="line">		println(a.apply())</div><div class="line"></div><div class="line">        for(i &lt;- 0 until 10)&#123;</div><div class="line">            ApplyDemo.incc</div><div class="line">        &#125;</div><div class="line">        println(ApplyDemo.count)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static method</div><div class="line">test</div><div class="line">apply in class</div><div class="line">test</div><div class="line">apply in class</div><div class="line">10</div></pre></td></tr></table></figure></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用WebRTC搭建前端视频聊天室——信令篇]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E4%BD%BF%E7%94%A8WebRTC%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%A7%86%E9%A2%91%E8%81%8A%E5%A4%A9%E5%AE%A4%E2%80%94%E2%80%94%E4%BF%A1%E4%BB%A4%E7%AF%87/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://segmentfault.com/a/1190000000439103#modile.qq.com" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——信令篇</a></p>
<p>建议看这篇之前先看一下<a href="http://segmentfault.com/a/1190000000436544" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——入门篇</a></p>
<p>如果需要搭建实例的话可以参照SkyRTC-demo：<a href="https://github.com/LingyuCoder/SkyRTC-demo" target="_blank" rel="external">github地址</a></p>
<p>其中使用了两个库：<a href="https://github.com/LingyuCoder/SkyRTC" target="_blank" rel="external">SkyRTC(github地址)</a>和<a href="https://github.com/LingyuCoder/SkyRTC-client" target="_blank" rel="external">SkyRTC-client(github地址)</a></p>
<p>这两个库和demo都是我写的，如果有bug或是错误欢迎指出，我会尽力更正</p>
<h3 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h3><p>这篇文章讲述了WebRTC中所涉及的信令交换以及聊天室中的信令交换，主要内容来自<a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/" target="_blank" rel="external">WebRTC in the real world: STUN, TURN and signaling</a>，我在这里提取出的一些信息，并添加了自己在开发时的一些想法。</p>
<h3 id="WebRTC的服务器"><a href="#WebRTC的服务器" class="headerlink" title="WebRTC的服务器"></a>WebRTC的服务器</h3><p>WebRTC提供了浏览器到浏览器（点对点）之间的通信，但并不意味着WebRTC不需要服务器。暂且不说基于服务器的一些扩展业务，WebRTC至少有两件事必须要用到服务器：</p>
<ol>
<li>浏览器之间交换建立通信的元数据（信令）必须通过服务器</li>
<li>为了穿越NAT和防火墙</li>
</ol>
<h3 id="为什么需要信令？"><a href="#为什么需要信令？" class="headerlink" title="为什么需要信令？"></a>为什么需要信令？</h3><p>我们需要通过一系列的信令来建立浏览器之间的通信。而具体需要通过信令交换哪些内容呢？这里大概列了一下：</p>
<ol>
<li>用来控制通信开启或者关闭的连接控制消息</li>
<li>发生错误时用来彼此告知的消息</li>
<li>媒体流元数据，比如像解码器、解码器的配置、带宽、媒体类型等等</li>
<li>用来建立安全连接的关键数据</li>
<li>外界所看到的的网络上的数据，比如IP地址、端口等</li>
</ol>
<p>在建立连接之前，浏览器之间显然没有办法传递数据。所以我们需要通过服务器的中转，在浏览器之间传递这些数据，然后建立浏览器之间的点对点连接。但是WebRTC API中并没有实现这些。</p>
<h3 id="为什么WebRTC不去实现信令交换？"><a href="#为什么WebRTC不去实现信令交换？" class="headerlink" title="为什么WebRTC不去实现信令交换？"></a>为什么WebRTC不去实现信令交换？</h3><p>不去由WebRTC实现信令交换的原因很简单：WebRTC标准的制定者们希望能够最大限度地兼容已有的成熟技术。具体的连接建立方式由一种叫JSEP（JavaScript Session Establishment Protocol）的协议来规定，使用JSEP有两个好处：</p>
<ol>
<li>在JSEP中，需要交换的关键信息是多媒体会话描述（multimedia session description）。由于开发者在其所开发的应用程序中信令所使用的协议不同（SIP或是XMPP或是开发者自己定义的协议），WebRTC建立呼叫的思想建立在媒体流控制层面上，从而与上层信令传输相分离，防止相互之间的信令污染。只要上层信令为其提供了多媒体会话描述符这样的关键信息就可以建立连接，不管开发者用何种方式来传递。</li>
<li>JSEP的架构同时也避免了在浏览器上保存连接的状态，防止其像一个状态机一样工作。由于页面经常被频繁的刷新，如果连接的状态保存在浏览器中，每次刷新都会丢失。使用JSEP能使得状态被保存在服务器上</li>
</ol>
<h3 id="会话描述协议（Session-Description-Protocol）"><a href="#会话描述协议（Session-Description-Protocol）" class="headerlink" title="会话描述协议（Session Description Protocol）"></a>会话描述协议（Session Description Protocol）</h3><p>JSEP将客户端之间传递的信令分为两种:offer信令和answer信令。他们主要内容的格式都遵循会话描述协议（Session Description Protocal，简称SDP）。一个SDP的信令的内容大致上如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">v=0</div><div class="line">o=- 7806956 075423448571 2 IN IP4 127.0.0.1</div><div class="line">s=-</div><div class="line">t=0 0</div><div class="line">a=group:BUNDLE audio video data</div><div class="line">a=msid-semantic: WMS 5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g</div><div class="line">m=audio 1 RTP/SAVPF 111 103 104 0 8 106 105 13 126</div><div class="line">c=IN IP4 0.0.0.0</div><div class="line">a=rtcp:1 IN IP4 0.0.0.0</div><div class="line">a=ice-ufrag:grnpQ0BSTSnBLroq</div><div class="line">a=ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</div><div class="line">a=ice-options:google-ice</div><div class="line">a=fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</div><div class="line">a=setup:actpass</div><div class="line">a=mid:audio</div><div class="line">a=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level</div><div class="line">a=recvonly</div><div class="line">a=rtcp-mux</div><div class="line">a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:qzcKu22ar1+lYah6o8ggzGcQ5obCttoOO2IzXwFV</div><div class="line">a=rtpmap:111 opus/48000/2</div><div class="line">a=fmtp:111 minptime=10</div><div class="line">a=rtpmap:103 ISAC/16000</div><div class="line">a=rtpmap:104 ISAC/32000</div><div class="line">a=rtpmap:0 PCMU/8000</div><div class="line">a=rtpmap:8 PCMA/8000</div><div class="line">a=rtpmap:106 CN/32000</div><div class="line">a=rtpmap:105 CN/16000</div><div class="line">a=rtpmap:13 CN/8000</div><div class="line">a=rtpmap:126 telephone-event/8000</div><div class="line">a=maxptime:60</div><div class="line">m=video 1 RTP/SAVPF 100 116 117</div><div class="line">c=IN IP4 0.0.0.0</div><div class="line">a=rtcp:1 IN IP4 0.0.0.0</div><div class="line">a=ice-ufrag:grnpQ0BSTSnBLroq</div><div class="line">a=ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</div><div class="line">a=ice-options:google-ice</div><div class="line">a=fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</div><div class="line">a=setup:actpass</div><div class="line">a=mid:video</div><div class="line">a=extmap:2 urn:ietf:params:rtp-hdrext:toffset</div><div class="line">a=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time</div><div class="line">a=sendrecv</div><div class="line">a=rtcp-mux</div><div class="line">a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:qzcKu22ar1+lYah6o8ggzGcQ5obCttoOO2IzXwFV</div><div class="line">a=rtpmap:100 VP8/90000</div><div class="line">a=rtcp-fb:100 ccm fir</div><div class="line">a=rtcp-fb:100 nack</div><div class="line">a=rtcp-fb:100 goog-remb</div><div class="line">a=rtpmap:116 red/90000</div><div class="line">a=rtpmap:117 ulpfec/90000</div><div class="line">a=ssrc:3162115896 cname:/nERF7Ern+udqf++</div><div class="line">a=ssrc:3162115896 msid:5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g 221b204e-c9a0-4b01-b361-e17e9bf8f639</div><div class="line">a=ssrc:3162115896 mslabel:5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g</div><div class="line">a=ssrc:3162115896 label:221b204e-c9a0-4b01-b361-e17e9bf8f639</div><div class="line">m=application 1 DTLS/SCTP 5000</div><div class="line">c=IN IP40.0.0.0</div><div class="line">a=ice-ufrag:grnpQ0BSTSnBLroq</div><div class="line">a=ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</div><div class="line">a=ice-options:google-ice</div><div class="line">a=fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</div><div class="line">a=setup:actpass</div><div class="line">a=mid:data</div><div class="line">a=sctpmap:5000 webrtc-datachannel 1024</div></pre></td></tr></table></figure>
<p>这些都什么玩意？说实话我不知道，我这里放这么一大段出来，只是为了让文章内容显得很多…如果想深入了解的话，可以参考<a href="https://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1" target="_blank" rel="external">SDP for the WebRTC draft-nandakumar-rtcweb-sdp-04</a>自行进行解析</p>
<p>其实可以将其简化一下，它就是一个在点对点连接中描述自己的字符串，我们可以将其封装在JSON中进行传输，在PeerConnection建立后将其通过服务器中转后，将自己的SDP描述符和对方的SDP描述符交给PeerConnection就行了</p>
<h3 id="信令与RTCPeerConnection建立"><a href="#信令与RTCPeerConnection建立" class="headerlink" title="信令与RTCPeerConnection建立"></a>信令与RTCPeerConnection建立</h3><p>在前一篇文章中介绍过，WebRTC使用RTCPeerConnection来在浏览器之间传递流数据，在建立RTCPeerConnection实例之后，想要使用其建立一个点对点的信道，我们需要做两件事：</p>
<ol>
<li>确定本机上的媒体流的特性，比如分辨率、编解码能力啥的（SDP描述符）</li>
<li>连接两端的主机的网络地址（ICE Candidate）</li>
</ol>
<p>需要注意的是，由于连接两端的主机都可能在内网或是在防火墙之后，我们需要一种对所有联网的计算机都通用的定位方式。这其中就涉及NAT/防火墙穿越技术，以及WebRTC用来达到这个目的所ICE框架。这一部分在上一篇文章中有介绍，这里不再赘述。</p>
<h3 id="通过offer和answer交换SDP描述符"><a href="#通过offer和answer交换SDP描述符" class="headerlink" title="通过offer和answer交换SDP描述符"></a>通过offer和answer交换SDP描述符</h3><p>大致上在两个用户（甲和乙）之间建立点对点连接流程应该是这个样子（这里不考虑错误的情况，RTCPeerConnection简称PC）：</p>
<ol>
<li>甲和乙各自建立一个PC实例</li>
<li>甲通过PC所提供的createOffer()方法建立一个包含甲的SDP描述符的offer信令</li>
<li>甲通过PC所提供的setLocalDescription()方法，将甲的SDP描述符交给甲的PC实例</li>
<li>甲将offer信令通过服务器发送给乙</li>
<li>乙将甲的offer信令中所包含的的SDP描述符提取出来，通过PC所提供的setRemoteDescription()方法交给乙的PC实例</li>
<li>乙通过PC所提供的createAnswer()方法建立一个包含乙的SDP描述符answer信令</li>
<li>乙通过PC所提供的setLocalDescription()方法，将乙的SDP描述符交给乙的PC实例</li>
<li>乙将answer信令通过服务器发送给甲</li>
<li>甲接收到乙的answer信令后，将其中乙的SDP描述符提取出来，调用setRemoteDescripttion()方法交给甲自己的PC实例</li>
</ol>
<p>通过在这一系列的信令交换之后，甲和乙所创建的PC实例都包含甲和乙的SDP描述符了，完成了两件事的第一件。我们还需要完成第二件事——获取连接两端主机的网络地址</p>
<h3 id="通过ICE框架建立NAT-防火墙穿越的连接"><a href="#通过ICE框架建立NAT-防火墙穿越的连接" class="headerlink" title="通过ICE框架建立NAT/防火墙穿越的连接"></a>通过ICE框架建立NAT/防火墙穿越的连接</h3><p>这个网络地址应该是能从外界直接访问，WebRTC使用ICE框架来获得这个地址。RTCPeerConnection在创立的时候可以将ICE服务器的地址传递进去，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var iceServer = &#123;</div><div class="line">    &quot;iceServers&quot;: [&#123;</div><div class="line">        &quot;url&quot;: &quot;stun:stun.l.google.com:19302&quot;</div><div class="line">    &#125;]</div><div class="line">&#125;;</div><div class="line">var pc = new RTCPeerConnection(iceServer);</div></pre></td></tr></table></figure>
<p>当然这个地址也需要交换，还是以甲乙两位为例，交换的流程如下（RTCPeerConnection简称PC）：</p>
<ol>
<li>甲、乙各创建配置了ICE服务器的PC实例，并为其添加onicecandidate事件回调</li>
<li>当网络候选可用时，将会调用onicecandidate函数</li>
<li>在回调函数内部，甲或乙将网络候选的消息封装在ICE Candidate信令中，通过服务器中转，传递给对方</li>
<li>甲或乙接收到对方通过服务器中转所发送过来ICE Candidate信令时，将其解析并获得网络候选，将其通过PC实例的addIceCandidate()方法加入到PC实例中</li>
</ol>
<p>这样连接就创立完成了，可以向RTCPeerConnection中通过addStream()加入流来传输媒体流数据。将流加入到RTCPeerConnection实例中后，对方就可以通过onaddstream所绑定的回调函数监听到了。调用addStream()可以在连接完成之前，在连接建立之后，对方一样能监听到媒体流</p>
<h3 id="聊天室中的信令"><a href="#聊天室中的信令" class="headerlink" title="聊天室中的信令"></a>聊天室中的信令</h3><p>上面是两个用户之间的信令交换流程，但我们需要建立一个多用户在线视频聊天的聊天室。所以需要进行一些扩展，来达到这个要求</p>
<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><p>首先需要确定一个用户在聊天室中的操作大致流程：</p>
<ol>
<li>打开页面连接到服务器上</li>
<li>进入聊天室</li>
<li>与其他所有已在聊天室的用户建立点对点的连接，并输出在页面上</li>
<li>若有聊天室内的其他用户离开，应得到通知，关闭与其的连接并移除其在页面中的输出</li>
<li>若又有其他用户加入，应得到通知，建立于新加入用户的连接，并输出在页面上</li>
<li>离开页面，关闭所有连接</li>
</ol>
<p>从上面可以看出来，除了点对点连接的建立，还需要服务器至少做如下几件事：</p>
<ol>
<li>新用户加入房间时，发送新用户的信息给房间内的其他用户</li>
<li>新用户加入房间时，发送房间内的其他用户信息给新加入房间的用户</li>
<li>用户离开房间时，发送离开用户的信息给房间内的其他用户</li>
</ol>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>以使用WebSocket为例，上面用户操作的流程可以进行以下修改：</p>
<ol>
<li>浏览器与服务器建立WebSocket连接</li>
<li>发送一个加入聊天室的信令（join），信令中需要包含用户所进入的聊天室名称</li>
<li>服务器根据用户所加入的房间，发送一个其他用户信令（peers），信令中包含聊天室中其他用户的信息，浏览器根据信息来逐个构建与其他用户的点对点连接</li>
<li>若有用户离开，服务器发送一个用户离开信令（remove_peer），信令中包含离开的用户的信息，浏览器根据信息关闭与离开用户的信息，并作相应的清除操作</li>
<li>若有新用户加入，服务器发送一个用户加入信令（new_peer），信令中包含新加入的用户的信息，浏览器根据信息来建立与这个新用户的点对点连接</li>
<li>用户离开页面，关闭WebSocket连接</li>
</ol>
<h3 id="服务器实现"><a href="#服务器实现" class="headerlink" title="服务器实现"></a>服务器实现</h3><p>由于用户可以只是建立连接，可能还没有进入具体房间，所以首先我们需要一个容器来保存所有用户的连接，同时监听用户是否与服务器建立了WebSocket的连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var server = new WebSocketServer();</div><div class="line">var sockets = [];</div><div class="line"></div><div class="line">server.on(&apos;connection&apos;, function(socket)&#123;</div><div class="line">    socket.on(&apos;close&apos;, function()&#123;</div><div class="line">        var i = sockets.indexOf(socket);</div><div class="line">        sockets.splice(i, 1);</div><div class="line">        //关闭连接后的其他操作</div><div class="line">    &#125;);</div><div class="line">    sockets.push(socket);</div><div class="line">    //连接建立后的其他操作</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于有房间的划分，所以我们需要在服务器上建立一个容器，用来保存房间内的用户信息。显然对象较为合适，键为房间名称，值为用户信息列表。</p>
<p>同时我们需要监听上面所说的用户加入房间的信令（join），新用户加入之后需要向新用户发送房间内其他用户信息（peers）和向房间内其他用户发送新用户信息（new_peer），以及用户离开时向其他用户发送离开用户的信息（remove_peer）:</p>
<p>于是乎代码大致就变成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">var server = new WebSocketServer();</div><div class="line">var sockets = [];</div><div class="line">var rooms = &#123;&#125;;</div><div class="line"></div><div class="line">/*</div><div class="line">join信令所接收的格式</div><div class="line">&#123;</div><div class="line">    &quot;eventName&quot;: &quot;join&quot;,</div><div class="line">    &quot;data&quot;: &#123;</div><div class="line">        &quot;room&quot;: &quot;roomName&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line">var joinRoom = function(data, socket) &#123;</div><div class="line">    var room = data.room || &quot;__default&quot;;</div><div class="line">    var curRoomSockets; //当前房间的socket列表</div><div class="line">    var socketIds = []; //房间其他用户的id</div><div class="line"></div><div class="line">    curRoomSockets = rooms[room] = rooms[room] || [];</div><div class="line"></div><div class="line">    //给所有房间内的其他人发送新用户的id</div><div class="line">    for (var i = curRoomSockets.length; i--;) &#123;</div><div class="line">        socketIds.push(curRoomSockets[i].id);</div><div class="line">        curRoomSockets[i].send(JSON.stringify(&#123;</div><div class="line">            &quot;eventName&quot;: &quot;new_peer&quot;,</div><div class="line">            &quot;data&quot;: &#123;</div><div class="line">                &quot;socketId&quot;: socket.id</div><div class="line">            &#125;</div><div class="line">        &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //将新用户的连接加入到房间的连接列表中</div><div class="line">    curRoomSockets.push(socket);</div><div class="line">    socket.room = room;</div><div class="line"></div><div class="line">    //给新用户发送其他用户的信息，及服务器给新用户自己赋予的id</div><div class="line">    socket.send(JSON.stringify(&#123;</div><div class="line">        &quot;eventName&quot;: &quot;peers&quot;,</div><div class="line">        &quot;data&quot;: &#123;</div><div class="line">            &quot;socketIds&quot;: socketIds,</div><div class="line">            &quot;you&quot;: socket.id</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">&#125;;</div><div class="line"></div><div class="line">server.on(&apos;connection&apos;, function(socket) &#123;</div><div class="line">    //为socket构建一个特有的id，用来作为区分用户的标记</div><div class="line">    socket.id = getRandomString();</div><div class="line">    //用户关闭连接后，应做的处理</div><div class="line">    socket.on(&apos;close&apos;, function() &#123;</div><div class="line">        var i = sockets.indexOf(socket);</div><div class="line">        var room = socket.room;</div><div class="line">        var curRoomSockets = rooms[room];</div><div class="line">        sockets.splice(i, 1);</div><div class="line">        //通知房间内其他用户</div><div class="line">        if (curRoomSockets) &#123;</div><div class="line">            for (i = curRoomSockets.length; i--;) &#123;</div><div class="line">                curRoomSockets[i].send(JSON.stringify(&#123;</div><div class="line">                    &quot;eventName&quot;: &quot;remove_peer&quot;,</div><div class="line">                    &quot;data&quot;: &#123;</div><div class="line">                        &quot;socketId&quot;: socket.id</div><div class="line">                    &#125;</div><div class="line">                &#125;));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //从room中删除socket</div><div class="line">        if (room) &#123;</div><div class="line">            i = this.rooms[room].indexOf(socket);</div><div class="line">            this.rooms[room].splice(i, 1);</div><div class="line">            if (this.rooms[room].length === 0) &#123;</div><div class="line">                delete this.rooms[room];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //关闭连接后的其他操作</div><div class="line">    &#125;);</div><div class="line">    //根据前台页面传递过来的信令进行解析，确定应该如何处理</div><div class="line">    socket.on(&apos;message&apos;, function(data) &#123;</div><div class="line">        var json = JSON.parse(data);</div><div class="line">        if (json.eventName) &#123;</div><div class="line">            if (json.eventName === &quot;join&quot;) &#123;</div><div class="line">                joinRoom(data, socket);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    //将连接保存</div><div class="line">    sockets.push(socket);</div><div class="line">    //连接建立后的其他操作</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后再加上点对点的信令转发就行了，一份完整的代码可参照我写的<a href="https://github.com/LingyuCoder/SkyRTC/blob/master/SkyRTC.js" target="_blank" rel="external">SkyRTC项目源码</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/" target="_blank" rel="external">WebRTC in the real world: STUN, TURN and signaling</a><br><a href="https://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1" target="_blank" rel="external">SDP for the WebRTC draft-nandakumar-rtcweb-sdp-04</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用WebRTC搭建前端视频聊天室——数据通道篇]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E4%BD%BF%E7%94%A8WebRTC%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%A7%86%E9%A2%91%E8%81%8A%E5%A4%A9%E5%AE%A4%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%80%9A%E9%81%93%E7%AF%87/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://segmentfault.com/a/1190000000733779" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——数据通道篇</a></p>
<p>本文翻译自<a href="http://www.html5rocks.com/en/tutorials/webrtc/datachannels/" target="_blank" rel="external">WebRTC data channels</a></p>
<p>在两个浏览器中，为聊天、游戏、或是文件传输等需求发送信息是十分复杂的。通常情况下，我们需要建立一台服务器来转发数据，当然规模比较大的情况下，会扩展成多个数据中心。这种情况下很容易出现很高的延迟，同时难以保证数据的私密性。</p>
<p>这些问题可以通过WebRTC提供的RTCDataChannel API来解决，他能直接在点对点之间传输数据。这篇文章将介绍如何创建并使用数据通道，并提供了一些网络上常见的用例</p>
<blockquote>
<p>为了充分理解这篇文章，你可能需要去了解一些RTCPeerConnection API的相关知识，以及STUN，TURN、信道如何工作。强烈推荐<a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">Getting Started With WebRTC</a>这篇文章</p>
</blockquote>
<hr>
<h3 id="为什么我们需要另外一个数据通道"><a href="#为什么我们需要另外一个数据通道" class="headerlink" title="为什么我们需要另外一个数据通道"></a>为什么我们需要另外一个数据通道</h3><p>我们已经有<a href="http://www.html5rocks.com/en/tutorials/websockets/basics/" target="_blank" rel="external">WebSocket</a>、<a href="http://www.html5rocks.com/en/tutorials/file/xhr2/" target="_blank" rel="external">AJAX</a>和<a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/" target="_blank" rel="external">服务器发送事件</a>了，为什么我们需要另外一个通信信道？WebSocket是全双工的，但这些技术的设计都是让浏览器与服务器之间进行通信。</p>
<p>RTCDataChannel则是一个完全不同的途径：</p>
<ul>
<li>它通过RTCPeerConnection API，可以建立点对点互联。由于不需要中介服务器，中间的“跳数”减少，延迟更低。</li>
<li>RTCDataChannel使用<a href="https://en.wikipedia.org/wiki/Stream_Control_Transmission_Protocol#Features" target="_blank" rel="external">Stream Control Transmission Protocol(SCTP)协议</a>，允许我们配置传递语义：我们可以配置包传输的顺序并提供重传时的一些配置。</li>
</ul>
<p>基于SCTP的支持的RTCDataChannel已经能够在桌面的Chrome、Opera和Firefox中使用，移动端则有Android支持。</p>
<hr>
<h3 id="一个警告：信令、STUN和TURN"><a href="#一个警告：信令、STUN和TURN" class="headerlink" title="一个警告：信令、STUN和TURN"></a>一个警告：信令、STUN和TURN</h3><p>尽管WebRTC允许点对点的通信，但它依然需要服务器：</p>
<ul>
<li>信令传输：建立点对点的连接需要传输一些媒体和网络相关的元数据信息，需要通过服务器</li>
<li>NAT和防火墙穿透：我们需要通过ICE框架来建立点与点之间的网络路径。可以使用STUN服务器（确定双方的可公开访问你的IP地址和端口）以及TURN服务器（如果直接连接失败，就必须数据中继了）</li>
</ul>
<p><a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/" target="_blank" rel="external">WebRTC in the real world: STUN, TURN, and signaling</a> 文章详细介绍了WebRTC如何与这两种服务器进行交互</p>
<hr>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>RTCDataChannel API支持灵活的数据类型。它的API是模仿WebSocket设计的，并且支持JavaScript中的二进制类型如Blob、ArrayBuffer和ArrayBufferView，另外还支持字符串。这些类型对于文件传输和多玩家的游戏来说意义重大。<br><img src="http://img.blog.csdn.net/20160125152101922" alt="这里写图片描述"><br>以上来自<a href="https://www.igvita.com/" target="_blank" rel="external">Ilya Grigorik</a>的<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch18.html" target="_blank" rel="external">High Performance Browser Networking</a></p>
<p>RTCDataChannel在不可靠模式（类似于UDP）或可靠模式（类似于TCP）下都能够正常工作。但这两种模式有一些不同：</p>
<ul>
<li>可靠模式：保证消息传输一定成功，并保证按序到达。这自然需要一定量的开销，速度也更慢</li>
<li>不可靠模式：不保证消息传输一定成功，也不保证按序到达。这消除了那些开销，速度也更快</li>
</ul>
<p>在不会丢包的情况下，这两种模式的效率差不多。然而，可靠模式下，丢包将造成后续的所有包阻塞，丢失的数据包也将重传直至其成功到达。当然，我们能在同一个应用中使用多个数据通道，每一个有他们自己的可靠性</p>
<p>下面将说明如何去配置可靠模式或不可靠模式的RTCDataChannel</p>
<p><strong>配置数据通道</strong></p>
<p>网上已经有很多RTCDataChannel的例子了：</p>
<ul>
<li><a href="http://simpl.info/dc" target="_blank" rel="external">simpl.info/dc</a></li>
<li><a href="http://googlechrome.github.io/webrtc/dc1.html" target="_blank" rel="external">googlechrome.github.io/webrtc/dc1.html(SCTP或者RTP)</a></li>
<li><a href="http://pubnub.github.io/webrtc" target="_blank" rel="external">pubnub.github.io/webrtc</a>(两个PubNub用户)</li>
</ul>
<p>ps：PubBub是一个实时信息通讯应用开发公司</p>
<p>在这个例子中，浏览器创建了一个对等连接连接到自己。然后在这个对等连接n上创建了一个数据通道，发送了一些消息。最后，消息成功抵达并显示在页面上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var peerConnection = new RTCPeerConnection();</div><div class="line"></div><div class="line">//使用信令传输信道创建对等连接</div><div class="line">var dataChannel =</div><div class="line">  peerConnection.createDataChannel(&quot;myLabel&quot;, dataChannelOptions);</div><div class="line"></div><div class="line">dataChannel.onerror = function (error) &#123;</div><div class="line">  console.log(&quot;Data Channel Error:&quot;, error);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">dataChannel.onmessage = function (event) &#123;</div><div class="line">  console.log(&quot;Got Data Channel Message:&quot;, event.data);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">dataChannel.onopen = function () &#123;</div><div class="line">  dataChannel.send(&quot;Hello World!&quot;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">dataChannel.onclose = function () &#123;</div><div class="line">  console.log(&quot;The Data Channel is Closed&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>dataChannel对象建立在一个已经创建完毕的对等连接之上。它可以创建在信令传输前后。另外，可以赋予一个label来作区分，并提供一系列的配置选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var dataChannelOptions = &#123;</div><div class="line">  ordered: false, //不保证到达顺序</div><div class="line">  maxRetransmitTime: 3000, //最大重传时间</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以加入一个maxRetransimits选项（最大重传次数），但maxRetransimitTime或maxRetransimits只能设定一个，不能两个懂事设定。如果想使用UDP的方式，设定maxRetransmits为0，ordered为false。如果想要获取更多信息，请查看<a href="http://tools.ietf.org/html/rfc4960" target="_blank" rel="external">RFC 4960</a>（SCTP）和<a href="http://tools.ietf.org/html/rfc3758" target="_blank" rel="external">RFC 3758</a>（SCTP部分可靠性）</p>
<ul>
<li>ordered: 数据通道是否保证按序传输数据</li>
<li>maxRetrasmitTime：在信息失败前的最大重传时间（强迫进入不可靠模式）</li>
<li>maxRetransmits：在信息失败前的最大重传次数（强迫进入不可靠模式）</li>
<li>protocol：允许使用一个自协议，但如果协议不支持，将会失败</li>
<li>negotiated：如果设为true，将一处对方的数据通道的自动设置，也就是说，将使用相同的id以自己配置的方式与对方建立数据通道</li>
<li>id：为数据通道提供一个自己定义的ID</li>
</ul>
<p><strong>它安全吗？</strong></p>
<p>在WebRTC所有的组件中，都会强制进行加密。在RTCDataChannel中，所有的数据都使用<a href="https://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security" target="_blank" rel="external">数据报传输层安全性</a>（DTLS）。DTLS是SSL的衍生，也就是说，你的数据将和使用基于SSL的连接一样安全。DTLS已经被标准化，并内置于所有支持WebRTC的浏览器中。如果需要更多关于DTLS信息，请访问<a href="http://wiki.wireshark.org/DTLS" target="_blank" rel="external">Wireshark的维基</a></p>
<p><strong>改变你考虑数据的方式</strong></p>
<p>处理大批量的数据，一直是JavaScript的一个难点。正如<a href="http://www.sharefest.me/" target="_blank" rel="external">Sharefest</a>所提出的观点，我们需要用一种新的方式来考虑数据。如果你需要传输一个比你当前可用内存更大的文件，就必须考虑新的保存信息的方式了。这也就是像<a href="http://www.html5rocks.com/en/tutorials/file/filesystem/" target="_blank" rel="external">FileSystem API</a>等技术存在的意义。我们将在下面进行介绍</p>
<p><strong>搭建一个文件共享应用</strong></p>
<p>现在我们可以通过RTCDataChannel来创建文件共享应用。将应用建立在RTCDataChannel智商也意味着传输的文件数据都将加密，而且不会经过应用的服务器端。通过这个功能，我们能够实现多用户之间的互联，进行文件共享。</p>
<p>需要成功传输一个文件，我们需要如下几步：</p>
<ol>
<li><a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/" target="_blank" rel="external">通过JavaScript的File API读取文件数据</a></li>
<li>使用RTCPeerConnection在用户间创建一个对等连接</li>
<li>使用RTCDataChannel在用户间创建一个数据通道</li>
</ol>
<p>在使用RTCDataChannel时，还有一些其他问题需要考虑：</p>
<ul>
<li>文件大小：如果文件很小，能够直接通过一个Blob进行存储和读取，那么我们可以直接使用File API将其读进内存，并通过可靠的数据通道发送（但是需要注意的是，浏览器有最大传输大小的限制）。随着文件变大的话，就不那么简单了。我们需要一个分块机制：文件将分成多个碎片，称为文件块。我们不再直接发送整个文件，而是一次发送一个文件块。当然文件块上会有一些元数据如块的ID，方便对方能够识别。接收到文件块之后，首先将这些文件块保存在离线存储中（例如，使用FileSystem API），只有当所有块都接收完毕，才将其拼合起来成为完整的文件，保存到用户的硬盘。</li>
<li>速度：文件传输更适合使用可靠模式（像TCP）还是非可靠模式（像UDP）还有待商榷。如果应用知识简单的一对一文件传输，使用不可靠的数据通道将需要设计一定的响应/重传协议。你必须自己来实现它，就算你非常优秀，它仍然不会比使用可靠的数据传输快多少。可靠而无序的数据通道将会更加合适，但是如果是多方文件传输，结果可能会有所不同。</li>
<li>块大小：这些是你的应用中的最小的“原子”数据。目前有传输大小限制（尽管以后可能不会有限制），所以必须要进行分块。目前建议的最大块大小为16KB。</li>
</ul>
<p>如果文件已经被完全传输，就可以使用一个a标签提供下载了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function saveFile(blob) &#123;</div><div class="line">  var link = document.createElement(&apos;a&apos;);</div><div class="line">  link.href = window.URL.createObjectURL(blob);</div><div class="line">  link.download = &apos;File Name&apos;;</div><div class="line">  link.click();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>目前已经有两个文件共享的应用使用了这种方式：<a href="http://pubnub.github.io/rtc-pubnub-fileshare/" target="_blank" rel="external">pubnub.github.io/rtc-pubnub-fileshare</a>和<a href="https://github.com/Peer5/ShareFest" target="_blank" rel="external">github.com/Peer5/ShareFest</a>，这两个应用都是开源的，并提供了基于RTCDataChannel的文件共享</p>
<p><strong>那么我们能做什么？</strong></p>
<p>RTCDataChannel为文件共享、多人游戏以及内容交付应用提供了全新的实现思路：</p>
<ul>
<li>上面已经提到了点对点的文件传输了</li>
<li>多人游戏，与诸如WebGL等其他技术相结合，比如Mozilla的<a href="https://hacks.mozilla.org/2013/03/webrtc-data-channels-for-great-multiplayer/" target="_blank" rel="external">Banana Bread</a></li>
<li>内容交付：由<a href="https://peercdn.com/" target="_blank" rel="external">PeerCDN</a>重新改造的一个用于提供点对点通信提供资源的框架</li>
</ul>
<p><strong>改变你构建应用的方式</strong></p>
<p>现在我们可使用高新能、低延迟的RTCDataChannel来创建更优秀的应用了。一些框架，诸如<a href="http://peerjs.com/" target="_blank" rel="external">PeerJS</a>和<a href="https://github.com/pubnub/webrtc" target="_blank" rel="external">PubNub WebRTC SDK</a>，使得RTCDataChannel更加易于使用，其API也被各个平台所支持</p>
<p>RTCDataChannel所带来的优势能够改变你在浏览器中传输数据的观念。</p>
<hr>
<p>更多资讯</p>
<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">Getting started with WebRTC</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/" target="_blank" rel="external">WebRTC in the real world: STUN, TURN and signaling</a></li>
<li><a href="http://bit.ly/webrtcwebaudio" target="_blank" rel="external">WebRTC resources</a></li>
<li><a href="http://www.w3.org/TR/webrtc/#peer-to-peer-data-api" target="_blank" rel="external">W3C Working Draft</a></li>
<li><a href="http://tools.ietf.org/html/draft-jesup-rtcweb-data-protocol-04" target="_blank" rel="external">IETF WebRTC Data Channel Protocol Draft</a></li>
<li><a href="http://bloggeek.me/send-file-webrtc-data-api/" target="_blank" rel="external">How to send a File Using WebRTC Data API</a></li>
<li>7 <a href="http://bloggeek.me/webrtc-data-channel-uses/" target="_blank" rel="external">Creative Uses of WebRTC’s Data Channel</a></li>
<li><a href="https://developer.mozilla.org/en/demos/detail/bananabread" target="_blank" rel="external">Banana Bread</a> 3D first person shooter game compiled to JS+WebGL, - - using WebRTC data channels in multiplayer mode</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用WebRTC搭建前端视频聊天室——点对点通信篇]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E4%BD%BF%E7%94%A8WebRTC%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%A7%86%E9%A2%91%E8%81%8A%E5%A4%A9%E5%AE%A4%E2%80%94%E2%80%94%E7%82%B9%E5%AF%B9%E7%82%B9%E9%80%9A%E4%BF%A1%E7%AF%87/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://segmentfault.com/a/1190000000733774" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——点对点通信篇</a></p>
<p>WebRTC给我们带来了浏览器中的视频、音频聊天体验。但个人认为，它最实用的特性莫过于DataChannel——在浏览器之间建立一个点对点的数据通道。在DataChannel之前，浏览器到浏览器的数据传递通常是这样一个流程：浏览器1发送数据给服务器，服务器处理，服务器再转发给浏览器2。这三个过程都会带来相应的消耗，占用服务器带宽不说，还减缓了消息从发送到接收的时间。其实最理想的方式就是浏览器1直接与浏览2进行通信，服务器不需要参与其中。WebRTC DataChannel就提供了这样一种方式。</p>
<p>如果对WebRTC和DataChannel不太了解的同学，可以先阅读如下文章：</p>
<ul>
<li><a href="http://lingyu.wang/2014/05/22/webrtc-data-channels/" target="_blank" rel="external">WebRTC的RTCDataChannel</a></li>
<li><a href="http://lingyu.wang/2014/03/18/webRTC-2/" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——信令篇</a></li>
<li><a href="http://lingyu.wang/2014/03/15/webRTC-1/" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——入门篇</a></li>
</ul>
<hr>
<h3 id="老刘和老姚"><a href="#老刘和老姚" class="headerlink" title="老刘和老姚"></a>老刘和老姚</h3><p>当然服务器完全不参与其中，显然是不可能的，用户需要通过服务器上存储的信息，才能确定需要和谁建立连接。这里通过一个故事来讲述建立连接的过程：</p>
<p><strong>不如钓鱼去</strong></p>
<p>一些背景：</p>
<ul>
<li>老刘和老姚都住在同一个小区但不同的片区，小区很破旧，没有电话</li>
<li>片区相互隔离且片区门口有个保安，保安只认识自己片区的人，遇到不认识的人就需要查询凭证才能通过，而凭证需要找物业才能确定</li>
<li>门卫老大爷认识小区里的所有人但是不知道都住哪，有什么消息都可以在出入小区的时候代为传达</li>
</ul>
<p>现在，老刘听说老姚钓鱼技术高超，想和老姚讨论钓鱼技巧。只要老刘和老姚相互之间知道对方的门牌号以及凭证，就可以串门了:</p>
<ol>
<li>门卫老大爷认识老刘和老姚</li>
<li>老刘找物业确定了自己片区的出入凭证，将凭证、自己的门牌号以及意图告诉门卫老大爷，让其转交给老姚</li>
<li>老姚买菜归来遇到门卫老大爷，门卫老大爷将老刘的消息传达给老姚。于是老姚知道怎么去老刘家了</li>
<li>老姚很开心，他也找物业获取了自己小区的凭证，并将凭证、自己的门牌号等信息交给门卫老大爷，希望他传达给老刘</li>
<li>老刘吃早餐回来遇到门卫老大爷，老大爷把老姚的小区凭证、门牌号等信息告诉老刘，这样老刘就知道了怎么去老姚家了</li>
</ol>
<p>老刘和老姚相互之间知道了对方的门牌号和小区出入凭证，他们相互之间有什么需要交流的直接串门就行了，消息不再需要门卫老大爷来代为传达了</p>
<p><strong>换个角度</strong></p>
<p>我们把角色做一个映射：</p>
<ul>
<li>老刘：浏览器1</li>
<li>老姚：浏览器2</li>
<li>片区：不同网段</li>
<li>保安：防火墙</li>
<li>片区凭证：ICE candidate</li>
<li>物业：ICE server</li>
<li>门牌号：session description</li>
<li>门卫老大爷：server</li>
</ul>
<p>于是乎故事就变成了这样：</p>
<ol>
<li>浏览器1和浏览器2在server上注册，并保有连接</li>
<li>浏览器1从ice server获取ice candidate并发送给server，并生成包含session description的offer，发送给server</li>
<li>server发送浏览器1的offer和ice candidate给浏览器2</li>
<li>浏览器2发送包含session description的answer和ice candidate给server</li>
<li>server发送浏览器2的answer和ice candidate给浏览器1</li>
</ol>
<p>这样，就建立了一个点对点的信道，流程如下所示：</p>
<p><img src="http://img.blog.csdn.net/20160125154805889" alt="这里写图片描述"></p>
<hr>
<h3 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h3><p><strong>故事</strong></p>
<p>老刘和老姚已经可以相互串门了，经过一段时间的交流感情越来越深。老姚的亲友送了20斤葡萄给老姚，老姚决定送10斤给老刘。老姚毕竟年事已高，不可能一次带10斤。于是乎，老姚将葡萄分成了10份，每次去老刘家串门就送一份过去。</p>
<p>这里可以做如下类比：</p>
<ol>
<li>10斤葡萄：一个文件（尽管文件分片没有意义，葡萄分开还可以单独吃，但是实在找不到啥好的比喻了）</li>
<li>分成10份：将文件分片，转成多个chunk</li>
<li>老姚一次只能带一斤：datachannel每次传输的数据量不宜太大（<a href="http://stackoverflow.com/questions/15435121/what-is-the-maximum-size-of-webrtc-data-channel-messages" target="_blank" rel="external">找到最合适的大小</a>）</li>
</ol>
<p>这其实就是通过datachannel传输文件的方式，首先将文件分片，然后逐个发送，最后再统一的进行组合成一个新的文件</p>
<p><strong>分片</strong></p>
<p>通过HTML5的File API可以将type为file的input选中的文件读取出来，并转换成data url字符串。这也就为我们提供了很方便的分片方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var reader = new window.FileReader(file);</div><div class="line">reader.readAsDataURL(file);</div><div class="line">reader.onload = function(event, text) &#123;</div><div class="line">    chunkify(event.target.result);//将数据分片</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>组合</strong></p>
<p>通过datachannel发送的分片数据，我们需要将其进行组合，由于是data url字符串，在接收到所有包之后进行拼接就可以了。拼接完成后就得到了一个文件完整的data url字符串，那么我们如何将这个字符串转换成文件呢？</p>
<p>方案一：直接跳转下载</p>
<p>既然是个dataurl，我们直接将其赋值给window.location.href自然可以下载，但是这样下载是没法设定下载后的文件名的，这想一想都蛋疼</p>
<p>方案二：通过a标签下载</p>
<p>这个原理和跳转下载类似，都是使用dataurl本身的特性，通过创建一个a标签，将dataurl字符串赋值给href属性，然后使用download确定下载后的文件名，就可以完成下载了。但是很快又有新问题了，稍微大一点的文件下载的时候页面崩溃了。这是因为dataurl有大小限制</p>
<p>方案三：blob</p>
<p>其实可以通过给a标签创建blob url的方式来进行下载，这个没有大小限制。但是我们手上是dataurl，所以需要先进行转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function dataURItoBlob(dataURI, dataTYPE) &#123;</div><div class="line">    var binary = atob(dataURI.split(&apos;,&apos;)[1]),</div><div class="line">        array = [];</div><div class="line">    for (var i = 0; i &lt; binary.length; i++) array.push(binary.charCodeAt(i));</div><div class="line">    return new Blob([new Uint8Array(array)], &#123;</div><div class="line">        type: dataTYPE</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得blob后，我们就可以通过URL API来下载了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = document.createElement(&quot;a&quot;);</div><div class="line">document.body.appendChild(a);</div><div class="line">a.style = &quot;display: none&quot;;</div><div class="line">var blob = dataURItoBlob(data, &apos;octet/stream&apos;);</div><div class="line">var url = window.URL.createObjectURL(blob);</div><div class="line">a.href = url;</div><div class="line">a.download = filename;</div><div class="line">a.click();</div><div class="line">!moz &amp;&amp; window.URL.revokeObjectURL(url);</div><div class="line">a.parentNode.removeChild(a);</div></pre></td></tr></table></figure>
<p>这里有几个点：</p>
<ol>
<li>datachannel其实是可以直接传送blob的，但是只有ff支持，所以传data url</li>
<li>chrome下载是直接触发的，不会进行询问，firefox会先询问后下载，在询问过程中如果执行了revokeObjectURL，下载就会取消，囧</li>
</ol>
<hr>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>如我们所知，WebRTC最有特点的地方其实是可以传输getUserMedia获得的视频、音频流，来实现视频聊天。但事实上我们的使用习惯来看，一般人不会一开始就打开视频聊天，而且视频聊天时很消耗内存的（32位机上一个连接至少20M左右好像，也有可能有出入）。所以常见的需求是，先建立一个包含datachannel的连接用于传输数据，然后在需要时升级成可以传输视频、音频。</p>
<p>看看我们之前传输的session description，它其实来自<a href="http://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1" target="_blank" rel="external">Session Description Protocol</a>。可以看到wiki上的介绍：</p>
<blockquote>
<p>The Session Description Protocol (SDP) is a format for describing streaming media initialization parameters.</p>
</blockquote>
<p>这意味着什么呢？我们之前建立datachannel是没有加视频、音频流的，而这个流的描述是写在SDP里面的。现在我们需要传输视频、音频，就需要添加这些描述。所以就得重新获得SDP，然后构建offer和answer再传输一次。传输的流程和之前一样，没什么区别。但这一次，我们不需要传输任何的ice candidate，这里我曾经<a href="http://stackoverflow.com/questions/26469794/webrtc-add-ice-candidate-error-on-established-peerconnection" target="_blank" rel="external">遇到了坑</a>，经过国外大大的点拨才明白过来。</p>
<blockquote>
<p>from mattm: You do not need to send ICE candidates on an already established peer connection. The ICE candidates are to make sure the two peers can establish a connection through their potential NAT and firewalls. If you can already send data on the peer connection, ICE candidates will not do anything.</p>
</blockquote>
<p><strong>Peertc</strong></p>
<p>我将datachannel和websocket组合，实现了一个构建点对点连接的库Peertc，它提供非常简洁的方式来建立连接和发送数据、文件和视频/音频流，详情见<a href="https://github.com/LingyuCoder/peertc" target="_blank" rel="external">github</a>。走过路过的记得star一下哦，有什么bug也非常希望能够提出来。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>WebRTC的点对点方式能够运用在很多场景：</p>
<ul>
<li>如web qq这种Web IM工具，这就不说了</li>
<li>如象棋这种双人对战游戏，每一步的数据服务器时不关心的，所以完全可以点对点发送</li>
<li>一对一在线面试、在线教育，这其实是即时通信的一个业务方向</li>
<li>视频裸（），当我没说</li>
</ul>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebRTC工作流程]]></title>
      <url>http://freeshow.github.io/2016/07/23/WebRTC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://segmentfault.com/a/1190000000608413" target="_blank" rel="external">WebRTC 工作流程</a></p>
<p>假设用户A想要和用户B进行视频聊天（使用 socket.io）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">用户A                         服务器                         用户B</div><div class="line">上线                                                        上线</div><div class="line">emit &apos;online&apos;  -&gt;                                      &lt;-   emit &apos;online&apos;</div><div class="line">                             on &apos;online&apos;</div><div class="line">                        &lt;-   emit &apos;online&apos;  -&gt;</div><div class="line">on &apos;online&apos;                                                 on &apos;online&apos;</div><div class="line">获得在线用户列表                                               获得在线用户列表</div><div class="line">选择用户B</div><div class="line">确认要和用户B聊天</div><div class="line">emit &apos;request chat&apos;  -&gt;</div><div class="line">                             on &apos;request chat&apos;</div><div class="line">                             emit &apos;request chat&apos;  -&gt;</div><div class="line">                                                             on &apos;request chat&apos;</div><div class="line">                                                             getUserMedia()</div><div class="line">                                                         &lt;-  emit &apos;stream ok&apos;</div><div class="line">                             on &apos;stream ok&apos;</div><div class="line">                         &lt;-  emit &apos;stream ok&apos;</div><div class="line">on &apos;stream ok&apos;</div><div class="line">getUserMedia()</div><div class="line">emit &apos;stream ok&apos;  -&gt;</div><div class="line">                             on &apos;stream ok&apos;</div><div class="line">                             emit &apos;stream ok&apos;  -&gt;</div><div class="line">                                                              on &apos;stream ok&apos;</div><div class="line">                                                              createPeerConnection()</div><div class="line">                                                              pc.createOffer()</div><div class="line">                                                              pc.setLocalDescription()</div><div class="line">                                                          &lt;-  emit &apos;offer&apos;</div><div class="line">                              on &apos;offer&apos;</div><div class="line">                          &lt;-  emit &apos;offer&apos;</div><div class="line">on &apos;offer&apos;</div><div class="line">createPeerConnection()</div><div class="line">pc.setRemoteDescription</div><div class="line">pc.createAnswer()</div><div class="line">pc.setLocalDescription()</div><div class="line">emit &apos;answer&apos;  -&gt;</div><div class="line">                              on &apos;answer&apos;</div><div class="line">                              emit &apos;answer&apos;  -&gt;</div><div class="line">                                                              on &apos;answer&apos;</div><div class="line">                                                              pc.setRemoteDescription()</div></pre></td></tr></table></figure>
<p>这样就能进行视频聊天了。</p>
<p>其中 createPeerConnection 过程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pc = new RTCPeerConnection(config)</div><div class="line">// 向pc中加入需要发送的流</div><div class="line">pc.addStream(localStream)</div><div class="line">// onicecandidate 处理器会在网络候选可用的时候调用。</div><div class="line">pc.onicecandidate = function (event) &#123;</div><div class="line">    if (event.candidate) &#123;</div><div class="line">        socket.emit(&apos;candidate&apos;, requestSocketId, &#123;</div><div class="line">            type: &apos;candidate&apos;,</div><div class="line">            label: event.candidate.sdpMLineIndex,</div><div class="line">            id: event.candidate.sdpMid,</div><div class="line">            candidate: event.candidate.candidate</div><div class="line">        &#125;);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;End of candidates.&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">// 如果检测到流媒体流到本地，就把它显示出来，同时把流赋值给 remoteStream</div><div class="line">pc.onaddstream = function (event) &#123;</div><div class="line">    attachMediaStream(remoteVideo, event.stream);</div><div class="line">    remoteStream = event.stream;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://blog.segmentfault.com/skyinlayer/1190000000436544" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——入门篇</a></p>
<p><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">Getting Started with WebRTC</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之WebRTC实现]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BWebRTC%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="APK功能介绍："><a href="#APK功能介绍：" class="headerlink" title="APK功能介绍："></a>APK功能介绍：</h3><ol>
<li>实现消息发送</li>
<li>实现视频通话</li>
</ol>
<p>效果图：</p>
<p>1.登录界面：<br><img src="http://img.blog.csdn.net/20160125201404382" alt="这里写图片描述"></p>
<p>2.主界面(联系人列表界面)<br><img src="http://img.blog.csdn.net/20160125201515560" alt="这里写图片描述"></p>
<ol>
<li>发送消息界面<br><img src="http://img.blog.csdn.net/20160125201538779" alt="这里写图片描述"></li>
</ol>
<p>只实现了功能，界面做的很丑，哈哈~~~~</p>
<p>点击联系人可以发送消息，单击电话按钮可以视频通话。</p>
<h3 id="主要技术介绍"><a href="#主要技术介绍" class="headerlink" title="主要技术介绍"></a>主要技术介绍</h3><p>1.消息发送技术，主要采用了XMPP协议(openfire服务器+Smack API 实现)<br>如果不懂，可以看我后面准备要写的关于XMPP博客。</p>
<p>2.视频通话技术，即使用的WebRTC的技术，我转载的那几篇关于WebRTC的博客感觉已经讲的很清楚了。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>等过段时间，就会上传代码，稍等 哈哈</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之WebRTC介绍（二）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BWebRTC%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>WebRTC提供了点对点之间的通信，但并不意味着WebRTC不需要服务器。暂且不说基于服务器的一些扩展业务，WebRTC至少有两件事必须要用到服务器： </p>
<ol>
<li>浏览器之间交换建立通信的元数据（信令）必须通过服务器 </li>
<li>为了穿越NAT和防火墙</li>
</ol>
<p>此处，我们使用XMPP协议实现信令，采用openfire当做服务器，通过openfire服务器+Smack API实现信令的传递。</p>
<p>因此，在建立PeerConnection实例之后，想要使用其建立一个点对点的信道，我们需要做两件事： </p>
<ol>
<li>确定本机上的媒体流的特性，比如分辨率、编解码能力啥的（SDP描述符） </li>
<li>连接两端的主机的网络地址（ICE Candidate）</li>
</ol>
<hr>
<h3 id="通过offer和answer交换SDP描述符"><a href="#通过offer和answer交换SDP描述符" class="headerlink" title="通过offer和answer交换SDP描述符"></a>通过offer和answer交换SDP描述符</h3><p>大致上在两个用户（甲和乙）之间建立点对点连接流程应该是这个样子（这里不考虑错误的情况，PeerConnection简称PC）：</p>
<p>甲和乙各自建立一个PC实例<br>甲通过PC所提供的createOffer()方法建立一个包含甲的SDP描述符的offer信令<br>甲通过PC所提供的setLocalDescription()方法，将甲的SDP描述符交给甲的PC实例<br>甲将offer信令通过服务器发送给乙<br>乙将甲的offer信令中所包含的的SDP描述符提取出来，通过PC所提供的setRemoteDescription()方法交给乙的PC实例<br>乙通过PC所提供的createAnswer()方法建立一个包含乙的SDP描述符answer信令<br>乙通过PC所提供的setLocalDescription()方法，将乙的SDP描述符交给乙的PC实例<br>乙将answer信令通过服务器发送给甲<br>甲接收到乙的answer信令后，将其中乙的SDP描述符提取出来，调用setRemoteDescripttion()方法交给甲自己的PC实例</p>
<p>通过在这一系列的信令交换之后，甲和乙所创建的PC实例都包含甲和乙的SDP描述符了，完成了两件事的第一件。我们还需要完成第二件事——获取连接两端主机的网络地址</p>
<hr>
<h3 id="通过ICE框架建立NAT-防火墙穿越的连接"><a href="#通过ICE框架建立NAT-防火墙穿越的连接" class="headerlink" title="通过ICE框架建立NAT/防火墙穿越的连接"></a>通过ICE框架建立NAT/防火墙穿越的连接</h3><p>这个网络地址应该是能从外界直接访问，WebRTC使用ICE框架来获得这个地址。PeerConnection在创立的时候可以将ICE服务器的地址传递进去，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> private List&lt;PeerConnection.IceServer&gt; getIceServers(String url,String user,String credential)</div><div class="line">&#123;</div><div class="line">    PeerConnection.IceServer turn = new PeerConnection.IceServer(</div><div class="line">                url,user,credential);</div><div class="line">    LinkedList&lt;PeerConnection.IceServer&gt; iceServers = new LinkedList&lt;PeerConnection.IceServer&gt;();</div><div class="line">    iceServers.add(turn);</div><div class="line">    return iceServers;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//iceServer List对象获取</div><div class="line">List&lt;PeerConnection.IceServer&gt; iceServers = getIceServers(CoturnData.url,</div><div class="line">            CoturnData.userName,CoturnData.credential);</div><div class="line">pcConstraints = new MediaConstraints();</div><div class="line">pcConstraints.optional.add(new MediaConstraints.KeyValuePair(</div><div class="line">            &quot;DtlsSrtpKeyAgreement&quot;, &quot;true&quot;));</div><div class="line">pcConstraints.mandatory.add(new</div><div class="line">            MediaConstraints.KeyValuePair(&quot;VoiceActivityDetection&quot;, &quot;false&quot;));</div><div class="line">                </div><div class="line">pc = factory.createPeerConnection(iceServers,pcConstraints,pcObserver);</div></pre></td></tr></table></figure>
<p>当然这个地址也需要交换，还是以甲乙两位为例，交换的流程如下（PeerConnection简称PC）：</p>
<ol>
<li>甲、乙各创建配置了ICE服务器的PC实例，并为其添加onicecandidate事件回调</li>
<li>当网络候选可用时，将会调用onicecandidate函数</li>
<li>在回调函数内部，甲或乙将网络候选的消息封装在ICE Candidate信令中，通过服务器中转，传递给对方</li>
<li>甲或乙接收到对方通过服务器中转所发送过来ICE Candidate信令时，将其解析并获得网络候选，将其通过PC实例的addIceCandidate()方法加入到PC实例中</li>
</ol>
<p>这样连接就创立完成了，可以向RTCPeerConnection中通过addStream()加入流来传输媒体流数据。将流加入到RTCPeerConnection实例中后，对方就可以通过onaddstream所绑定的回调函数监听到了。调用addStream()可以在连接完成之前，在连接建立之后，对方一样能监听到媒体流</p>
<hr>
<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div></pre></td><td class="code"><pre><div class="line">public class VideoCallActivity extends ParentActivity&#123;</div><div class="line">    public static final String VIDEO_TRACK_ID = &quot;video_track_id&quot;;</div><div class="line">    public static final String AUDIO_TRACK_ID = &quot;audio_track_id&quot;;</div><div class="line">    public static final String LOCAL_MEDIA_STREAM_ID = &quot;local_media_stream_id&quot;;</div><div class="line">    private String mServiceName;    //XMPP服务器名称</div><div class="line"></div><div class="line">    private GLSurfaceView mGLSurfaceView;</div><div class="line">    private GLSurfaceView mGLSurfaceViewRemote;</div><div class="line"></div><div class="line">    private PeerConnection pc;</div><div class="line">    private final PCObserver pcObserver = new PCObserver();</div><div class="line">    private final SDPObserver sdpObserver = new SDPObserver();</div><div class="line"></div><div class="line">    private MediaConstraints sdpMediaConstraints;</div><div class="line">    private MediaConstraints pcConstraints;</div><div class="line">    private String remoteName;</div><div class="line">    IceCandidate remoteIceCandidate;</div><div class="line"></div><div class="line">    private boolean mIsInited;</div><div class="line">    private boolean mIsCalled;</div><div class="line">    PeerConnectionFactory factory;</div><div class="line">    VideoCapturer videoCapturer;</div><div class="line">    VideoSource videoSource;</div><div class="line"></div><div class="line">    VideoRenderer localVideoRenderer;</div><div class="line">    VideoRenderer remoteVideoRenderer;</div><div class="line"></div><div class="line">    AudioManager audioManager;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_video_call);</div><div class="line"></div><div class="line">        //打开扬声器</div><div class="line">        audioManager = (AudioManager) getSystemService(AUDIO_SERVICE);</div><div class="line">        audioManager.setSpeakerphoneOn(true);</div><div class="line"></div><div class="line">        mServiceName = connection.getServiceName();</div><div class="line">        mGLSurfaceView = (GLSurfaceView) findViewById(R.id.glsurfaceview);</div><div class="line">//        mGLSurfaceViewRemote = (GLSurfaceView) findViewById(R.id.glsurfaceview_remote);</div><div class="line">        //检查初始化音视频设备是否成功</div><div class="line">        if (!PeerConnectionFactory.initializeAndroidGlobals(this,true,true,true,null))</div><div class="line">        &#123;</div><div class="line">            Log.e(&quot;init&quot;,&quot;PeerConnectionFactory init fail!&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">//        Intent intent = getIntent().getBundleExtra()</div><div class="line"></div><div class="line">        //Media条件信息SDP接口</div><div class="line">        sdpMediaConstraints = new MediaConstraints();</div><div class="line">        //接受远程音频</div><div class="line">        sdpMediaConstraints.mandatory.add(new MediaConstraints.KeyValuePair(</div><div class="line">                &quot;OfferToReceiveAudio&quot;, &quot;true&quot;));</div><div class="line">        //接受远程视频</div><div class="line">        sdpMediaConstraints.mandatory.add(new MediaConstraints.KeyValuePair(</div><div class="line">                &quot;OfferToReceiveVideo&quot;, &quot;true&quot;));</div><div class="line"></div><div class="line">        factory = new PeerConnectionFactory();</div><div class="line"></div><div class="line">        //iceServer List对象获取</div><div class="line">        List&lt;PeerConnection.IceServer&gt; iceServers = getIceServers(CoturnData.url,</div><div class="line">                CoturnData.userName,CoturnData.credential);</div><div class="line">        pcConstraints = new MediaConstraints();</div><div class="line">        pcConstraints.optional.add(new MediaConstraints.KeyValuePair(</div><div class="line">                &quot;DtlsSrtpKeyAgreement&quot;, &quot;true&quot;));</div><div class="line">        pcConstraints.mandatory.add(new</div><div class="line">                MediaConstraints.KeyValuePair(&quot;VoiceActivityDetection&quot;, &quot;false&quot;));</div><div class="line">        pc = factory.createPeerConnection(iceServers,pcConstraints,pcObserver);</div><div class="line"></div><div class="line">        mIsInited = false;</div><div class="line">        mIsCalled=false;</div><div class="line"></div><div class="line">        boolean offer=getIntent().getBooleanExtra(&quot;createOffer&quot;,false);</div><div class="line">        //offer：如果offer为true表示主叫方初始化，如果为false表示被叫方初始化。</div><div class="line">        remoteName = getIntent().getStringExtra(&quot;remoteName&quot;);</div><div class="line">        if(!offer)</div><div class="line">        &#123;</div><div class="line">            initialSystem();</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            callRemote(remoteName);</div><div class="line">        &#125;</div><div class="line">        //当VideoActivity已经打开时，处理后续的intent传过来的数据。</div><div class="line">        processExtraData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onNewIntent(Intent intent) &#123;</div><div class="line">        super.onNewIntent(intent);</div><div class="line">        setIntent(intent);</div><div class="line">        processExtraData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        //通话结束，发送通话结束消息</div><div class="line">        videoCallEnded();</div><div class="line">        //释放资源</div><div class="line">        videoCapturer.dispose();</div><div class="line">        videoSource.stop();</div><div class="line">        if (pc != null) &#123;</div><div class="line">            pc.dispose();</div><div class="line">            pc = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        audioManager.setSpeakerphoneOn(false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void videoCallEnded() &#123;</div><div class="line">        String chatJid = remoteName+&quot;@&quot;+mServiceName;</div><div class="line">        Message message = new Message();</div><div class="line">        VideoInvitation videoInvitation = new VideoInvitation();</div><div class="line">        videoInvitation.setTypeText(&quot;video-ended&quot;);</div><div class="line">        message.addExtension(videoInvitation);</div><div class="line">        Chat chat = createChat(chatJid);</div><div class="line">        try &#123;</div><div class="line">            chat.sendMessage(message);</div><div class="line">        &#125; catch (SmackException.NotConnectedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void processExtraData() &#123;</div><div class="line">        Intent intent = getIntent();</div><div class="line">        //获取SDP数据</div><div class="line">        String sdpType = intent.getStringExtra(&quot;type&quot;);</div><div class="line">        String sdpDescription = intent.getStringExtra(&quot;description&quot;);</div><div class="line">        if (sdpType != null)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            SessionDescription.Type type = SessionDescription.Type.fromCanonicalForm(sdpType);</div><div class="line">            SessionDescription sdp = new SessionDescription(type,sdpDescription);</div><div class="line">            if (pc == null)</div><div class="line">            &#123;</div><div class="line">                Log.e(&quot;pc&quot;,&quot;pc == null&quot;);</div><div class="line">            &#125;</div><div class="line">            pc.setRemoteDescription(sdpObserver,sdp);</div><div class="line"></div><div class="line">            //如果是offer,则被叫方createAnswer</div><div class="line">            if (sdpType.equals(&quot;offer&quot;))</div><div class="line">            &#123;</div><div class="line">                mIsCalled = true;</div><div class="line">                pc.createAnswer(sdpObserver,sdpMediaConstraints);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //获取ICE Candidate数据</div><div class="line">        String iceSdpMid = intent.getStringExtra(&quot;sdpMid&quot;);</div><div class="line">        int iceSdpMLineIndex = intent.getIntExtra(&quot;sdpMLineIndex&quot;,-1);</div><div class="line">        String iceSdp = intent.getStringExtra(&quot;sdp&quot;);</div><div class="line">        if (iceSdpMid != null)</div><div class="line">        &#123;</div><div class="line">            IceCandidate iceCandidate = new IceCandidate(iceSdpMid,iceSdpMLineIndex,iceSdp);</div><div class="line"></div><div class="line">            if (remoteIceCandidate == null)</div><div class="line">            &#123;</div><div class="line">                remoteIceCandidate = iceCandidate;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //下面这步放到函数drainRemoteCandidates()中</div><div class="line">            /*//添加远端的IceCandidate到pc</div><div class="line">            pc.addIceCandidate(iceCandidate);*/</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        //结束activity</div><div class="line">        boolean videoEnded = intent.getBooleanExtra(&quot;videoEnded&quot;,false);</div><div class="line">        if (videoEnded)</div><div class="line">        &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void callRemote(String remoteName) &#123;</div><div class="line">        initialSystem();</div><div class="line">        //createOffer</div><div class="line">        pc.createOffer(sdpObserver,sdpMediaConstraints);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initialSystem() &#123;</div><div class="line">        if (mIsInited)</div><div class="line">        &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        //获取前置摄像头本地视频流</div><div class="line">        String frontDeviceName = VideoCapturerAndroid.getNameOfFrontFacingDevice();</div><div class="line">//        String frontDeviceName = &quot;Camera 1, Facing front, Orientation 0&quot;;</div><div class="line">        Log.e(&quot;CameraName&quot;,&quot;CameraName: &quot;+frontDeviceName);</div><div class="line">        videoCapturer = VideoCapturerAndroid.create(frontDeviceName);</div><div class="line">        if (videoCapturer == null)</div><div class="line">        &#123;</div><div class="line">            Log.e(&quot;open&quot;,&quot;fail to open camera&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        //视频</div><div class="line">        MediaConstraints mediaConstraints = new MediaConstraints();</div><div class="line">        videoSource = factory.createVideoSource(videoCapturer, mediaConstraints);</div><div class="line">        VideoTrack localVideoTrack = factory.createVideoTrack(VIDEO_TRACK_ID, videoSource);</div><div class="line"></div><div class="line">        //音频</div><div class="line">        MediaConstraints audioConstraints = new MediaConstraints();</div><div class="line">        AudioSource audioSource = factory.createAudioSource(audioConstraints);</div><div class="line">        AudioTrack localAudioTrack = factory.createAudioTrack(AUDIO_TRACK_ID,audioSource);</div><div class="line"></div><div class="line">        Runnable runnable = new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        VideoRendererGui.setView(mGLSurfaceView,runnable);</div><div class="line">        try &#123;</div><div class="line">            //改成ScalingType.SCALE_ASPECT_FILL可以显示双方视频，但是显示比例不美观，并且不知道最后一个参数true和false的含义。</div><div class="line">            localVideoRenderer = VideoRendererGui.createGui(0,0,30,30, VideoRendererGui.ScalingType.SCALE_ASPECT_FILL,true);</div><div class="line">            remoteVideoRenderer = VideoRendererGui.createGui(0,0,100,100, VideoRendererGui.ScalingType.SCALE_FILL,true);</div><div class="line">            localVideoTrack.addRenderer(localVideoRenderer);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        MediaStream localMediaStream = factory.createLocalMediaStream(LOCAL_MEDIA_STREAM_ID);</div><div class="line">        localMediaStream.addTrack(localAudioTrack);</div><div class="line">        localMediaStream.addTrack(localVideoTrack);</div><div class="line"></div><div class="line">        pc.addStream(localMediaStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private List&lt;PeerConnection.IceServer&gt; getIceServers(String url,String user,String credential)</div><div class="line">    &#123;</div><div class="line">        PeerConnection.IceServer turn = new PeerConnection.IceServer(</div><div class="line">                url,user,credential);</div><div class="line">        LinkedList&lt;PeerConnection.IceServer&gt; iceServers = new LinkedList&lt;PeerConnection.IceServer&gt;();</div><div class="line">        iceServers.add(turn);</div><div class="line">        return iceServers;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class PCObserver implements PeerConnection.Observer</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onSignalingChange(PeerConnection.SignalingState signalingState) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onIceConnectionChange(PeerConnection.IceConnectionState iceConnectionState) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //发送ICE候选到其他客户端</div><div class="line">        @Override</div><div class="line">        public void onIceCandidate(final IceCandidate iceCandidate) &#123;</div><div class="line">            //利用XMPP发送iceCandidate到其他客户端</div><div class="line">            runOnUiThread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    String chatJid = remoteName+&quot;@&quot;+mServiceName;</div><div class="line">                    Message message = new Message();</div><div class="line">                    IceCandidateExtensionElement iceCandidateExtensionElement=</div><div class="line">                            new IceCandidateExtensionElement();</div><div class="line">                    iceCandidateExtensionElement.setSdpMidText(iceCandidate.sdpMid);</div><div class="line">                    iceCandidateExtensionElement.setSdpMLineIndexText(iceCandidate.sdpMLineIndex);</div><div class="line">                    iceCandidateExtensionElement.setSdpText(iceCandidate.sdp);</div><div class="line">                    message.addExtension(iceCandidateExtensionElement);</div><div class="line">                    Chat chat = createChat(chatJid);</div><div class="line">                    try &#123;</div><div class="line">                        chat.sendMessage(message);</div><div class="line">                    &#125; catch (SmackException.NotConnectedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //Display a media stream from remote</div><div class="line">        @Override</div><div class="line">        public void onAddStream(final MediaStream mediaStream) &#123;</div><div class="line">            runOnUiThread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    if (pc == null)</div><div class="line">                    &#123;</div><div class="line">                        Log.e(&quot;onAddStream&quot;,&quot;pc == null&quot;);</div><div class="line">                        return;</div><div class="line">                    &#125;</div><div class="line">                    if (mediaStream.videoTracks.size()&gt;1 || mediaStream.audioTracks.size()&gt;1)</div><div class="line">                    &#123;</div><div class="line">                        Log.e(&quot;onAddStream&quot;,&quot;size &gt; 1&quot;);</div><div class="line">                        return;</div><div class="line">                    &#125;</div><div class="line">                    if (mediaStream.videoTracks.size() == 1)</div><div class="line">                    &#123;</div><div class="line">                        VideoTrack videoTrack = mediaStream.videoTracks.get(0);</div><div class="line">                        videoTrack.addRenderer(remoteVideoRenderer);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onRemoveStream(final MediaStream mediaStream) &#123;</div><div class="line">            runOnUiThread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    mediaStream.videoTracks.get(0).dispose();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onDataChannel(DataChannel dataChannel) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onRenegotiationNeeded() &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class SDPObserver implements SdpObserver</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onCreateSuccess(final SessionDescription sessionDescription) &#123;</div><div class="line">            //sendMessage(offer);</div><div class="line">            runOnUiThread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    String chatJid = remoteName+&quot;@&quot;+mServiceName;</div><div class="line">                    Message message = new Message();</div><div class="line">                    SDPExtensionElement sdpExtensionElement = new SDPExtensionElement();</div><div class="line">                    sdpExtensionElement.setTypeText(sessionDescription.type.canonicalForm());</div><div class="line">                    sdpExtensionElement.setDescriptionText(sessionDescription.description);</div><div class="line">                    message.addExtension(sdpExtensionElement);</div><div class="line">                    Chat chat = createChat(chatJid);</div><div class="line">                    try &#123;</div><div class="line">                        chat.sendMessage(message);</div><div class="line">                    &#125; catch (SmackException.NotConnectedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    pc.setLocalDescription(sdpObserver,sessionDescription);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onSetSuccess() &#123;</div><div class="line">            runOnUiThread(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    //主叫方</div><div class="line">                    if (!mIsCalled)</div><div class="line">                    &#123;</div><div class="line">                        if (pc.getRemoteDescription() != null)</div><div class="line">                        &#123;</div><div class="line">                            drainRemoteCandidates();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    //被叫方</div><div class="line">                    else</div><div class="line">                    &#123;</div><div class="line">                        //如果被叫方还没有createAnswer</div><div class="line">                        if (pc.getLocalDescription() == null)</div><div class="line">                        &#123;</div><div class="line">                            Log.e(&quot;SDPObserver&quot;, &quot;SDPObserver create answer&quot;);</div><div class="line">                        &#125;</div><div class="line">                        else</div><div class="line">                        &#123;</div><div class="line">                            drainRemoteCandidates();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private void drainRemoteCandidates() &#123;</div><div class="line">            if (remoteIceCandidate == null)</div><div class="line">            &#123;</div><div class="line">                Log.e(&quot;SDPObserver&quot;,&quot;remoteIceCandidate == null&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            pc.addIceCandidate(remoteIceCandidate);</div><div class="line">            Log.e(&quot;IceCanditate&quot;,&quot;添加IceCandidate成功&quot;);</div><div class="line">            remoteIceCandidate = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onCreateFailure(String s) &#123;</div><div class="line">            Log.e(&quot;SDPObserver&quot;,&quot;onCreateFailure&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onSetFailure(String s) &#123;</div><div class="line">            Log.e(&quot;SDPObserver&quot;,&quot;onSetFailure&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之WebRTC介绍（一）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Android%E4%B9%8BWebRTC%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>参考自：<br><a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/" target="_blank" rel="external">Introduction to WebRTC on Android</a><br><a href="http://www.tuicool.com/articles/VvueErU" target="_blank" rel="external">Android之WebRTC介绍</a></p>
<p>WebRTC被誉为是web长期开源开发的一个新启元，是近年来web开发的最重要创新。WebRTC允许Web开发者在其web应用中添加视频聊天或者点对点数据传输，不需要复杂的代码或者昂贵的配置。目前支持Chrome、Firefox和Opera，后续会支持更多的浏览器，它有能力达到数十亿的设备。</p>
<p>然而，WebRTC一直被误解为仅适合于浏览器。事实上，WebRTC最重要的一个特征是允许本地和web应用间的互操作，很少有人使用到这个特性。</p>
<p>本文将探讨如何在自己的Android应用中植入WebRTC，使用 WebRTC Initiative 中提供的本地库。这边文章不会讲解如何使用信号机制建立通话，而是重点探讨Android与浏览器中实现的差异性和相似性。下文将讲解Android中实现对应功能的一些接口。如果想要了解WebRTC的基础知识，强烈推荐 <a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">Sam Dutton’s Getting started with WebRTC</a> 。</p>
<h3 id="项目中添加WebRTC"><a href="#项目中添加WebRTC" class="headerlink" title="项目中添加WebRTC"></a>项目中添加WebRTC</h3><p>下面的讲解基于Android WebRTC库版本9127.</p>
<p>首先要做的是在应用中添加WebRTC库。 <a href="http://www.webrtc.org/" target="_blank" rel="external">WebRTC Initiative</a> 提供了 <a href="http://www.webrtc.org/native-code/android" target="_blank" rel="external">一种简洁的方式来编译</a> ，但尽量不要采用那种方式。取而代之，建议使用原始的io编译版本，可以从 maven central repository 中获取。</p>
<p>添加WebRTC到工程中，需要在你的依赖中添加如下内容：</p>
<blockquote>
<p>compile ‘io.pristine:libjingle:9127@aar’</p>
</blockquote>
<p>同步工程后，WebRTC库就准备就绪。</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>同其他Android应用一样，使用某些 API 需要申请相应权限。WebRTC也不例外。制作的应用不同，或者需要的功能不同，例如音频或者视频，所需要的权限集也是不同的。请确保按需申请！一个好的视频聊天应用权限集如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt;</div><div class="line">&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; /&gt;</div><div class="line">&lt;uses-feature android:glEsVersion=&quot;0x00020000&quot; android:required=&quot;true&quot; /&gt;</div><div class="line"></div><div class="line">&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;</div></pre></td></tr></table></figure>
<p>###灯光，摄影，工厂</p>
<p>在浏览器中使用WebRTC时，有一些功能完善、说明详细的API可供使用。 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia" target="_blank" rel="external">navigator.getUserMedia</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection" target="_blank" rel="external">RTCPeerConnection</a> 包含了可能用到的几乎所有功能。结合 <video> 标签使用，可以显示任何想要显示的本地视频流和远程视频流。</video></p>
<p>所幸的是Android上也有相同的API，虽然它们的名字有所不同。Android相关的API有 <a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/#VideoCapturerAndroid" target="_blank" rel="external">VideoCapturerAndroid</a> , <a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/#VideoRenderer" target="_blank" rel="external">VideoRenderer</a> , <a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/#MediaStream" target="_blank" rel="external">MediaStream</a> , <a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/#PeerConnection" target="_blank" rel="external">PeerConnection</a> , 和 <a href="https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/#PeerConnectionFactory" target="_blank" rel="external">PeerConnectionFactory</a> 。下面我们将逐一讲解。</p>
<p>在开始之前，需要创建PeerConnectionFactory，这是Android上使用WebRTC最核心的API。</p>
<p><strong>PeerConnectionFactory</strong></p>
<p>Android WebRTC最核心的类。理解这个类并了解它如何创建其他任何事情是深入了解Android中WebRTC的关键。它和我们期望的方式还是有所不同的，所以我们开始深入挖掘它。</p>
<p>首先需要初始化PeerConnectionFactory，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// First, we initiate the PeerConnectionFactory with</div><div class="line">// our application context and some options.</div><div class="line">PeerConnectionFactory.initializeAndroidGlobals(</div><div class="line">    context,</div><div class="line">    initializeAudio,</div><div class="line">    initializeVideo,</div><div class="line">    videoCodecHwAcceleration,</div><div class="line">    renderEGLContext);</div></pre></td></tr></table></figure>
<p>为了理解这个方法，需要了解每个参数的意义：</p>
<ul>
<li>context：应用上下文，或者上下文相关的，和其他地方传递的一样。</li>
<li>initializeAudio：是否初始化音频的布尔值。</li>
<li>initializeVideo：是否初始化视频的布尔值。跳过这两个就允许跳过请求API的相关权限，例如数据通道应用。</li>
<li>videoCodecHwAcceleration：是否允许硬件加速的布尔值。</li>
<li>renderEGLContext：用来提供支持硬件视频解码，可以在视频解码线程中创建共享EGL上下文。可以为空——在本文例子中硬件视频解码将产生yuv420帧而非texture帧。</li>
<li>initializeAndroidGlobals也是返回布尔值，true表示一切OK，false表示有失败。如果返回false是最好的练习。更多信息请参考 源码 。</li>
</ul>
<p>如果一切ok，可以使用PeerConnectionFactory 的构造函数创建自己的工厂，和其他类一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PeerConnectionFactory peerConnectionFactory = new PeerConnectionFactory();</div></pre></td></tr></table></figure>
<p><strong>行动、获取媒体流、渲染</strong></p>
<p>有了 peerConnectionFactory 实例，就可以从用户设备获取视频和音频，最终将其渲染到屏幕上。web中可以使用 getUserMedia 和 <video> 。在Android中，没有这么简单，但可以有更多选择！在Android中，我们需要了解VideoCapturerAndroid，VideoSource，VideoTrack和VideoRenderer，先从VideoCapturerAndroid开始。</video></p>
<p><strong>VideoCapturerAndroid</strong></p>
<p>VideoCapturerAndroid其实是一系列Camera API的封装，为访问摄像头设备的流信息提供了方便。它允许获取多个摄像头设备信息，包括前置摄像头，或者后置摄像头。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// Returns the number of camera devices                       </div><div class="line">VideoCapturerAndroid.getDeviceCount();                        </div><div class="line">                                                             </div><div class="line">// Returns the front face device name                         </div><div class="line">VideoCapturerAndroid.getNameOfFrontFacingDevice();            </div><div class="line">// Returns the back facing device name                        </div><div class="line">VideoCapturerAndroid.getNameOfBackFacingDevice();             </div><div class="line">                                                             </div><div class="line">// Creates a VideoCapturerAndroid instance for the device name</div><div class="line">VideoCapturerAndroid.create(name);</div></pre></td></tr></table></figure>
<p>有了包含摄像流信息的VideoCapturerAndroid实例，就可以创建从本地设备获取到的包含视频流信息的MediaStream，从而发送给另一端。但做这些之前，我们首先研究下如何将自己的视频显示到应用上面。</p>
<p><strong>VideoSource/VideoTrack</strong></p>
<p>从VideoCapturer实例中获取一些有用信息，或者要达到最终目标————为连接端获取合适的媒体流，或者仅仅是将它渲染给用户，我们需要了解VideoSource 和 VideoTrack类。</p>
<p><a href="https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/java/src/org/webrtc/VideoSource.java" target="_blank" rel="external">VideoSource</a> 允许方法开启、停止设备捕获视频。这在为了延长电池寿命而禁止视频捕获的情况下比较有用。</p>
<p><a href="https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/java/src/org/webrtc/VideoTrack.java" target="_blank" rel="external">VideoTrack</a> 是简单的添加VideoSource到MediaStream 对象的一个封装。</p>
<p>我们通过代码看看它们是如何一起工作的。 capturer 是VideoCapturer的实例， videoConstraints 是MediaConstraints的实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// First we create a VideoSource                                     </div><div class="line">VideoSource videoSource =                                            </div><div class="line">       peerConnectionFactory.createVideoSource(capturer, videoConstraints);</div><div class="line">                                                                       </div><div class="line">// Once we have that, we can create our VideoTrack                   </div><div class="line">// Note that VIDEO_TRACK_ID can be any string that uniquely          </div><div class="line">// identifies that video track in your application                   </div><div class="line">VideoTrack localVideoTrack =                                         </div><div class="line">       peerConnectionFactory.createVideoTrack(VIDEO_TRACK_ID, videoSource);</div></pre></td></tr></table></figure>
<p><strong>AudioSource/AudioTrack</strong></p>
<p><a href="https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/java/src/org/webrtc/AudioSource.java" target="_blank" rel="external">AudioSource</a> 和 <a href="https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/java/src/org/webrtc/AudioSource.java" target="_blank" rel="external">AudioTrack</a> 与VideoSource和VideoTrack相似，只是不需要AudioCapturer 来获取麦克风， audioConstraints 是 MediaConstraints的一个实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// First we create an AudioSource                                    </div><div class="line">AudioSource audioSource =                                            </div><div class="line">        peerConnectionFactory.createAudioSource(audioConstraints);          </div><div class="line">                                                                       </div><div class="line">// Once we have that, we can create our AudioTrack                   </div><div class="line">// Note that AUDIO_TRACK_ID can be any string that uniquely          </div><div class="line">// identifies that audio track in your application                   </div><div class="line">AudioTrack localAudioTrack =                                         </div><div class="line">        peerConnectionFactory.createAudioTrack(AUDIO_TRACK_ID, audioSource);</div></pre></td></tr></table></figure>
<p><strong>VideoRenderer</strong></p>
<p>通过在浏览器中使用WebRTC，你肯定已经熟悉了使用 <video> 标签来显示出从 getUserMedia 方法得到的 MediaStream。但在本地Android中，没有类似 <video> 的标签。进入VideoRenderer，WebRTC库允许通过 VideoRenderer.Callbacks 实现自己的渲染。另外，它提供了一种非常好的默认方式VideoRendererGui。简而言之， <a href="https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/java/android/org/webrtc/VideoRendererGui.java" target="_blank" rel="external">VideoRendererGui</a> 是一个 <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> ，使用它可以绘制自己的视频流。我们通过代码看一下它是如何工作的，以及如何添加renderer 到 VideoTrack。</video></video></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// To create our VideoRenderer, we can use the                           </div><div class="line">// included VideoRendererGui for simplicity                              </div><div class="line">// First we need to set the GLSurfaceView that it should render to       </div><div class="line">GLSurfaceView videoView = (GLSurfaceView) findViewById(R.id.glview_call);</div><div class="line">                                                                            </div><div class="line">// Then we set that view, and pass a Runnable                            </div><div class="line">// to run once the surface is ready                                      </div><div class="line">VideoRendererGui.setView(videoView, runnable);                           </div><div class="line">                                                                           </div><div class="line">// Now that VideoRendererGui is ready, we can get our VideoRenderer      </div><div class="line">VideoRenderer renderer = VideoRendererGui.createGui(x, y, width, height);</div><div class="line">                                                                          </div><div class="line">// And finally, with our VideoRenderer ready, we                         </div><div class="line">// can add our renderer to the VideoTrack.                               </div><div class="line">localVideoTrack.addRenderer(renderer);</div></pre></td></tr></table></figure>
<p>这里要说明的一点是createGui 需要四个参数。这样做是使一个单一的GLSurfaceView 渲染所有视频成为可能。但在实际使用中我们使用了多个GLSurfaceViews，这意味为了渲染正常，x、y一直是0。这让我们了解到实现过程中各个参数的意义。</p>
<p><strong>MediaConstraints</strong></p>
<p>MediaConstraints是支持不同约束的WebRTC库方式的类，可以加载到MediaStream中的音频和视频轨道。具体参考 规范 查看支持列表。对于大多数需要MediaConstraints的方法，一个简单的MediaConstraints实例就可以做到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MediaConstraints audioConstraints = new MediaConstraints();</div></pre></td></tr></table></figure>
<p>要添加实际约束，可以定义 KeyValuePairs ，并将其推送到约束的 mandatory 或者 optional list。</p>
<p><strong>MediaStream</strong></p>
<p>现在可以在本地看见自己了，接下来就要想办法让对方看见自己。在web开发时，对 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API" target="_blank" rel="external">MediaStream</a> 已经很熟悉了。 getUserMedia 直接返回MediaStream ，然后将其添加到RTCPeerConnection 传送给对方。在Android上此方法也是通用的，只是我们需要自己创建MediaStream。 接下来我们就研究如何添加本地的VideoTrack 和AudioTrack来创建一个合适的MediaStream。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// We start out with an empty MediaStream object,                                             </div><div class="line">// created with help from our PeerConnectionFactory                                           </div><div class="line">// Note that LOCAL_MEDIA_STREAM_ID can be any string                                          </div><div class="line">MediaStream mediaStream = peerConnectionFactory.createLocalMediaStream(LOCAL_MEDIA_STREAM_ID);</div><div class="line">                                                                                                </div><div class="line">// Now we can add our tracks.                                                                 </div><div class="line">mediaStream.addTrack(localVideoTrack);                                                        </div><div class="line">mediaStream.addTrack(localAudioTrack);</div></pre></td></tr></table></figure>
<p><strong>Hi，有人在那里吗？</strong></p>
<p>我们现在有了包含视频流和音频流的MediaStream实例，而且在屏幕上显示了我们漂亮的脸庞。现在就该把这些信息传送给对方了。这篇文章不会介绍如何建立自己的信号流，我们直接介绍对应的API方法，以及它们如何与web关联的。 AppRTC 使用 autobahn 使得WebSocket连接到信号端。我建议下载下来这个项目来仔细研究下如何在Android中建立自己的信号流。</p>
<p><strong>PeerConnection</strong></p>
<p>现在我们有了自己的MediaStream，就可以开始连接远端了。幸运的是这部分和web上的处理很相似，所以如果对浏览器中的WebRTC熟悉的话，这部分就相当简单了。创建PeerConnection很简单，只需要PeerConnectionFactory的协助即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PeerConnection peerConnection = peerConnectionFactory.createPeerConnection(</div><div class="line">         iceServers,                                                               </div><div class="line">         constraints,                                                              </div><div class="line">         observer);</div></pre></td></tr></table></figure>
<p>参数的作用如下：</p>
<ul>
<li><p>iceServers：连接到外部设备或者网络时需要用到这个参数。在这里添加STUN 和 TURN 服务器就允许进行连接，即使在网络条件很差的条件下。</p>
</li>
<li><p>constraints：MediaConstraints的一个实例，应该包含 offerToRecieveAudio 和 offerToRecieveVideo</p>
</li>
<li><p>observer：PeerConnectionObserver实现的一个实例。</p>
</li>
</ul>
<p>PeerConnection 和web上的对应API很相似，包含了addStream、addIceCandidate、createOffer、createAnswer、getLocalDescription、setRemoteDescription 和其他类似方法。下载 <a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-rtcpeerconnection" target="_blank" rel="external">WebRTC入门</a> 来学习如何协调所有工作在两点之间建立起通讯通道，或者 <a href="https://chromium.googlesource.com/external/webrtc/+/master/talk" target="_blank" rel="external">AppRTC</a> 如何使得一个实时的功能完整的Android WebRTC应用工作的。我们快速浏览一下这几个重要的方法，看它们是如何工作的。</p>
<p><strong>addStream</strong></p>
<p>这个是用来将MediaStream 添加到PeerConnection中的,如同它的命名一样。如果你想要对方看到你的视频、听到你的声音，就需要用到这个方法。</p>
<p><strong>addIceCandidate</strong></p>
<p>一旦内部IceFramework发现有candidates允许其他方连接你时，就会创建 <a href="http://stackoverflow.com/questions/21069983/what-are-ice-candidates-and-how-do-the-peer-connection-choose-between-them/21071464#21071464" target="_blank" rel="external">IceCandidates</a> 。当通过PeerConnectionObserver.onIceCandidate传递数据到对方时，需要通过任何一个你选择的信号通道获取到对方的IceCandidates。使用addIceCandidate 添加它们到PeerConnection，以便PeerConnection可以通过已有信息试图连接对方。</p>
<p><strong>createOffer/createAnswer</strong></p>
<p>这两个方法用于原始通话的建立。如你所知，在WebRTC中，已经有了caller和callee的概念，一个是呼叫，一个是应答。createOffer是caller使用的，它需要一个sdpObserver，它允许获取和传输会话描述协议Session Description Protocol (SDP)给对方，还需要一个MediaConstraint。一旦对方得到了这个请求，它将创建一个应答并将其传输给caller。SDP是用来给对方描述期望格式的数据（如video、formats、codecs、encryption、resolution、 size等）。一旦caller收到这个应答信息，双方就相互建立的通信需求达成了一致，如视频、音频、解码器等。</p>
<p><strong>setLocalDescription/setRemoteDescription</strong></p>
<p>这个是用来设置createOffer和createAnswer产生的SDP数据的，包含从远端获取到的数据。它允许内部PeerConnection 配置链接以便一旦开始传输音频和视频就可以开始真正工作。</p>
<p><strong>PeerConnectionObserver</strong></p>
<p>这个接口提供了一种监测PeerConnection事件的方法，例如收到MediaStream时，或者发现iceCandidates 时，或者需要重新建立通讯时。这些在功能上与web相对应，如果你学习过相关web开发理解这个不会很困难，或者学习 <a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-rtcpeerconnection" target="_blank" rel="external">WebRTC入门</a> 。这个接口必须被实现，以便你可以有效处理收到的事件，例如当对方变为可见时，向他们发送信号iceCandidates。</p>
<hr>
<p>###结束语</p>
<p>如上所述，如果你了解了如何与web相对应，Android上面的API是非常简单易懂的。有了以上这些工具，我们就可以开发出一个WebRTC相关产品，立即部署到数十亿设备上。</p>
<p>WebRTC打开了人与人之间的通讯，对开发者免费，对终端用户免费。 它不仅仅提供了视频聊天，还有其他应用，比如健康服务、低延迟文件传输、种子下载、甚至游戏应用。</p>
<p>想要看到一个真正的WebRTC应用实例，请下载 <a href="https://play.google.com/store/apps/details?id=appear.in.app&amp;referrer=utm_source=tech.appear.in&amp;utm_medium=blog&amp;utm_campaign=android-launch-may15" target="_blank" rel="external">Android</a> 或 <a href="https://itunes.apple.com/app/apple-store/id878583078?pt=1259761&amp;ct=tech.appear.in&amp;mt=8" target="_blank" rel="external">ios</a> 版的appear.in。它在浏览器和本地应用间运行的相当完美，在同一个房间内最多可以8个人免费使用。不需要安装和注册。</p>
<p>现在就发挥你们的潜力，开发出更多新的应用！</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebRTC之turn服务器搭建]]></title>
      <url>http://freeshow.github.io/2016/07/23/WebRTC%E4%B9%8Bturn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="coturn服务器介绍："><a href="#coturn服务器介绍：" class="headerlink" title="coturn服务器介绍："></a>coturn服务器介绍：</h3><blockquote>
<p>1.This project evolved from rfc5766-turn-server project (<a href="https://code.google.com/p/rfc5766-turn-server/" target="_blank" rel="external">https://code.google.com/p/rfc5766-turn-server/</a>). There are many new advanced TURN specs which are going far beyond the original RFC 5766 document. This project takes the code of rfc5766-turn-server as the starter, and adds new advanced features to it.</p>
<p>2.<strong>Free open source implementation of TURN and STUN Server</strong><br>The TURN Server is a VoIP media traffic NAT traversal server and gateway. It can be used as a general-purpose network traffic TURN server and gateway, too.</p>
<p>On-line management interface (over telnet or over HTTPS) for the TURN server is available.</p>
<p>The implementation also includes some extra experimental features.</p>
</blockquote>
<h3 id="coturn服务器下载地址：coturn"><a href="#coturn服务器下载地址：coturn" class="headerlink" title="coturn服务器下载地址：coturn"></a>coturn服务器下载地址：<a href="https://github.com/coturn/coturn" target="_blank" rel="external">coturn</a></h3><h3 id="coturn服务器安装教程：coturn安装"><a href="#coturn服务器安装教程：coturn安装" class="headerlink" title="coturn服务器安装教程：coturn安装"></a>coturn服务器安装教程：<a href="https://github.com/coturn/coturn/wiki/CoturnConfig" target="_blank" rel="external">coturn安装</a></h3></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openfire之SSL认证]]></title>
      <url>http://freeshow.github.io/2016/07/23/openfire%E4%B9%8BSSL%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>原先Android版 asmack连接服务器时默认已经实现了SSL认证，但是最新版Smack 4.1 以及以上版本没有实现SSL认证。</p>
<p>Smack 4.1 以及以上版本实现SSL认证方法：</p>
<p>无意中发现github上有个开源项目，可以进行SSL认证。</p>
<p>项目地址：<a href="https://github.com/ge0rg/MemorizingTrustManager" target="_blank" rel="external">A “plugin” for Android Java to allow asking the user about SSL certificates</a></p>
<p>实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SmackConfiguration.DEBUG = <span class="keyword">true</span>;</div><div class="line">XMPPTCPConnectionConfiguration.Builder configBuilder = XMPPTCPConnectionConfiguration.builder();</div><div class="line"><span class="comment">//设置服务器IP地址</span></div><div class="line">configBuilder.setHost(host);</div><div class="line"><span class="comment">//设置服务器端口</span></div><div class="line">configBuilder.setPort(port);</div><div class="line"><span class="comment">//设置服务器名称</span></div><div class="line">configBuilder.setServiceName(serviceName);</div><div class="line"><span class="comment">//设置开启调试</span></div><div class="line">configBuilder.setDebuggerEnabled(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//设置开启压缩，可以节省流量</span></div><div class="line">configBuilder.setCompressionEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//SSL认证</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	SSLContext sc = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">    MemorizingTrustManager mtm = <span class="keyword">new</span> MemorizingTrustManager(ctx);</div><div class="line">    sc.init(<span class="keyword">null</span>, <span class="keyword">new</span> X509TrustManager[]&#123;mtm&#125;, <span class="keyword">new</span> java.security.SecureRandom());</div><div class="line">    configBuilder.setCustomSSLContext(sc);</div><div class="line">    configBuilder.setHostnameVerifier(</div><div class="line">		mtm.wrapHostnameVerifier(<span class="keyword">new</span> org.apache.http.conn.ssl.StrictHostnameVerifier()));</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException|KeyManagementException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">XMPPTCPConnection connection = <span class="keyword">new</span> XMPPTCPConnection(configBuilder.build());</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于openfire+smack开发Android即时聊天应用[一]-用户注册、登陆、修改密码、注销等]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E5%9F%BA%E4%BA%8Eopenfire-smack%E5%BC%80%E5%8F%91Android%E5%8D%B3%E6%97%B6%E8%81%8A%E5%A4%A9%E5%BA%94%E7%94%A8-%E4%B8%80-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E3%80%81%E7%99%BB%E9%99%86%E3%80%81%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E3%80%81%E6%B3%A8%E9%94%80%E7%AD%89/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="1-开发准备"><a href="#1-开发准备" class="headerlink" title="1.开发准备"></a>1.开发准备</h3><p>在官网上下载最新的Smack开发包，我下载的是smack4.1.4版本的，导入相应的jar包即可开始开发工作<br><img src="http://img.blog.csdn.net/20160126104517535" alt="这里写图片描述"></p>
<p>注意：导入Smack4.1.x包后，需要导入额外的第三方jar包<br><img src="http://img.blog.csdn.net/20160126104823489" alt="这里写图片描述"></p>
<p>第三方jar包下载地址：</p>
<hr>
<h3 id="2-Openfire服务连接-连接服务器"><a href="#2-Openfire服务连接-连接服务器" class="headerlink" title="2.Openfire服务连接(连接服务器)"></a>2.Openfire服务连接(连接服务器)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">public class XMPPUtil &#123;</div><div class="line"></div><div class="line">    //openfire服务器地址</div><div class="line">    private static String host = &quot;222.195.xxx.xxx&quot;;</div><div class="line">    private static int port = 5222;</div><div class="line">    //openfire服务器名称</div><div class="line">    private static String serviceName = &quot;openfireName&quot;;</div><div class="line"></div><div class="line">    //连接服务器</div><div class="line">    public static XMPPTCPConnection getXMPPConnection(Context ctx) &#123;</div><div class="line"></div><div class="line">        SmackConfiguration.DEBUG = true;</div><div class="line">        XMPPTCPConnectionConfiguration.Builder configBuilder = XMPPTCPConnectionConfiguration.builder();</div><div class="line">        //设置服务器IP地址</div><div class="line">        configBuilder.setHost(host);</div><div class="line">        //设置服务器端口</div><div class="line">        configBuilder.setPort(port);</div><div class="line">        //设置服务器名称</div><div class="line">        configBuilder.setServiceName(serviceName);</div><div class="line">        //设置开启调试</div><div class="line">        configBuilder.setDebuggerEnabled(true);</div><div class="line">        //设置开启压缩，可以节省流量</div><div class="line">        configBuilder.setCompressionEnabled(true);</div><div class="line"></div><div class="line">        //SSL认证</div><div class="line">        try &#123;</div><div class="line">            SSLContext sc = SSLContext.getInstance(&quot;TLS&quot;);</div><div class="line">            MemorizingTrustManager mtm = new MemorizingTrustManager(ctx);</div><div class="line">            sc.init(null, new X509TrustManager[]&#123;mtm&#125;, new java.security.SecureRandom());</div><div class="line">            configBuilder.setCustomSSLContext(sc);</div><div class="line">            configBuilder.setHostnameVerifier(</div><div class="line">                    mtm.wrapHostnameVerifier(new org.apache.http.conn.ssl.StrictHostnameVerifier()));</div><div class="line">        &#125; catch (NoSuchAlgorithmException|KeyManagementException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        XMPPTCPConnection connection = new XMPPTCPConnection(configBuilder.build());</div><div class="line"></div><div class="line">        connection.addConnectionListener(new ConnectionListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void connected(XMPPConnection xmppConnection) &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;connected&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void authenticated(XMPPConnection xmppConnection, boolean b) &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;authenticated&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void connectionClosed() &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;connectionClosed&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void connectionClosedOnError(Exception e) &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;connectionClosedOnError&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void reconnectionSuccessful() &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;reconnectionSuccessful&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void reconnectingIn(int i) &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;reconnectionIn: &quot;+i);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void reconnectionFailed(Exception e) &#123;</div><div class="line">                Log.e(&quot;connect&quot;,&quot;reconnectionFailed&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            connection.connect();</div><div class="line">        &#125; catch (SmackException | IOException | XMPPException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        return connection;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中的SSL认证可以参考：<a href="http://blog.csdn.net/u011026329/article/details/50582957" target="_blank" rel="external">openfire之SSL认证</a></p>
<hr>
<h3 id="3-登录openfire服务器"><a href="#3-登录openfire服务器" class="headerlink" title="3.登录openfire服务器"></a>3.登录openfire服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static boolean login(Context ctx, String username, String password) &#123;</div><div class="line">        XMPPTCPConnection connection = getXMPPConnection(ctx);</div><div class="line">        if (connection == null)</div><div class="line">        &#123;</div><div class="line">            Log.e(&quot;login&quot;,&quot;connection == null&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            connection.login(username, password);</div><div class="line">            return true;</div><div class="line">        &#125; catch (XMPPException|SmackException|IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            Log.e(&quot;login&quot;,&quot;login failure&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-用户注册"><a href="#4-用户注册" class="headerlink" title="4.用户注册"></a>4.用户注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public Boolean registerUser(String username,String password)</div><div class="line">&#123;</div><div class="line">    try &#123;</div><div class="line">        XMPPTCPConnection connection = XMPPUtil.getXMPPConnection(this);</div><div class="line">        if (connection == null)</div><div class="line">        &#123;</div><div class="line">            try &#123;</div><div class="line">                connection.connect();</div><div class="line">            &#125; catch (SmackException | IOException | XMPPException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;connect&quot;,&quot;连接服务器失败!&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        AccountManager.getInstance(connection).createAccount(username,password);</div><div class="line">        finish();</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    catch (SmackException.NoResponseException | XMPPException.XMPPErrorException |</div><div class="line">            SmackException.NotConnectedException e)</div><div class="line">    &#123;</div><div class="line">        Log.e(&quot;register&quot;, &quot;注册失败！&quot;);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="5-修改账号密码"><a href="#5-修改账号密码" class="headerlink" title="5.修改账号密码"></a>5.修改账号密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">protected boolean isConnected()</div><div class="line">&#123;</div><div class="line">    if (connection == null)</div><div class="line">    &#123;</div><div class="line">       return false;</div><div class="line">    &#125;</div><div class="line">    if (!connection.isConnected())</div><div class="line">    &#123;</div><div class="line">        try &#123;</div><div class="line">            connection.connect();</div><div class="line">            return true;</div><div class="line">        &#125; catch (SmackException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">        &#125; catch (XMPPException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">   return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 修改密码</div><div class="line"> * @param newpassword    新密码</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public boolean changePassword(String newpassword) &#123;</div><div class="line">	if(!isConnected()) &#123;</div><div class="line">    	return false;</div><div class="line">    &#125;</div><div class="line">	try &#123;</div><div class="line">	    AccountManager.getInstance(connection).changePassword(newpassword);</div><div class="line">	    return true;</div><div class="line">	&#125; catch (NoResponseException | XMPPErrorException | NotConnectedException e) &#123;</div><div class="line">	    Log.e(TAG, &quot;密码修改失败&quot;, e);</div><div class="line">	    return false;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下opensips安装配置]]></title>
      <url>http://freeshow.github.io/2016/07/23/ubuntu%E4%B8%8Bopensips%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">


<h3 id="1-opensips安装"><a href="#1-opensips安装" class="headerlink" title="1.opensips安装"></a>1.opensips安装</h3><p>opensips需要编译源码安装<br>官网：<a href="http://opensips.org" target="_blank" rel="external">http://opensips.org</a><br>我下载的是:opensips-2.1.2_src.tar.gz</p>
<p><strong>安装依赖库：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">apt-get install gcc bison flex make openssl</div><div class="line">libmysqlclient-dev perl libdbi-perl libdbd-mysql-perl</div><div class="line">libdbd-pg-perl libfrontier-rpc-perl libterm-readline-gnu-perl</div><div class="line">libberkeleydb-perl mysql-server ssh libxml2 libxml2-dev</div><div class="line">libxmlrpc-core-c3-dev libpcre3 libpcre3-dev subversion</div><div class="line">libncurses5-dev git ngrep libssl-dev</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xcf opensips-2.1.2_src.tar.gz</div><div class="line">cd opensips-2.1.2-tls/</div><div class="line">sudo make menuconfig</div></pre></td></tr></table></figure>
<p>在menuconfig中选择—&gt;Configure Compile Options—&gt; Configure Excluded Modules<br>方向键向下滚动，按空格选中[*] db_mysql</p>
<p><img src="http://img.blog.csdn.net/20160307191112407" alt="这里写图片描述"></p>
<p>按q键返回上一级，选择—&gt; Configure Install Prefix，输入/usr/local/opensips_proxy后按回车表示安装在/usr/local/opensips_proxy目录下。<br><img src="http://img.blog.csdn.net/20160307191359566" alt="这里写图片描述"></p>
<p>选择 —&gt; Save Changes 保存修改。<br>按q返回，选择 —&gt; Compile And Install OpenSIPS，回车安装。</p>
<p>安装完成后会将配置文件放在/usr/local/opensips_proxy/etc/opensips目录下。运行文件在/usr/local/opensips_proxy/sbin目录下。<br>如果出现依赖错误，先通过apt-get安装依赖。<br>源代码安装软件要注意查看README，INSTALL等文件，这些文件里有很重要的说明和安装信息，里面有安装Opensips所需要的依赖包。</p>
<p>opensips安装之后的文件目录：</p>
<ul>
<li>/sbin/中的可执行命令有如下：opensips 、opensipsctl  、  opensipsdbctl  、 opensipsunix</li>
<li>/etc/opensips/中的配置文件有：opensips.cfg、opensipsctlrc和osipsconsolerc</li>
<li>/lib/opensips/中的库文件有：modules和 opensipsctl两个目录。modules为当前opensips所支持的模块</li>
</ul>
<h3 id="2-opensips配置"><a href="#2-opensips配置" class="headerlink" title="2.opensips配置"></a>2.opensips配置</h3><p>opensips的配置文件都在/etc/opensips/中，分别为opensips.cfg、opensipsctlrc和osipsconsolerc。</p>
<p>opensips.cfg文件主要用于opensips启动的配置，所有应用功能的配置都在这个文件中说明。该配置文件主要由三个部分组成：</p>
<font color="red">第一部分是全局变量，如：</font>

<p>  listen=udp:127.0.0.1:5060</p>
<p>  disable_tcp=yes</p>
<p>  disable_tls=yes等。</p>
<font color="red">第二部分主要用来加载模块，并设置相应参数，如：</font>

<p>loadmodule “db_mysql.so”<br>loadmodule “auth.so”<br>loadmodule “auth_db.so”<br>modparam(“auth”, “calculate_ha1”, yes)<br>modparam(“auth_db”, “password_column”, “password”)等。</p>
<font color="red">第三部分主要是路由策略和功能应用，如：</font>

<p>route[relay] {</p>
<h1 id="for-INVITEs-enable-some-additional-helper-routes"><a href="#for-INVITEs-enable-some-additional-helper-routes" class="headerlink" title="for INVITEs enable some additional helper routes"></a>for INVITEs enable some additional helper routes</h1><p>if (is_method(“INVITE”)) {<br>    t_on_branch(“per_branch_ops”);<br>    t_on_reply(“handle_nat”);<br>    t_on_failure(“missed_call”);<br>}</p>
<p>opensipsctlrc文件中包含了数据库配置的信息。</p>
<p>(1)<br>进入/usr/local/opensips_proxy/etc/opensips目录，运行osipsconfig命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/opensips_proxy/sbin</div><div class="line">sudo ./osipsconfig</div></pre></td></tr></table></figure>
<p>依次选择—&gt; Generate OpenSIPS Script —&gt; Residential Script —&gt; Configure Residential Script<br>选中如下几项<br>[<em>] ENABLE_TCP<br>[</em>] USE_ALIASES<br>[<em>] USE_AUTH<br>[</em>] USE_DBACC<br>[<em>] USE_DBUSRLOC<br>[</em>] USE_DIALOG<br>[<em>] USE_NAT<br>按q返回，选择 —&gt; Generate Residential Script 回车，生成新的配置文件。按q(三次)退出命令<br>将新生成的opensips<em>residential</em></em>.cfg文件重命名为opensips.cfg编辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/opensips_proxy/etc/opensips/</div><div class="line">sudo mv opensips_residential_2016-3-7_16:19:22.cfg opensips.cfg</div><div class="line">sudo vi opensips.cfg</div></pre></td></tr></table></figure>
<p>总共改动了3处：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># $Id$</div><div class="line">#</div><div class="line"># OpenSIPS residential configuration script</div><div class="line">#     by OpenSIPS Solutions &lt;team@opensips-solutions.com&gt;</div><div class="line">#</div><div class="line"># This script was generated via &quot;make menuconfig&quot;, from</div><div class="line">#   the &quot;Residential&quot; scenario.</div><div class="line"># You can enable / disable more features / functionalities by</div><div class="line">#   re-generating the scenario with different options.#</div><div class="line">#</div><div class="line"># Please refer to the Core CookBook at:</div><div class="line">#      http://www.opensips.org/Resources/DocsCookbooks</div><div class="line"># for a explanation of possible statements, functions and parameters.</div><div class="line">#</div><div class="line"></div><div class="line">####### Global Parameters #########</div><div class="line"></div><div class="line">debug=3</div><div class="line">log_stderror=no</div><div class="line">log_facility=LOG_LOCAL0</div><div class="line"></div><div class="line">fork=yes</div><div class="line">children=4</div><div class="line"></div><div class="line">/* uncomment the following lines to enable debugging */</div><div class="line">#debug=6</div><div class="line">#fork=no</div><div class="line">#log_stderror=yes</div><div class="line"></div><div class="line">/* uncomment the next line to enable the auto temporary blacklisting of </div><div class="line">   not available destinations (default disabled) */</div><div class="line">#disable_dns_blacklist=no</div><div class="line"></div><div class="line">/* uncomment the next line to enable IPv6 lookup after IPv4 dns </div><div class="line">   lookup failures (default disabled) */</div><div class="line">#dns_try_ipv6=yes</div><div class="line"></div><div class="line">/* comment the next line to enable the auto discovery of local aliases</div><div class="line">   based on revers DNS on IPs */</div><div class="line">auto_aliases=no</div><div class="line"></div><div class="line">#改动第1处</div><div class="line">#注意：xxx.xxx.xxx.xxx.xxx是你自己的IP地址，不可以写为127.0.0.1</div><div class="line">listen=udp:xxx.xxx.xxx.xxx:5060   # CUSTOMIZE ME</div><div class="line"></div><div class="line">listen=tcp:xxx.xxx.xxx.xxx:5060   # CUSTOMIZE ME </div><div class="line"></div><div class="line"></div><div class="line">####### Modules Section ########</div><div class="line"></div><div class="line">#set module path</div><div class="line">mpath=&quot;/usr/local/opensips_proxy//lib64/opensips/modules/&quot;</div><div class="line"></div><div class="line">#### SIGNALING module</div><div class="line">loadmodule &quot;signaling.so&quot;</div><div class="line"></div><div class="line">#### StateLess module</div><div class="line">loadmodule &quot;sl.so&quot;</div><div class="line"></div><div class="line">#### Transaction Module</div><div class="line">loadmodule &quot;tm.so&quot;</div><div class="line">modparam(&quot;tm&quot;, &quot;fr_timeout&quot;, 5)</div><div class="line">modparam(&quot;tm&quot;, &quot;fr_inv_timeout&quot;, 30)</div><div class="line">modparam(&quot;tm&quot;, &quot;restart_fr_on_each_reply&quot;, 0)</div><div class="line">modparam(&quot;tm&quot;, &quot;onreply_avp_mode&quot;, 1)</div><div class="line"></div><div class="line">#### Record Route Module</div><div class="line">loadmodule &quot;rr.so&quot;</div><div class="line">/* do not append from tag to the RR (no need for this script) */</div><div class="line">modparam(&quot;rr&quot;, &quot;append_fromtag&quot;, 0)</div><div class="line"></div><div class="line">#### MAX ForWarD module</div><div class="line">loadmodule &quot;maxfwd.so&quot;</div><div class="line"></div><div class="line">#### SIP MSG OPerationS module</div><div class="line">loadmodule &quot;sipmsgops.so&quot;</div><div class="line"></div><div class="line">#### FIFO Management Interface</div><div class="line">loadmodule &quot;mi_fifo.so&quot;</div><div class="line">modparam(&quot;mi_fifo&quot;, &quot;fifo_name&quot;, &quot;/tmp/opensips_fifo&quot;)</div><div class="line">modparam(&quot;mi_fifo&quot;, &quot;fifo_mode&quot;, 0666)</div><div class="line"></div><div class="line"></div><div class="line">#### URI module</div><div class="line">loadmodule &quot;uri.so&quot;</div><div class="line">modparam(&quot;uri&quot;, &quot;use_uri_table&quot;, 0)</div><div class="line">modparam(&quot;uri&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#### MYSQL module</div><div class="line">loadmodule &quot;db_mysql.so&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#### USeR LOCation module</div><div class="line">loadmodule &quot;usrloc.so&quot;</div><div class="line">modparam(&quot;usrloc&quot;, &quot;nat_bflag&quot;, &quot;NAT&quot;)</div><div class="line">modparam(&quot;usrloc&quot;, &quot;db_mode&quot;,   2)</div><div class="line">modparam(&quot;usrloc&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line"></div><div class="line">#### REGISTRAR module</div><div class="line">loadmodule &quot;registrar.so&quot;</div><div class="line">modparam(&quot;registrar&quot;, &quot;tcp_persistent_flag&quot;, &quot;TCP_PERSISTENT&quot;)</div><div class="line">modparam(&quot;registrar&quot;, &quot;received_avp&quot;, &quot;$avp(received_nh)&quot;)</div><div class="line">/* uncomment the next line not to allow more than 10 contacts per AOR */</div><div class="line">#modparam(&quot;registrar&quot;, &quot;max_contacts&quot;, 10)</div><div class="line"></div><div class="line">#### ACCounting module</div><div class="line">loadmodule &quot;acc.so&quot;</div><div class="line">/* what special events should be accounted ? */</div><div class="line">modparam(&quot;acc&quot;, &quot;early_media&quot;, 0)</div><div class="line">modparam(&quot;acc&quot;, &quot;report_cancels&quot;, 0)</div><div class="line">/* by default we do not adjust the direct of the sequential requests.</div><div class="line">   if you enable this parameter, be sure the enable &quot;append_fromtag&quot;</div><div class="line">   in &quot;rr&quot; module */</div><div class="line">modparam(&quot;acc&quot;, &quot;detect_direction&quot;, 0)</div><div class="line">modparam(&quot;acc&quot;, &quot;failed_transaction_flag&quot;, &quot;ACC_FAILED&quot;)</div><div class="line">/* account triggers (flags) */</div><div class="line">modparam(&quot;acc&quot;, &quot;db_flag&quot;, &quot;ACC_DO&quot;)</div><div class="line">modparam(&quot;acc&quot;, &quot;db_missed_flag&quot;, &quot;ACC_MISSED&quot;)</div><div class="line">modparam(&quot;acc&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line"></div><div class="line">#### AUTHentication modules</div><div class="line">loadmodule &quot;auth.so&quot;</div><div class="line">loadmodule &quot;auth_db.so&quot;</div><div class="line">modparam(&quot;auth_db&quot;, &quot;calculate_ha1&quot;, yes)</div><div class="line">modparam(&quot;auth_db&quot;, &quot;password_column&quot;, &quot;password&quot;)</div><div class="line">modparam(&quot;auth_db|uri&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line">modparam(&quot;auth_db&quot;, &quot;load_credentials&quot;, &quot;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">#### ALIAS module</div><div class="line">loadmodule &quot;alias_db.so&quot;</div><div class="line">modparam(&quot;alias_db&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#### DIALOG module</div><div class="line">loadmodule &quot;dialog.so&quot;</div><div class="line">modparam(&quot;dialog&quot;, &quot;dlg_match_mode&quot;, 1)</div><div class="line">modparam(&quot;dialog&quot;, &quot;default_timeout&quot;, 21600)  # 6 hours timeout</div><div class="line">modparam(&quot;dialog&quot;, &quot;db_mode&quot;, 2)</div><div class="line">modparam(&quot;dialog&quot;, &quot;db_url&quot;,</div><div class="line">	&quot;mysql://opensips:opensipsrw@localhost/opensips&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line"></div><div class="line">####  NAT modules</div><div class="line">loadmodule &quot;nathelper.so&quot;</div><div class="line">modparam(&quot;nathelper&quot;, &quot;natping_interval&quot;, 10)</div><div class="line">modparam(&quot;nathelper&quot;, &quot;ping_nated_only&quot;, 1)</div><div class="line">modparam(&quot;nathelper&quot;, &quot;sipping_bflag&quot;, &quot;SIP_PING_FLAG&quot;)</div><div class="line">modparam(&quot;nathelper&quot;, &quot;sipping_from&quot;, &quot;sip:pinger@127.0.0.1&quot;) #CUSTOMIZE ME</div><div class="line">modparam(&quot;nathelper&quot;, &quot;received_avp&quot;, &quot;$avp(received_nh)&quot;)</div><div class="line"></div><div class="line">#改动第2处</div><div class="line">#端口号22222可以随便修改，但是必须和后面安装的rtpproxy的端口号相同</div><div class="line">loadmodule &quot;rtpproxy.so&quot;</div><div class="line">modparam(&quot;rtpproxy&quot;, &quot;rtpproxy_sock&quot;, &quot;udp:localhost:22222&quot;) # CUSTOMIZE ME</div><div class="line"></div><div class="line">#改动第3处</div><div class="line">#增加MediaProxy模块</div><div class="line">#增加下边这一段</div><div class="line">#### MediaProxy module</div><div class="line">loadmodule &quot;mediaproxy.so&quot;</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;disable&quot;, 0)</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;mediaproxy_socket&quot;, &quot;/var/run/mediaproxy/dispatcher.sock&quot;)</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;mediaproxy_timeout&quot;, 1000)</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;signaling_ip_avp&quot;, &quot;$avp(nat_ip)&quot;)</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;media_relay_avp&quot;, &quot;$avp(media_relay)&quot;)</div><div class="line">modparam(&quot;mediaproxy&quot;, &quot;ice_candidate&quot;, &quot;low-priority&quot;)</div><div class="line"></div><div class="line">loadmodule &quot;proto_udp.so&quot;</div><div class="line"></div><div class="line">loadmodule &quot;proto_tcp.so&quot; </div><div class="line"></div><div class="line"></div><div class="line">####### Routing Logic ########</div><div class="line"></div><div class="line"># main request routing logic</div><div class="line"></div><div class="line">route&#123;</div><div class="line">	force_rport();</div><div class="line">	if (nat_uac_test(&quot;23&quot;)) &#123;</div><div class="line">		if (is_method(&quot;REGISTER&quot;)) &#123;</div><div class="line">			fix_nated_register();</div><div class="line">			setbflag(NAT);</div><div class="line">		&#125; else &#123;</div><div class="line">			fix_nated_contact();</div><div class="line">			setflag(NAT);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> 	</div><div class="line"></div><div class="line">	if (!mf_process_maxfwd_header(&quot;10&quot;)) &#123;</div><div class="line">		sl_send_reply(&quot;483&quot;,&quot;Too Many Hops&quot;);</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (has_totag()) &#123;</div><div class="line">		# sequential request withing a dialog should</div><div class="line">		# take the path determined by record-routing</div><div class="line">		if (loose_route()) &#123;</div><div class="line">			</div><div class="line">			# validate the sequential request against dialog</div><div class="line">			if ( $DLG_status!=NULL &amp;&amp; !validate_dialog() ) &#123;</div><div class="line">				xlog(&quot;In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n&quot;);</div><div class="line">				## exit;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			if (is_method(&quot;BYE&quot;)) &#123;</div><div class="line">				setflag(ACC_DO); # do accounting ...</div><div class="line">				setflag(ACC_FAILED); # ... even if the transaction fails</div><div class="line">			&#125; else if (is_method(&quot;INVITE&quot;)) &#123;</div><div class="line">				# even if in most of the cases is useless, do RR for</div><div class="line">				# re-INVITEs alos, as some buggy clients do change route set</div><div class="line">				# during the dialog.</div><div class="line">				record_route();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			if (check_route_param(&quot;nat=yes&quot;)) </div><div class="line">				setflag(NAT);</div><div class="line"></div><div class="line">			# route it out to whatever destination was set by loose_route()</div><div class="line">			# in $du (destination URI).</div><div class="line">			route(relay);</div><div class="line">		&#125; else &#123;</div><div class="line">			</div><div class="line">			if ( is_method(&quot;ACK&quot;) ) &#123;</div><div class="line">				if ( t_check_trans() ) &#123;</div><div class="line">					# non loose-route, but stateful ACK; must be an ACK after </div><div class="line">					# a 487 or e.g. 404 from upstream server</div><div class="line">					t_relay();</div><div class="line">					exit;</div><div class="line">				&#125; else &#123;</div><div class="line">					# ACK without matching transaction -&gt;</div><div class="line">					# ignore and discard</div><div class="line">					exit;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			sl_send_reply(&quot;404&quot;,&quot;Not here&quot;);</div><div class="line">		&#125;</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# CANCEL processing</div><div class="line">	if (is_method(&quot;CANCEL&quot;))</div><div class="line">	&#123;</div><div class="line">		if (t_check_trans())</div><div class="line">			t_relay();</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	t_check_trans();</div><div class="line"></div><div class="line">	if ( !(is_method(&quot;REGISTER&quot;)  ) ) &#123;</div><div class="line">		</div><div class="line">		if (from_uri==myself)</div><div class="line">		</div><div class="line">		&#123;</div><div class="line">			</div><div class="line">			# authenticate if from local subscriber</div><div class="line">			# authenticate all initial non-REGISTER request that pretend to be</div><div class="line">			# generated by local subscriber (domain from FROM URI is local)</div><div class="line">			if (!proxy_authorize(&quot;&quot;, &quot;subscriber&quot;)) &#123;</div><div class="line">				proxy_challenge(&quot;&quot;, &quot;0&quot;);</div><div class="line">				exit;</div><div class="line">			&#125;</div><div class="line">			if (!db_check_from()) &#123;</div><div class="line">				sl_send_reply(&quot;403&quot;,&quot;Forbidden auth ID&quot;);</div><div class="line">				exit;</div><div class="line">			&#125;</div><div class="line">		</div><div class="line">			consume_credentials();</div><div class="line">			# caller authenticated</div><div class="line">			</div><div class="line">		&#125; else &#123;</div><div class="line">			# if caller is not local, then called number must be local</div><div class="line">			</div><div class="line">			if (!uri==myself) &#123;</div><div class="line">				send_reply(&quot;403&quot;,&quot;Rely forbidden&quot;);</div><div class="line">				exit;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# preloaded route checking</div><div class="line">	if (loose_route()) &#123;</div><div class="line">		xlog(&quot;L_ERR&quot;,</div><div class="line">		&quot;Attempt to route with preloaded Route&apos;s [$fu/$tu/$ru/$ci]&quot;);</div><div class="line">		if (!is_method(&quot;ACK&quot;))</div><div class="line">			sl_send_reply(&quot;403&quot;,&quot;Preload Route denied&quot;);</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# record routing</div><div class="line">	if (!is_method(&quot;REGISTER|MESSAGE&quot;))</div><div class="line">		record_route();</div><div class="line"></div><div class="line">	# account only INVITEs</div><div class="line">	if (is_method(&quot;INVITE&quot;)) &#123;</div><div class="line">		</div><div class="line">		# create dialog with timeout</div><div class="line">		if ( !create_dialog(&quot;B&quot;) ) &#123;</div><div class="line">			send_reply(&quot;500&quot;,&quot;Internal Server Error&quot;);</div><div class="line">			exit;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		setflag(ACC_DO); # do accounting</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	if (!uri==myself) &#123;</div><div class="line">		append_hf(&quot;P-hint: outbound\r\n&quot;); </div><div class="line">		</div><div class="line">		route(relay);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# requests for my domain</div><div class="line">	</div><div class="line">	if (is_method(&quot;PUBLISH|SUBSCRIBE&quot;))</div><div class="line">	&#123;</div><div class="line">		sl_send_reply(&quot;503&quot;, &quot;Service Unavailable&quot;);</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (is_method(&quot;REGISTER&quot;))</div><div class="line">	&#123;</div><div class="line">		# authenticate the REGISTER requests</div><div class="line">		if (!www_authorize(&quot;&quot;, &quot;subscriber&quot;))</div><div class="line">		&#123;</div><div class="line">			www_challenge(&quot;&quot;, &quot;0&quot;);</div><div class="line">			exit;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		if (!db_check_to()) </div><div class="line">		&#123;</div><div class="line">			sl_send_reply(&quot;403&quot;,&quot;Forbidden auth ID&quot;);</div><div class="line">			exit;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if ( proto==TCP ||  0 ) setflag(TCP_PERSISTENT);</div><div class="line"></div><div class="line">		if (isflagset(NAT)) &#123;</div><div class="line">			setbflag(SIP_PING_FLAG);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (!save(&quot;location&quot;))</div><div class="line">			sl_reply_error();</div><div class="line"></div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if ($rU==NULL) &#123;</div><div class="line">		# request with no Username in RURI</div><div class="line">		sl_send_reply(&quot;484&quot;,&quot;Address Incomplete&quot;);</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	# apply DB based aliases</div><div class="line">	alias_db_lookup(&quot;dbaliases&quot;);</div><div class="line"></div><div class="line">	</div><div class="line"></div><div class="line">	 </div><div class="line"></div><div class="line">	# do lookup with method filtering</div><div class="line">	if (!lookup(&quot;location&quot;,&quot;m&quot;)) &#123;</div><div class="line">		if (!db_does_uri_exist()) &#123;</div><div class="line">			send_reply(&quot;420&quot;,&quot;Bad Extension&quot;);</div><div class="line">			exit;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		t_newtran();</div><div class="line">		t_reply(&quot;404&quot;, &quot;Not Found&quot;);</div><div class="line">		exit;</div><div class="line">	&#125; </div><div class="line"></div><div class="line">	if (isbflagset(NAT)) setflag(NAT);</div><div class="line"></div><div class="line">	# when routing via usrloc, log the missed calls also</div><div class="line">	setflag(ACC_MISSED);</div><div class="line">	route(relay);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">route[relay] &#123;</div><div class="line">	# for INVITEs enable some additional helper routes</div><div class="line">	if (is_method(&quot;INVITE&quot;)) &#123;</div><div class="line">		</div><div class="line">		if (isflagset(NAT)) &#123;</div><div class="line">			rtpproxy_offer(&quot;ro&quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		t_on_branch(&quot;per_branch_ops&quot;);</div><div class="line">		t_on_reply(&quot;handle_nat&quot;);</div><div class="line">		t_on_failure(&quot;missed_call&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (isflagset(NAT)) &#123;</div><div class="line">		add_rr_param(&quot;;nat=yes&quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	if (!t_relay()) &#123;</div><div class="line">		send_reply(&quot;500&quot;,&quot;Internal Error&quot;);</div><div class="line">	&#125;;</div><div class="line">	exit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">branch_route[per_branch_ops] &#123;</div><div class="line">	xlog(&quot;new branch at $ru\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">onreply_route[handle_nat] &#123;</div><div class="line">	if (nat_uac_test(&quot;1&quot;))</div><div class="line">		fix_nated_contact();</div><div class="line">	if ( isflagset(NAT) )</div><div class="line">		rtpproxy_answer(&quot;ro&quot;);</div><div class="line">	xlog(&quot;incoming reply\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">failure_route[missed_call] &#123;</div><div class="line">	if (t_was_cancelled()) &#123;</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# uncomment the following lines if you want to block client </div><div class="line">	# redirect based on 3xx replies.</div><div class="line">	##if (t_check_status(&quot;3[0-9][0-9]&quot;)) &#123;</div><div class="line">	##t_reply(&quot;404&quot;,&quot;Not found&quot;);</div><div class="line">	##	exit;</div><div class="line">	##&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">local_route &#123;</div><div class="line">	if (is_method(&quot;BYE&quot;) &amp;&amp; $DLG_dir==&quot;UPSTREAM&quot;) &#123;</div><div class="line">		</div><div class="line">		acc_db_request(&quot;200 Dialog Timeout&quot;, &quot;acc&quot;);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2)修改opensipsctlrc文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/opensips_proxy/etc/opensips</div><div class="line">sudo vi opensipsctlrc</div></pre></td></tr></table></figure>
<p>去掉所有DB相关的注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># $Id$</div><div class="line">#</div><div class="line"># The OpenSIPS configuration file for the control tools.</div><div class="line">#</div><div class="line"># Here you can set variables used in the opensipsctl and opensipsdbctl setup</div><div class="line"># scripts. Per default all variables here are commented out, the control tools</div><div class="line"># will use their internal default values.</div><div class="line"></div><div class="line">## your SIP domain</div><div class="line"> SIP_DOMAIN=xxx.xxx.xxx.xxx  #你自己的IP地址</div><div class="line"></div><div class="line">## chrooted directory</div><div class="line"># $CHROOT_DIR=&quot;/path/to/chrooted/directory&quot;</div><div class="line"></div><div class="line">## database type: MYSQL, PGSQL, ORACLE, DB_BERKELEY, or DBTEXT, </div><div class="line">## by default none is loaded</div><div class="line"># If you want to setup a database with opensipsdbctl, you must at least specify</div><div class="line"># this parameter.</div><div class="line"> DBENGINE=MYSQL</div><div class="line"></div><div class="line">## database host</div><div class="line"> DBHOST=localhost</div><div class="line"></div><div class="line">## database name (for ORACLE this is TNS name)</div><div class="line"> DBNAME=opensips</div><div class="line"></div><div class="line"># database path used by dbtext or db_berkeley</div><div class="line"># DB_PATH=&quot;/usr/local/etc/opensips/dbtext&quot;</div><div class="line"></div><div class="line">## database read/write user</div><div class="line"> DBRWUSER=opensips</div><div class="line"></div><div class="line">## password for database read/write user</div><div class="line"> DBRWPW=&quot;opensipsrw&quot;</div><div class="line"></div><div class="line">## database super user (for ORACLE this is &apos;scheme-creator&apos; user)</div><div class="line"> DBROOTUSER=&quot;root&quot;</div><div class="line"></div><div class="line"># user name column</div><div class="line"># USERCOL=&quot;username&quot;</div></pre></td></tr></table></figure></p>
<p>为opensips新建数据库，增加域名及用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/opensips_proxy/sbin/</div><div class="line">sudo ./opensipsdbctl create</div><div class="line">sudo ./opensipsctl domain add xdty.org #如果没有域名可不用添加</div><div class="line">sudo ./opensipsctl add 10000 123456</div><div class="line">sudo ./opensipsctl add 10001 123456</div></pre></td></tr></table></figure>
<h3 id="3-安装rtpproxy并配置"><a href="#3-安装rtpproxy并配置" class="headerlink" title="3.安装rtpproxy并配置"></a>3.安装rtpproxy并配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install rtpproxy</div><div class="line">sudo vi /etc/default/rtpproxy</div></pre></td></tr></table></figure>
<p>修改为如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Defaults for rtpproxy</div><div class="line"></div><div class="line"># The control socket.</div><div class="line">#CONTROL_SOCK=&quot;unix:/var/run/rtpproxy/rtpproxy.sock&quot;</div><div class="line"># To listen on an UDP socket, uncomment this line:</div><div class="line">CONTROL_SOCK=udp:127.0.0.1:22222</div><div class="line"></div><div class="line"># Additional options that are passed to the daemon.</div><div class="line">EXTRA_OPTS=&quot;&quot;</div><div class="line">LISTEN_ADDR=xxx.xxx.xxx.xxx #你自己的IP地址</div><div class="line">EXTRA_OPTS=&quot;-l $&#123;LISTEN_ADDR&#125;&quot;</div></pre></td></tr></table></figure></p>
<p>启动rtpproxy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo killall rtpproxy</div><div class="line">sudo /etc/init.d/rtpproxy start</div></pre></td></tr></table></figure>
<p>注意：如果rtpproxy启动失败，请检查/etc/init.d/rtpproxy脚本DAEMON路径是否正确，默认为DAEMON=/usr/sbin/\$NAME，可能要改为DAEMON=/usr/bin/\$NAME</p>
<h3 id="4-安装并配置mediaproxy"><a href="#4-安装并配置mediaproxy" class="headerlink" title="4.安装并配置mediaproxy"></a>4.安装并配置mediaproxy</h3><p>导入源密钥，增加mediaproxy的源到/etc/apt/sources.list</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.ag-projects.com/agp-debian-gpg.key</div><div class="line">sudo apt-key add agp-debian-gpg.key</div><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>最后位置添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://ag-projects.com/ubuntu precise main</div><div class="line">deb-src http://ag-projects.com/ubuntu precise main</div></pre></td></tr></table></figure>
<p>安装mediaproxy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install mediaproxy-dispatcher mediaproxy-relay mediaproxy-web-sessions</div></pre></td></tr></table></figure>
<p>因media-relay需要内核支持ipv4 forwarding,所以需要执行(以root用户执行):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo su</div><div class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure>
<font color="red">注意：可以vi /proc/sys/net/ipv4/ip_forward查看里面是否为1,有时候还是为0，如果此时为0，继续执行一遍echo 1 &gt; /proc/sys/net/ipv4/ip_forward，直到里面的内容为1</font>

<p>在文件/etc/sysctl.config中打开net.ipv4.ip_forward=1 这样即便重启设备也可以运行mediaproxy了。</p>
<p>另外，media的dispatcher和relay之间需要通过tls通信，故需要在/etc/mediaproxy/tls/中有认证文件，进入/etc/mediaproxy/tls目录，拷本密钥文件，修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /etc/mediaproxy/tls/</div><div class="line">sudo cp /usr/share/doc/mediaproxy-common/tls/* .</div><div class="line">cd ..</div><div class="line">sudo vi config.ini</div></pre></td></tr></table></figure>
<p>修改为类似如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[Relay]</div><div class="line">dispatchers = xxx.xxx.xxx.xxx #你自己的地址</div><div class="line">passport = None</div><div class="line">relay_ip = xxx.xxxx.xxx.xxx #你自己的IP地址</div><div class="line">port_range = 50000:60000</div><div class="line">log_level = DEBUG</div><div class="line">stream_timeout = 90</div><div class="line">on_hold_timeout = 7200</div><div class="line">reconnect_delay = 10</div><div class="line">traffic_sampling_period = 15</div><div class="line">[Dispatcher]</div><div class="line">socket_path = dispatcher.sock</div><div class="line">listen = xxx.xxx.xxx.xxx</div><div class="line">listen_management = xxx.xxx.xxx.xxx #你自己的IP地址</div><div class="line">management_use_tls = yes</div><div class="line">passport = None</div><div class="line">management_passport = None</div><div class="line">log_level = DEBUG</div><div class="line">relay_timeout = 5</div><div class="line">[TLS]</div><div class="line">certs_path = tls</div><div class="line">verify_interval = 300</div><div class="line">[Database]</div><div class="line">[Radius]</div><div class="line">[OpenSIPS]</div><div class="line">socket_path = /var/run/opensips/socket</div><div class="line">max_connections = 10</div></pre></td></tr></table></figure>
<p>启动mediaproxy服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo media-dispatcher restart</div><div class="line">sudo media-relay restart</div><div class="line">```  </div><div class="line">或者：</div></pre></td></tr></table></figure>
<p>sudo service mediaproxy-dispatcher restart<br>sudo service mediaproxy-relay restart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看mediaproxy是否正常运行：</div></pre></td></tr></table></figure></p>
<p>ps -ef | grep media<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果出现：</div></pre></td></tr></table></figure></p>
<p>root      6592  2110  0 14:25 ?        00:00:01 /usr/bin/python /usr/bin/media-dispatcher restart<br>root      6969  2110  0 14:35 ?        00:00:04 /usr/bin/python /usr/bin/media-relay restart</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">则说明已经正常启动。如果没有正常启动可以在/var/log/syslog中查看原因</div><div class="line"></div><div class="line">### 5.启动服务并检验</div><div class="line">修改日志文件配置，是opensips的日志保存在/var/log/opensips.log</div></pre></td></tr></table></figure>
<p>sudo touch /var/log/opensips.log<br>sudo chmod 777 /var/log/opensips.log<br>sudo vi /etc/rsyslog.d/opensips.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">增加如下内容</div></pre></td></tr></table></figure></p>
<p>local0.*             /var/log/opensips.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">重启syslog服务，启动opensips</div></pre></td></tr></table></figure></p>
<p>sudo service rsyslog restart<br>sudo /usr/local/opensips_proxy/sbin/opensipsctl start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果启动失败，查看/var/log/opensips.log文件查找错误.</div><div class="line"></div><div class="line">服务启动后，防火墙开启tcp及udp的端口</div></pre></td></tr></table></figure></p>
<p>iptables -I INPUT -p tcp –dport 5060 -j ACCEPT<br>iptables -I INPUT -p udp –dport 5060 -j ACCEPT<br>iptables-save<br>```</p>
<p>好了，现在可以用SIP客户端登录上面创建的帐号，测试了。</p>
<p><font color="red">注意：</font><br>当Linphone客户端启用stun和ICE时，处于内网的客户端不能呼叫处用公网的客户端。</p>
<p>使用csipsimple则不会出现Linphone客户端出现的问题，但是csipcimple需要勾选 设置—&gt;网络—&gt;Use compact SIP选项。</p>
<p>转载自：<a href="https://www.xdty.org/1709" target="_blank" rel="external">ubuntu12.04安装配置opensips，搭建voip服务器</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机是如何启动的？]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E7%9A%84%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>从打开电源到开始操作，计算机的启动是一个非常复杂的过程。</p>
<p><img src="http://img.blog.csdn.net/20160322154031426" alt="这里写图片描述"></p>
<h2 id="零、boot的含义"><a href="#零、boot的含义" class="headerlink" title="零、boot的含义"></a>零、boot的含义</h2><p>先问一个问题，”启动”用英语怎么说？<br>回答是boot。可是，boot原来的意思是靴子，”启动”与靴子有什么关系呢？ 原来，这里的boot是bootstrap（鞋带）的缩写，它来自一句谚语：</p>
<blockquote>
<p>“pull oneself up by one’s bootstraps”</p>
</blockquote>
<p>字面意思是”拽着鞋带把自己拉起来”，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！</p>
<p>早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做”拉鞋带”，久而久之就简称为boot了。</p>
<p>计算机的整个启动过程分成四个阶段。</p>
<hr>
<h2 id="第一阶段：BIOS"><a href="#第一阶段：BIOS" class="headerlink" title="第一阶段：BIOS"></a>第一阶段：BIOS</h2><p>上个世纪70年代初，”只读内存”（read-only memory，缩写为ROM）发明，开机程序被刷入ROM芯片，计算机通电后，第一件事就是读取它。</p>
<p><img src="http://img.blog.csdn.net/20160322154618558" alt="这里写图片描述"></p>
<p>这块芯片里的程序叫做”基本輸出輸入系統”（Basic Input/Output System），简称为BIOS。</p>
<p>BOIS是固化在主板上的一断启动程序。</p>
<h3 id="1-1-硬件自检"><a href="#1-1-硬件自检" class="headerlink" title="1.1 硬件自检"></a>1.1 硬件自检</h3><p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做”硬件自检”（Power-On Self-Test），缩写为POST。</p>
<p>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</p>
<p><img src="http://img.blog.csdn.net/20160322154907249" alt="这里写图片描述"></p>
<h3 id="1-2-启动顺序"><a href="#1-2-启动顺序" class="headerlink" title="1.2 启动顺序"></a>1.2 启动顺序</h3><p>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</p>
<p>这时，BIOS需要知道，”下一阶段的启动程序”具体存放在哪一个设备。也就是说，BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做”启动顺序”（Boot Sequence）。</p>
<p>打开BIOS的操作界面，里面有一项就是”设定启动顺序”。</p>
<p><img src="http://img.blog.csdn.net/20160322155116433" alt="这里写图片描述"></p>
<hr>
<h2 id="二、第二阶段：主引导记录"><a href="#二、第二阶段：主引导记录" class="headerlink" title="二、第二阶段：主引导记录"></a>二、第二阶段：主引导记录</h2><p>BIOS按照”启动顺序”，把控制权转交给排在第一位的储存设备。</p>
<p>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。</p>
<p>这最前面的512个字节，就叫做”主引导记录”（Master boot record，缩写为MBR）。</p>
<h3 id="2-1-主引导记录的结构"><a href="#2-1-主引导记录的结构" class="headerlink" title="2.1 主引导记录的结构"></a>2.1 主引导记录的结构</h3><p>“主引导记录”只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</p>
<p>主引导记录由三个部分组成：</p>
<blockquote>
<p>　　（1） 第1-446字节：调用操作系统的机器码。<br>　　（2） 第447-510字节：分区表（Partition table）。<br>　　（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</p>
</blockquote>
<p>其中，第二部分”分区表”的作用，是将硬盘分成若干个区。</p>
<h3 id="2-2-分区表"><a href="#2-2-分区表" class="headerlink" title="2.2 分区表"></a>2.2 分区表</h3><p>硬盘分区有很多好处。考虑到每个区可以安装不同的操作系统，”主引导记录”因此必须知道将控制权转交给哪个区。</p>
<p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”。</p>
<p>每个主分区的16个字节，由6个部分组成：</p>
<blockquote>
<p>（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。<br>（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。<br>（3） 第5个字节：主分区类型。<br>（4） 第6-8个字节：主分区最后一个扇区的物理位置。<br>（5） 第9-12字节：该主分区第一个扇区的逻辑地址。<br>（6） 第13-16字节：主分区的扇区总数。</p>
</blockquote>
<p>最后的四个字节（”主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。</p>
<p>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是增加扇区总数。</p>
<h2 id="三、第三阶段：硬盘启动"><a href="#三、第三阶段：硬盘启动" class="headerlink" title="三、第三阶段：硬盘启动"></a>三、第三阶段：硬盘启动</h2><p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>
<h3 id="3-1-情况A：卷引导记录"><a href="#3-1-情况A：卷引导记录" class="headerlink" title="3.1 情况A：卷引导记录"></a>3.1 情况A：卷引导记录</h3><p>上一节提到，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做”卷引导记录”（Volume boot record，缩写为VBR）。</p>
<p>“卷引导记录”的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</p>
<h3 id="3-2-情况B：扩展分区和逻辑分区"><a href="#3-2-情况B：扩展分区和逻辑分区" class="headerlink" title="3.2 情况B：扩展分区和逻辑分区"></a>3.2 情况B：扩展分区和逻辑分区</h3><p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成”扩展分区”（Extended partition）。</p>
<p>所谓”扩展分区”，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做”逻辑分区”（logical partition）。</p>
<p>计算机先读取扩展分区的第一个扇区，叫做”扩展引导记录”（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p>
<p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。</p>
<p>但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。</p>
<h3 id="3-3-情况C：启动管理器-Boot-Loader"><a href="#3-3-情况C：启动管理器-Boot-Loader" class="headerlink" title="3.3 情况C：启动管理器(Boot Loader)"></a>3.3 情况C：启动管理器(Boot Loader)</h3><p>在这种情况下，计算机读取”主引导记录”前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的”启动管理器”（boot loader），由用户选择启动哪一个操作系统。</p>
<p>Linux环境中，目前最流行的启动管理器是Grub。</p>
<p><img src="http://img.blog.csdn.net/20160322155946687" alt="这里写图片描述"></p>
<h2 id="四、第四阶段：操作系统"><a href="#四、第四阶段：操作系统" class="headerlink" title="四、第四阶段：操作系统"></a>四、第四阶段：操作系统</h2><p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p>
<p>以Linux系统为例，先载入/boot目录下面的kernel。内核加载成功后，第一个运行的程序是/sbin/init。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。</p>
<p>然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。<br>至此，全部启动过程完成。</p>
<p>转载自：<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">计算机是如何启动的？</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux的启动流程]]></title>
      <url>http://freeshow.github.io/2016/07/23/Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>先附上Linux启动流程的整个流程图：</p>
<p><img src="http://img.blog.csdn.net/20160322161813288" alt="这里写图片描述"></p>
<p><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">计算机是如何启动的？</a>，探讨BIOS和主引导记录的作用。</p>
<p>那篇文章不涉及操作系统，只与主板的板载程序有关。今天，我想接着往下写，探讨操作系统接管硬件以后发生的事情，也就是操作系统的启动流程。</p>
<p><img src="http://img.blog.csdn.net/20160322161913287" alt="这里写图片描述"></p>
<p>这个部分比较有意思。因为在BIOS阶段，计算机的行为基本上被写死了，程序员可以做的事情并不多；但是，一旦进入操作系统，程序员几乎可以定制所有方面。所以，这个部分与程序员的关系更密切。</p>
<p>我主要关心的是Linux操作系统，它是目前服务器端的主流操作系统。下面的内容针对的是Debian发行版，因为我对其他发行版不够熟悉。</p>
<h2 id="第一步、加载内核"><a href="#第一步、加载内核" class="headerlink" title="第一步、加载内核"></a>第一步、加载内核</h2><p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p>
<p><img src="http://img.blog.csdn.net/20160322162039101" alt="这里写图片描述"></p>
<p>以我的电脑为例，/boot 目录下面大概是这样一些文件：</p>
<blockquote>
<p>$ ls /boot<br>　　<br>　config-3.2.0-3-amd64<br>　config-3.2.0-4-amd64<br>　grub<br>　initrd.img-3.2.0-3-amd64<br>　initrd.img-3.2.0-4-amd64<br>　System.map-3.2.0-3-amd64<br>　System.map-3.2.0-4-amd64<br>　vmlinuz-3.2.0-3-amd64<br>　vmlinuz-3.2.0-4-amd64</p>
</blockquote>
<h2 id="第二步、启动初始化进程"><a href="#第二步、启动初始化进程" class="headerlink" title="第二步、启动初始化进程"></a>第二步、启动初始化进程</h2><p>内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。</p>
<p><img src="http://img.blog.csdn.net/20160322162453228" alt="这里写图片描述"></p>
<p>由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p>
<h2 id="第三步、确定运行级别"><a href="#第三步、确定运行级别" class="headerlink" title="第三步、确定运行级别"></a>第三步、确定运行级别</h2><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p>
<p>init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p>
<p><img src="http://img.blog.csdn.net/20160322162617134" alt="这里写图片描述"></p>
<p>Linux预置七种运行级别（0-6）。一般来说，0是关机，1是单用户模式（也就是维护模式），6是重启。运行级别2-5，各个发行版不太一样，对于Debian来说，都是同样的多用户模式（也就是正常模式）。</p>
<p>init进程首先读取文件 /etc/inittab，它是运行级别的设置文件。如果你打开它，可以看到第一行是这样的：</p>
<blockquote>
<p>id:2:initdefault:</p>
</blockquote>
<p>initdefault的值是2，表明系统启动时的运行级别为2。如果需要指定其他级别，可以手动修改这个值。</p>
<p>那么，运行级别2有些什么程序呢，系统怎么知道每个级别应该加载哪些程序呢？……回答是每个运行级别在/etc目录下面，都有一个对应的子目录，指定要加载的程序。</p>
<blockquote>
<p>/etc/rc0.d<br>  /etc/rc1.d<br>/etc/rc2.d<br>/etc/rc3.d<br>/etc/rc4.d<br>/etc/rc5.d<br>/etc/rc6.d</p>
</blockquote>
<p>上面目录名中的”rc”，表示run command（运行程序），最后的d表示directory（目录）。下面让我们看看 /etc/rc2.d 目录中到底指定了哪些程序。</p>
<blockquote>
<p>　　$ ls  /etc/rc2.d<br>　　<br>　　README<br>　　S01motd<br>　　S13rpcbind<br>　　S14nfs-common<br>　　S16binfmt-support<br>　　S16rsyslog<br>　　S16sudo<br>　　S17apache2<br>　　S18acpid<br>　　…</p>
</blockquote>
<p>可以看到，除了第一个文件README以外，其他文件名都是”字母S+两位数字+程序名”的形式。字母S表示Start，也就是启动的意思（启动脚本的运行参数为start），如果这个位置是字母K，就代表Kill（关闭），即如果从其他运行级别切换过来，需要关闭的程序（启动脚本的运行参数为stop）。后面的两位数字表示处理顺序，数字越小越早处理，所以第一个启动的程序是motd，然后是rpcbing、nfs……数字相同时，则按照程序名的字母顺序启动，所以rsyslog会先于sudo启动。</p>
<p>这个目录里的所有文件（除了README），就是启动时要加载的程序。如果想增加或删除某些程序，不建议手动修改 /etc/rcN.d 目录，最好是用一些专门命令进行管理（参考<a href="http://www.debianadmin.com/manage-linux-init-or-startup-scripts.html" target="_blank" rel="external">这里</a>和<a href="http://www.debianadmin.com/remove-unwanted-startup-files-or-services-in-debian.html" target="_blank" rel="external">这里</a>）。</p>
<h2 id="第四步、加载开机启动程序"><a href="#第四步、加载开机启动程序" class="headerlink" title="第四步、加载开机启动程序"></a>第四步、加载开机启动程序</h2><p>前面提到，七种预设的”运行级别”各自有一个目录，存放需要开机启动的程序。不难想到，如果多个”运行级别”需要启动同一个程序，那么这个程序的启动脚本，就会在每一个目录里都有一个拷贝。这样会造成管理上的困扰：如果要修改启动脚本，岂不是每个目录都要改一遍？</p>
<p>Linux的解决办法，就是七个 /etc/rcN.d 目录里列出的程序，都设为链接文件，指向另外一个目录 /etc/init.d ，真正的启动脚本都统一放在这个目录中。init进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。</p>
<p><img src="http://img.blog.csdn.net/20160322163107115" alt="这里写图片描述"></p>
<p>下面就是链接文件真正的指向。</p>
<blockquote>
<p>　　$ ls -l /etc/rc2.d<br>　　<br>　　README<br>　　S01motd -&gt; ../init.d/motd<br>　　S13rpcbind -&gt; ../init.d/rpcbind<br>　　S14nfs-common -&gt; ../init.d/nfs-common<br>　　S16binfmt-support -&gt; ../init.d/binfmt-support<br>　　S16rsyslog -&gt; ../init.d/rsyslog<br>　　S16sudo -&gt; ../init.d/sudo<br>　　S17apache2 -&gt; ../init.d/apache2<br>　　S18acpid -&gt; ../init.d/acpid<br>　　…</p>
</blockquote>
<p>这样做的另一个好处，就是如果你要手动关闭或重启某个进程，直接到目录 /etc/init.d 中寻找启动脚本即可。比如，我要重启Apache服务器，就运行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>
<p>/etc/init.d 这个目录名最后一个字母d，是directory的意思，表示这是一个目录，用来与程序 /etc/init 区分。</p>
<h2 id="第五步、用户登录"><a href="#第五步、用户登录" class="headerlink" title="第五步、用户登录"></a>第五步、用户登录</h2><p>开机启动程序加载完毕以后，就要让用户登录了。</p>
<p><img src="http://img.blog.csdn.net/20160322163311947" alt="这里写图片描述"></p>
<p>一般来说，用户的登录方式有三种：</p>
<blockquote>
<p>　　（1）命令行登录<br>　　（2）ssh登录<br>　　（3）图形界面登录</p>
</blockquote>
<p>这三种情况，都有自己的方式对用户进行认证。<br>（1）命令行登录：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码（Debian还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。</p>
<p>（2）ssh登录：这时系统调用sshd程序（Debian还会再运行/etc/pam.d/ssh ），取代getty和login，然后启动shell。</p>
<p>（3）图形界面登录：init进程调用显示管理器，Gnome图形界面对应的显示管理器为gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。</p>
<h2 id="第六步、进入-login-shell"><a href="#第六步、进入-login-shell" class="headerlink" title="第六步、进入 login shell"></a>第六步、进入 login shell</h2><p>所谓shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell。</p>
<p><img src="http://img.blog.csdn.net/20160322163631654" alt="这里写图片描述"></p>
<p>Debian默认的shell是Bash，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。</p>
<p>（1）命令行登录：首先读入 /etc/profile，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</p>
<blockquote>
<p>　　~/.bash_profile<br>　　~/.bash_login<br>　　~/.profile</p>
</blockquote>
<p>需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 ~/.bash_profile 存在，就不会再读入后面两个文件了。</p>
<p>（2）ssh登录：与第一种情况完全相同。</p>
<p>（3）图形界面登录：只加载 /etc/profile 和 ~/.profile。也就是说，~/.bash_profile 不管有没有，都不会运行。</p>
<h2 id="第七步，打开-non-login-shell"><a href="#第七步，打开-non-login-shell" class="headerlink" title="第七步，打开 non-login shell"></a>第七步，打开 non-login shell</h2><p>老实说，上一步完成以后，Linux的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。但是，为了内容的完整，必须再介绍一下这一步。</p>
<p>用户进入操作系统以后，常常会再手动开启一个shell。这个shell就叫做 non-login shell，意思是它不同于登录时出现的那个shell，不读取/etc/profile和.profile等配置文件。</p>
<p><img src="http://img.blog.csdn.net/20160322163853063" alt="这里写图片描述"></p>
<p>non-login shell的重要性，不仅在于它是用户最常接触的那个shell，还在于它会读入用户自己的bash配置文件 ~/.bashrc。大多数时候，我们对于bash的定制，都是写在这个文件里面的。</p>
<p>你也许会问，要是不进入 non-login shell，岂不是.bashrc就不会运行了，因此bash 也就不能完成定制了？事实上，Debian已经考虑到这个问题了，请打开文件 ~/.profile，可以看到下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　if [ -n &quot;$BASH_VERSION&quot; ]; then</div><div class="line">　　　　if [ -f &quot;$HOME/.bashrc&quot; ]; then</div><div class="line">　　　　　　. &quot;$HOME/.bashrc&quot;</div><div class="line">　　　　fi</div><div class="line">　　fi</div></pre></td></tr></table></figure>
<p>上面代码先判断变量 $BASH_VERSION 是否有值，然后判断主目录下是否存在 .bashrc 文件，如果存在就运行该文件。第三行开头的那个点，是source命令的简写形式，表示运行某个文件，写成”source ~/.bashrc”也是可以的。</p>
<p>因此，只要运行～/.profile文件，～/.bashrc文件就会连带运行。但是上一节的第一种情况提到过，如果存在～/.bash_profile文件，那么有可能不会运行～/.profile文件。解决这个问题很简单，把下面代码写入.bash_profile就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　if [ -f ~/.profile ]; then</div><div class="line">　　　　. ~/.profile</div><div class="line">　　fi</div></pre></td></tr></table></figure>
<p>这样一来，不管是哪种情况，.bashrc都会执行，用户的设置可以放心地都写入这个文件了。</p>
<p>Bash的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash的作者只好把配置文件分成了几个部分，阶段性载入。系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在.profile，不需要被继承的设置放在.bashrc。</p>
<p>顺便提一下，除了Linux以外， Mac OS X 使用的shell也是Bash。但是，它只加载.bash_profile，然后在.bash_profile里面调用.bashrc。而且，不管是ssh登录，还是在图形界面里启动shell窗口，都是如此。</p>
<p>转载自：<a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="external">Linux 的启动流程</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Smack Message属性扩展--添加自定义元素（标签）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Smack%20Message%E5%B1%9E%E6%80%A7%E6%89%A9%E5%B1%95---%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0(%E6%A0%87%E7%AD%BE)/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Smack框架对XMPP协议进行了封装，从而方便与Openfire即时通信服务器做交互。说白了，Smack框架可以通过对象构造符合XMPP协议的XML字符串，避免手动拼接字符串。</p>
<blockquote>
<p>XMPP协议基本XML结构如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;message from=&apos;发送方jid&apos; to=&apos;接收方jid&apos; type=&apos;消息类型(普通消息/群聊)&apos;&gt;</div><div class="line">   &lt;body&gt;消息内容&lt;/body&gt;</div><div class="line">&lt;/message&gt;</div></pre></td></tr></table></figure>
<p>大多数情况下，这么简单的结构是满足不了需求的，我们可能会尝试向message元素下增加子元素，用来描述更多信息。</p>
<pre><code>比如，除了发送方的jid，我们想直接带上发送方的昵称和头像URL，这样可以避免反复从数据库中查询这些基本信息。但这个看似简单的过程，在Smack中实现的却相当隐晦，接下来直接通过代码说明。
</code></pre><p>例如，实现如下XML结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;message id=&apos;76Ws9-11&apos;&gt;</div><div class="line">    &lt;body&gt;hello 你好&lt;/body&gt;</div><div class="line">    &lt;userinfo xmlns=&quot;com.xml.extension&quot;&gt;</div><div class="line">        &lt;name&gt;菜鸟&lt;/name&gt;</div><div class="line">        &lt;url&gt;http://www.liaoku.org/&lt;/url&gt;</div><div class="line">    &lt;/userinfo&gt;</div><div class="line">&lt;/message&gt;</div></pre></td></tr></table></figure>
<p>Message扩展类UserInfo4XMPP 定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class SDPExtensionElement implements ExtensionElement &#123;</div><div class="line">    public static final String NAME_SPACE = &quot;com.xml.extension&quot;;</div><div class="line">    //用户信息元素名称</div><div class="line">    public static final String ELEMENT_NAME = &quot;userinfo&quot;;</div><div class="line"></div><div class="line">    //用户昵称元素名称</div><div class="line">    private String nameElement = &quot;name&quot;;</div><div class="line">    //用户昵称元素文本(对外开放)</div><div class="line">    private String nameText = &quot;&quot;;</div><div class="line"></div><div class="line">    //用户头像地址元素名称</div><div class="line">    private String urlElement = &quot;url&quot;;    </div><div class="line">    //用户头像地址元素文本(对外开放)</div><div class="line">    private String urlText = &quot;&quot;;</div><div class="line"></div><div class="line">	public String getNameText() &#123;</div><div class="line">       return nameText;  </div><div class="line">    &#125; </div><div class="line">    public void setNameText(String nameText) &#123;</div><div class="line">        this.nameText = nameText;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public String getUrlText() &#123;</div><div class="line">        return urlText;</div><div class="line">    &#125;</div><div class="line">    public void setUrlText(String urlText) &#123;</div><div class="line">        this.urlText = urlText;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getNamespace() &#123;</div><div class="line">        return NAME_SPACE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getElementName() &#123;</div><div class="line">        return ELEMENT_NAME;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public CharSequence toXML() &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line"></div><div class="line">        sb.append(&quot;&lt;&quot;).append(ELEMENT_NAME).append(&quot; xmlns=\&quot;&quot;).append(NAME_SPACE).append(&quot;\&quot;&gt;&quot;);</div><div class="line">        sb.append(&quot;&lt;&quot; + nameElement + &quot;&gt;&quot;).append(nameText).append(&quot;&lt;/&quot;+nameElement+&quot;&gt;&quot;);</div><div class="line">        sb.append(&quot;&lt;&quot; + urlElement + &quot;&gt;&quot;).append(urlText).append(&quot;&lt;/&quot;+urlElement+&quot;&gt;&quot;);</div><div class="line">        sb.append(&quot;&lt;/&quot;+ELEMENT_NAME+&quot;&gt;&quot;);</div><div class="line"></div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单说明下，关键是实现ExtensionElement接口，然后实现自己的toXML方法，将要扩展的XML字符串返回即可，此字符串将作为message元素的子元素。</p>
<blockquote>
<p>发送消息基本流程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//build chat</div><div class="line">Chat chat = chatManager.createChat(&quot;对方jid&quot;);</div><div class="line"></div><div class="line">//build extension</div><div class="line">UserInfo4XMPP userInfo4XMPP = new UserInfo4XMPP();</div><div class="line">userInfo4XMPP.setNameText(&quot;菜鸟&quot;);</div><div class="line">userInfo4XMPP.setUrlText(&quot;http://www.liaoku.org/&quot;);</div><div class="line"></div><div class="line">//build message</div><div class="line">Message message = new Message();</div><div class="line">message.setBody(&quot;hello 你好&quot;);  //消息内容</div><div class="line">message.addExtension(userInfo4XMPP);  //添加扩展内容</div><div class="line"></div><div class="line">//send</div><div class="line">chat.sendMessage(message);</div></pre></td></tr></table></figure>
<blockquote>
<p>接收消息流程</p>
</blockquote>
<p>方法一：直接判断接收到的Chat Message<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//设置聊天对象管理处理监听。</div><div class="line">        getChatManager().addChatListener(chatManagerListenerMain);</div><div class="line">//创建聊天对象管理监听器,监听从远端发送过来的message。</div><div class="line">    private ChatManagerListener chatManagerListenerMain = new ChatManagerListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void chatCreated(Chat chat, boolean b) &#123;</div><div class="line">            chat.addMessageListener(new ChatMessageListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void processMessage(Chat chat, Message message) &#123;</div><div class="line">                    android.os.Message msg = android.os.Message.obtain();</div><div class="line">                    msg.obj = message;</div><div class="line">                    myHandler.sendMessage(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">//......</div><div class="line">//当接收到Chat Message时，进行判断</div><div class="line"></div><div class="line"> if (message.hasExtension(UserInfo4XMPP.ELEMENT_NAME,UserInfo4XMPP.NAME_SPACE))</div><div class="line"> &#123;</div><div class="line">    //&lt;userinfo xmlns=&quot;com.xml.extension&quot;&gt;</div><div class="line">    //    &lt;name&gt;菜鸟&lt;/name&gt;</div><div class="line">    //    &lt;url&gt;http://www.liaoku.org/&lt;/url&gt;</div><div class="line">   // &lt;/userinfo&gt;</div><div class="line"></div><div class="line"></div><div class="line">   DefaultExtensionElement defaultExtensionElement = message.getExtension(VideoInvitation.ELEMENT_NAME,VideoInvitation.NAME_SPACE);</div><div class="line">   String name = defaultExtensionElement.getValue(&quot;name&quot;);  //菜鸟</div><div class="line">   String url = defaultExtensionElement.getValue(&quot;url&quot;);   //http://www.liaoku.org/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法二：</p>
<p><a href="http://www.xuebuyuan.com/532432.html" target="_blank" rel="external">Smack Message 扩展属性</a></p>
<p>参考自：<a href="http://www.cnblogs.com/iyangyuan/p/4496015.html?utm_source=tuicool" target="_blank" rel="external">Smack Message扩展，添加自定义元素(标签)经验分享</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线性表---顺序表]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>　　线性结构的特点是：在非空的有限集合中，只有唯一的第一个元素和唯一的最后一个元素。第一个元素没有直接前驱元素，最后一个没有直接的后继元素。其它元素都有唯一的前驱元素和唯一的后继元素。</p>
<p>　　线性表是一种最简单的线性结构。线性表可以用顺序存储结构和链式存储结构存储，可以在线性表的任意位置进行插入和输出操作。</p>
<p>　　要想将线性表在计算机上实现，必须把其逻辑结构转化为计算机可识别的存储结构。线性表的存储结构主要有两种：顺序存储结构和链式存储结构。</p>
<h1 id="线性表的顺序表示与实现"><a href="#线性表的顺序表示与实现" class="headerlink" title="线性表的顺序表示与实现"></a><center>线性表的顺序表示与实现</center></h1><h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><p>　　线性表的顺序存储结构指的是将线性表中的元素存放在一组连续的存储单元中。这样的存储方式使得线性表逻辑上相邻的元素，其在物理存储单元中也是相邻的。采用顺序存储结构的线性表称为顺序表。</p>
<p>　　假设线性表有ｎ个元素，每个元素占用ｍ个存储单元，如果第一个元素的存储位置为LOC(a<sub>1</sub>),第i个元素的位置为LOC(a<sub>n-1</sub>),由于顺序表中各元素之间是相邻的，因此，线性表的第i个元素的存储位置与第一个元素a<sub>1</sub>的存储位置满足一下关系：</p>
<blockquote>
<p>　　　　　　LOC(a<sub>n</sub>)＝LOC(a<sub>1</sub>)＋(i-1)*m</p>
</blockquote>
<p>　　其中，第一个元素的位置LOC(a<sub>1</sub>)称为起始地址或基地址。</p>
<p>　　顺序表反映了线性表中元素的逻辑关系，只要知道第一个元素的存储地址，就可以得到线性表中任何元素的存储地址。同样，已知任何一个元素的存储地址都可以得到其他元素的存储地址。因此，线性表中的任何一个元素都可以随机存取，线性表的顺序存储结构是一种随机存取的存储结构。</p>
<p>　　由于在Ｃ语言中，数组可以随机存取且数组中的元素占用连续的存储空间，因此，我们采用数组描述线性表的顺序存储结构。线性表的顺序存储结构描述如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">	DataType <span class="built_in">list</span>[LISTSIZE];</div><div class="line">	<span class="keyword">int</span> length; <span class="comment">//当前存储的数据元素的个数。</span></div><div class="line">&#125;SeqList;</div></pre></td></tr></table></figure></p>
<p>　　例如，如果要定义一个变量名为L的结构体，可以定义为SeqList L。如果要定义一个指向结构体指针的变量，可以定义为SeqList *L。</p>
<h2 id="顺序表的基本运算"><a href="#顺序表的基本运算" class="headerlink" title="顺序表的基本运算"></a>顺序表的基本运算</h2><p>　　在顺序存储结构中，线性表的基本运算如下。该算法的实现保存在文件 <code>SeqList.h</code> 中</p>
<h3 id="1-顺序表的初始化操作。"><a href="#1-顺序表的初始化操作。" class="headerlink" title="(1)顺序表的初始化操作。"></a>(1)顺序表的初始化操作。</h3><p>　　顺序表的初始化就是要把顺序表初始化为空的顺序表，只需要将顺序表的长度length置为0即可：<br>　　<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//顺序表的初始化操作</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList *L)</span>  <span class="comment">/*将顺序表初始化为空*/</span></span></div><div class="line">&#123;</div><div class="line">	L-&gt;length = <span class="number">0</span>; <span class="comment">/*把顺序表的长度置为0*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-判断顺序表是否为空"><a href="#2-判断顺序表是否为空" class="headerlink" title="(2)判断顺序表是否为空"></a>(2)判断顺序表是否为空</h3><p>　　顺序表为空的标志就是顺序表的长度length为0.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断顺序表是否为空，为空返回1，否则返回0</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListEmpty</span><span class="params">(SeqList L)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (L.length==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-按序号查找操作"><a href="#3-按序号查找操作" class="headerlink" title="(3)按序号查找操作"></a>(3)按序号查找操作</h3><p>　　查找分为两种：按序号查找和按内容查找。<br>　　按序号查找就是查找顺序表Ｌ中的第ｉ个元素，如果找到，将该元素值赋值给ｅ。查找第ｉ个元素时，首先要判断要查找的序号是否合法，如果合法，获得对应位置的值，并返回１表示查找成功，否则，返回-1，表示错误。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按序号查找操作,查找顺序表中的第i个元素</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SeqList L, <span class="keyword">int</span> i, DataType *e)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	*e = L.<span class="built_in">list</span>[i - <span class="number">1</span>]; <span class="comment">//将第i个元素赋值为e</span></div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-按内容查找操作"><a href="#4-按内容查找操作" class="headerlink" title="(4)按内容查找操作"></a>(4)按内容查找操作</h3><p>　　按内容查找就是查找顺序表L中与给定的元素e相等的元素。如果找到，返回该元素在顺序表中的序号；如果没有找到与e相等的元素，则返回-1，表示失败。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按内容查找操作</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L, DataType e)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; L.length; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (L.<span class="built_in">list</span>[i] == e)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-插入操作"><a href="#5-插入操作" class="headerlink" title="(5)插入操作"></a>(5)插入操作</h3><p>　　插入操作就是在顺序表L中的第i个位置插入新元素e，使顺序表{a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n</sub>}变为{a<sub>1</sub>,a<sub>2</sub>,…,a<sub>i-1</sub>,e,a<sub>i</sub>,…,a<sub>n</sub>}，顺序表的长度也由n变成n-1.<br>　　在顺序表的第i个元素插入元素e，首先要将第i个位置以后的元素(包括第i个元素)依次向后移动一个位置，然后将元素e插入到第i个位置。移动元素时要从后往前移动元素，先移动最后一个元素，在移动倒数第二个元素，依次类推。<br>　　插入元素之前，要判断插入的位置是否合法，顺序表是否已满；在插入元素后，要将表长增加1。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//插入操作。</span></div><div class="line"><span class="comment">//在顺序表的第i个元素插入元素e，插入成功返回1，</span></div><div class="line"><span class="comment">//如果插入位置不合法，返回-1，顺序表满返回0.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertList</span><span class="params">(SeqList *L, <span class="keyword">int</span> i, DataType e)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"插入位置i不合法！\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;length &gt;= LISTSIZE)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"顺序表已满，不能插入元素。\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//将第i个位置以后的元素依次后移</span></div><div class="line">		<span class="keyword">for</span> ( j = L-&gt;length; j &gt;= i; j--)</div><div class="line">		&#123;</div><div class="line">			L-&gt;<span class="built_in">list</span>[j] = L-&gt;<span class="built_in">list</span>[j - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		L-&gt;<span class="built_in">list</span>[i - <span class="number">1</span>] = e; <span class="comment">//插入元素到第i个位置</span></div><div class="line">		L-&gt;length++;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-删除操作"><a href="#6-删除操作" class="headerlink" title="(6)删除操作"></a>(6)删除操作</h3><p> 　　删除操作就是将顺序表L中的第i个位置元素删除，使顺序表{a<sub>1</sub>,a<sub>2</sub>,…,a<sub>i-1</sub>,a<sub>i</sub>,a<sub>i+1</sub>,…,a<sub>n</sub>}变为{a<sub>1</sub>,a<sub>2</sub>,…,a<sub>i-1</sub>,a<sub>i+1</sub>,…,a<sub>n</sub>},顺序表的长度也又n变成n-1。<br> 　　为了删除第i个元素，需要将第i+1及其后面的元素依次向前移动一位，将前面的元素覆盖掉。移动元素时要先将第i+1个元素移动到第i个位置，在将第i+2个元素移动到第i+1个位置，依次类推，直到最后一个元素移动到倒数第二个位置。最后将顺序表的长度减1.<br> 　　在进行删除操作时，要首先判断顺序表中是否有元素，还要判断删除的序号是否合法，删除成功要将表长减1.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除操作</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteList</span><span class="params">(SeqList *L, <span class="keyword">int</span> i, DataType *e)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	<span class="keyword">if</span> (L-&gt;length &lt;= <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"顺序表已空不能进行删除！\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"删除位置不合适\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		*e = L-&gt;<span class="built_in">list</span>[i - <span class="number">1</span>];</div><div class="line">		<span class="keyword">for</span> ( j = i; j &lt; L-&gt;length<span class="number">-1</span>; j++)</div><div class="line">		&#123;</div><div class="line">			L-&gt;<span class="built_in">list</span>[j - <span class="number">1</span>] = L-&gt;<span class="built_in">list</span>[j];</div><div class="line">		&#125;</div><div class="line">		L-&gt;length--;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　删除操作中函数形参ｉ的合法范围是<code>1&lt;=i&lt;=L-&lt;length</code>,当i等于1时，表示要删除第一个元素，对应C语言数组中的第0个元素；当<code>i=L-&gt;length</code>时，表示要删除的是最后一个元素，对应C语言数组中的最后一个元素。</p>
<h3 id="7-返回顺序表的长度操作。"><a href="#7-返回顺序表的长度操作。" class="headerlink" title="(7)返回顺序表的长度操作。"></a>(7)返回顺序表的长度操作。</h3><p>　　线性表的长度就是顺序表中的元素个数，只需要返回顺序表L的length域值。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回顺序表的长度操作。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(SeqList L)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> L.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-清空操作"><a href="#8-清空操作" class="headerlink" title="(8)清空操作"></a>(8)清空操作</h3><p>　　顺序表的清空操作就是将顺序表中的元素删除。要删除顺序表中的所有元素，只需要将顺序表的长度置为0即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//清空操作</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(SeqList *L)</span></span></div><div class="line">&#123;</div><div class="line">	L-&gt;length = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SIP对话流程]]></title>
      <url>http://freeshow.github.io/2016/07/23/SIP%E5%AF%B9%E8%AF%9D%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>这一节将通过一个简单的例子来介绍一些基本的 SIP 操作。先让我们来诊视下图展示的两个用户代理之间的消息顺序。你可以看到伴随这 RFC3665 描述的会话建立过程还有几个其它的流程。</p>
<p><img src="http://img.blog.csdn.net/20160404194016825" alt="The SIP dialog flow"></p>
<p>我们在这些消息上标上了序号。在这个例子中用户 A 使用 IP 电话向网络上的另外一台IP电话发出通话请求。为了完成通话，使用了两个 SIP 代理。</p>
<p><img src="http://img.blog.csdn.net/20160404194214232" alt="这里写图片描述"><br>此图中的Contact应该错了，Contact应该为userA。</p>
<p>第一行是消息的方法名（ the method name）和请求URI(request URI)。接下来是列出的头域。这个例子包含了所需要的头的最小集合。我们将在下面简要的描述这些头域。</p>
<ul>
<li><p><strong>Method and Request-URI</strong>: 在第一行，request URI也可以被写作RURI。它包含了消息的当前目的地，它经常被代理服务器操作来路由请求。这是在SIP请求中最重要的域。</p>
</li>
<li><p><strong>Via</strong>: This contains the address to which userA will be waiting to receive responses to this request. It also contains a parameter called <strong>branch</strong>that identifies this transaction. The Via header defines the last SIP hop as IP,transport,and transaction-specific paramters. Via is used exclusively to route back the replies. Each proxy adds an additional Via header. It is a lot easier for replies to find their route back using the Via header than to go again in the location server or DNS.(这里不翻译，感觉比翻译更容易读懂)</p>
</li>
<li><p><strong>To</strong>: 它包含了名字（显示名(display name)）和最初选择的目的地的 SIP URI（这里是 sip： userB＠sip.com）。 <font color="red">To头域不被用来路由消息包</font>。</p>
</li>
<li><p><strong>From</strong>: 它包含了名字和表明主叫 ID（ caller ID）的 SIP URI（这里是 sip：userA@sip.com）。这个头域有一个 tag 参数，而这个参数包含了<font color="red">被 IP电话添加进</font>URI 的一个随机字符串。是被用来进行辨识唯一性的。 tag 参数被用在 TO 和 FROM头域中。作为一种普遍的机制用来标识对话（ dialog），对话是 CALL－ID 和两个tag的结合，<font color="red">而这两个 tag 分别来自参与对话的双方。</font>Tags 在并行派生（ parallel forking）中作用显著。</p>
</li>
<li><p><strong>Call-ID</strong>: 它包含了一个作为这通通话全局性的唯一的标识，而这个唯一标识是有一个随机字符串，来自 IP 电话的主机名或是 IP 地址结合而成的。 To， From的 tag和CALL-ID的结合完整的定义了一个端到端的 SIP 关系，这种关系就是我们所知道的 SIP 对话（ SIP dialog）.</p>
</li>
<li><p><strong>CSeq</strong>: CSEQ 或者称之为命令序列（ command sequence）包含了一个整数和一个方法名。 <font color="red">CSEQ 数对于每一个在 SIP 对话中的<strong>新请求</strong>都会递增</font>，是一个传统的序列数。</p>
</li>
<li><p><strong>Contact</strong>: This contains a SIP URI, which represents a direct route a contact userA, usually composed of a user name and <strong>full qualified domain name(FQDN)</strong>. It is usual to use the IP address instead of the FQDN in this field. <font color="red">While the <strong>Via header field</strong> tell the other elements where to send a response, the <strong>Contact</strong> tells other elements where to send future requests</font>.</p>
</li>
<li><p><strong>Max-Forwards</strong>: 它被用来限制请求在到达最终目的地的路径中被允许的最大跳数（ hops）。由一个整数构成，而这个整数在每一跳中将会递减。</p>
</li>
<li><p><strong>Content-Type</strong>: 它包含了对内容消息的描述。</p>
</li>
<li><p><strong>Content-Length</strong>: 它用来告知内容消息的字节数。</p>
</li>
</ul>
<p>会话的一些细节，像媒体类型和编码方式并不是使用 SIP 进行描述的。而是使用叫做会话描述协议（ SDP RFC2327）来进行描述。 SDP 消息由 SIP 消承载，就像是一封电子邮件的附件一样。</p>
<p>话机开始并不知道用户 B 和负责域 B 的服务器的位置。因此，它向负责 sipA 域的服务器发送 INVITE 消息请求。发送地址在用户 A 的话机中进行设置或通过DNS发现。服务器 sipA.com 也就是我们知道的域 sipA.com 的 SIP 代理服务器。</p>
<p>过程如下：</p>
<ol>
<li><p>在这个例子中，代理服务器收到 INVITE 请求消息并发送―100 trying‖响应消息给用户 A，表明代理服务器已经收到了 INVITE 消息并正在转发这个求。 SIP 的响应消息使用一个三个数字组成的数字码和一条描述语句说明响应的类型。并拥有和INVITE 请求一样的 To、From、CALL－ID 和 CSEQ 等头域，以及 VIA 和其―branch参数。这就使得用户 A 的话机同发出的 INVITE 请求联系在一起。</p>
</li>
<li><p>代理 A 定位代理 B 的方法是向 DNS 服务器（ SRV 记录）进行查询以找到负责sipB 的 SIP 域的服务器地址并将 INVITE 请求转发给它。在向代理B发送 INVITE 消息前，代理 A 将其自己的地址通过 VIA 头添加进 INVITE，INVITE请求在第一个Via头域汇总已经有了userA的地址。</p>
</li>
<li><p>代理 B收到 INVITE 请求，给代理A返回100 Trying消息响应，表明其正在处理这个请求。 </p>
</li>
<li><p>代理 B 查询自己的位置数据库以找到用户 B 的地址，然后将自己的地址也通过VIA 头域添加进 INVITE 消息发送给用户 B 的 IP 地址。<font color="red">(注：此时找到userB的真实IP地址，会将RURI中的地址替换为userB的真实IP地址)</font>。</p>
</li>
<li><p>用户 B 的话机收到 INVITE 消息后开始振铃。话机为了要表明这种情况（振铃），发送回―180 Ringing‖响应消息。</p>
</li>
<li><p>这个消息以相反的方向路由通过那两个代理服务器。每一个代理利用 VIA 头域来决定向哪里发送响应消息并从顶部将其自己的 VIA 头去除。结果就是， 180 Ringing 消息不需要任何的 DNS 查询，不需要定位服务的响应，也不需要任何的状态处理就能够返回到用户那里。这样的话，每一个代理服务器都能够看到由 INVITE 开始的所有消息。</p>
</li>
<li><p>当用户 A 的话机收到180 Ringing响应消息后开始―回铃，表明另一端的用户正在振铃。一些话机是通过显示一些信息进行表示的。</p>
</li>
<li><p>在这个例子中，用户 B 对对方发起的通话进行了响应。当用户 B 响应时，话机发送200 OK响应消息以表明通话被接起。200 OK的消息体中包含了会话的描述信息，这些信息包括指定了编码方式，端口号，以及从属于会话的所有事情。作这项工作的就是 SDP 协议。结果就是，在从 A 到 B（ INVITE）和从 B 到 A（ 200 OK）的两个阶段，双方交换了一些信息，以一种简单的<strong>请求/响应的模式</strong>协商了在这通通话中所需的资源和所需要的能力要求。如果用户 B 不想得到这通通话或是此刻处于忙线中， 200 OK 将不会发出，取代它的是描述这种状况（这里是 486 Busy Here）的消息。   </p>
</li>
</ol>
<hr>
<p><img src="http://img.blog.csdn.net/20160404210114810" alt="这里写图片描述"></p>
<p> 第一行是响应码和描述信息(OK)。接下来是头域行。 VIa， To， From， Call-ID和 CSEQ 是从 INVITE 请求中拷贝的。有三个 Via头，一个是用户 A 添加的，另一个是代理 A 添加的，最后一个则是代理 B 添加的。用户 B 的 SIP 话机在对话的双方加入了一个 <strong>tag参数</strong>，这个参数在这通通话的以后的请求和响应消息中都将出现。</p>
<p>Contact头域中包含了 URI 信息，这个 URI 信息是用户 B 能够直接被联系到他们自己的IP话机的地址。</p>
<p>Content-Type和Content-Length头域给出了关于 SDP头的一些信息。而 SDP 头则包含了用来建立 RTP 会话的媒体相关的参数。</p>
<p>当userB接听电话后将发生如下事情：</p>
<ol>
<li><p>在这个例子中，200 OK消息通过两个代理服务器被送回给用户 A，之后userA的话机停止回铃,表明通话被接起。</p>
</li>
<li><p>最后用户 A 向用户 B 的话机发送 ACK 消息确认收到了200 OK消息。当不包含record routing时， ACK避开了两个代理服务器直接发送给用户 B。 ACK 是 SIP 中唯一不需要进行响应的消息请求。两端在 INVITE 的过程中从 Contact消息中了解双方的地址信息。也结束了 INVITE/200 OK/ACK 的过程，这个过程也就是我们所熟知的SIP三次握手。</p>
</li>
<li><p>这个时候两个用户之间开始进行会话，他们以用 SDP 协议协商好的方式来发送媒体包。通常这些包是端对端进行传送的。在会话中，通话方可以通过发送一个新的 INVITE 请求来改变会话的一些特性。这叫做 re－invite。如果 re-invite 不被接受，那么488 Not Acceptable Her响应就会被发出，但是会话不会因此而失败。 </p>
</li>
<li><p>要结束会话的时候，用户 B 产生 BYE 消息来中断通话。这个消息绕过两个代理服务器直接路由回用户 A 的软电话上。</p>
</li>
<li><p>用户 A 发出200 OK响应消息以确认收到了 BYE 消息请求，从而结束会话。这里，不会发出 ACK。 ACK 只在 INVITE 请求过程中出现。</p>
</li>
</ol>
<hr>
<p>有些情况下，在整个会话过程中，对于代理服务器来说，能够待在消息传输的中间位置来观察两端的所有消息交互是很重要的。如果代理服务器想在INVITE请求初始化完成后还待在此路径中，可以在请求消息中添加Record-Route头域。用户 B 的话机得到了这个消息，之后在其消息中也会带有这个头，并且会将消息发送回代理。记录路由（ Record Routing）在大多数的方案中都会被使用。</p>
<p>REGISTER 请求是代理B用来定位用户B的方法。当话机初始化的时候或是在通常的时间间隔中，软电话 B 向在域 sipB 中的一个服务器（ SIP REGISTRAR）发送 REGISTER请求。<font color="red">注册请求将 URI(&lt; userB@sipB.com &gt;) 与一个 IP 地址(userB的实际IP地址)联系在一起，这种绑定被存储在定位服务器上面的数据库里</font>。通常，注册服务器，定位服务器，和代理服务器在同一台物理机器上，并使用相同的软件。 OpenSIPS就能够扮演这三种角色。一个 URI 只能够在一个特定的时间内由一个单独的机器注册。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SIP服务器类型]]></title>
      <url>http://freeshow.github.io/2016/07/23/SIP%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>有一些不同类型的SIP服务器。根据你的应用，你可以使用它们其中的一种或所有类型来解决你的问题。OpenSIPS可以作为代理服务器、重定向服务器、背靠背用户代理或者注册服务器。</p>
<h2 id="The-proxy-server-代理服务器"><a href="#The-proxy-server-代理服务器" class="headerlink" title="The proxy server(代理服务器)"></a>The proxy server(代理服务器)</h2><p>在 SIP 代理模式下，所有的 IP 消息都要经过 SIP 代理。这种行为在向诸如计费（ billing）的过程中帮助很大，而且迄今为止，这也是一种最普遍的选择。但是它的缺点就是在会话建立过程中的所有的 SIP 交互中，服务器造成的额外开销也是客观的。要记住的是，即使服务器作为 SIP 代理在工作时， RTP 包也总是直接从一端传送到另一端，而不会经过服务器。</p>
<p><img src="http://img.blog.csdn.net/20160404151303707" alt="proxy server"></p>
<hr>
<h2 id="The-redirect-server-重定向服务器"><a href="#The-redirect-server-重定向服务器" class="headerlink" title="The redirect server(重定向服务器)"></a>The redirect server(重定向服务器)</h2><p>SIP 代理可以运行在 SIP 重定向模式。在这种模式下， SIP 服务器的处理量是相当巨大的，因为它不需要保持事务处理的状态。在对 INVITE 消息进行初始化后，仅仅向 UAC 回复一条―302 Moved Temporarily‖消息就可以离开 SIP 对话（ dialog）了。在这种模式下的 SIP 代理，即使只是利用非常少的资源也可以每小时传送上百万的通话。当你需要的规模很大并且不需要对通话计费的情况下，这种模式通常会被使用。</p>
<p><img src="http://img.blog.csdn.net/20160404151756662" alt="The redirect server"></p>
<hr>
<h2 id="The-B2BUA-server-背靠背用户代理服务器"><a href="#The-B2BUA-server-背靠背用户代理服务器" class="headerlink" title="The B2BUA server(背靠背用户代理服务器)"></a>The B2BUA server(背靠背用户代理服务器)</h2><p>The server can also work as a Back-to-Back User Agent(B2BUA). B2BUAs are normally applied to hide the topology of the network(网络的拓扑结构). They are also useful to support buggy clients unable to route SIP requests correctly based on record routing. Many PBX systems such as Asterisk, FreeSwitch, Yate, and others work as B2BUAs.</p>
<p>想了解B2BUA的可以看《FreeSWITCH权威指南》一书，上面做了详细介绍。</p>
<p><img src="http://img.blog.csdn.net/20160404152922995" alt="B2BUA"></p>
<p>注意：图中左边的Call-ID和右边的Call-ID不同(B2BUA Two Legs)。</p>
<hr>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SIP注册过程]]></title>
      <url>http://freeshow.github.io/2016/07/23/SIP%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>SIP注册过程如下图所示：<br><img src="http://img.blog.csdn.net/20160404143154832" alt="SIP注册过程"></p>
<p>SIP 协议中使用了一个构件叫做注册服务器。它不仅能够接收 REGISTER消息请求，还能够将收到的消息包中的信息保存到管理对应域名的定位服务器上面。 SIP 协议具有发现能力；换句话说，就是如果一个用户要与另外一个用户开始会话，那么 SIP 协议必须要发现这个用户能够到达的主机存在。由于定位服务器可以收到请求消息并找到向什么地方发送，所以这个发现过程由定位服务器来完成。而这则是基于管理每个域的定位服务器维护着一个定位数据库的事实来实现的。注册服务器不仅可以接收客户端的 IP 地址，还能够接收其他类型的消息。比如，能够收到服务器上面的 CPL（ Call Processing Language）脚本。</p>
<p>在一台话机能够接收一通通话之前，它需要在定位数据库中有注册信息。在这个数据库中我们要拥有所有电话的各自的相关的 IP 地址。在我们的例子中，你将看到 SIP 用户 8590＠voffice.com.br 注册到 200.180.1.1 上面的过程(即SIP用户的UAC所在的IP地址为200.180.1.1)。</p>
<p>RFC3665 定义实现了一个最小的功能集合，这是使得 SIP 进行 IP 网络交互时的最好实践。按照 rfc3665 中所说，与注册一个用户代理的过程相关的有五个基本的流程，如下所述：</p>
<ol>
<li><p>一个新的成功的注册（ A successful new registration） ——用户代理在发送 Register 请求后，将收到认证过程的挑战。我们将在阐述验证过程的章节中看到这个过程的细节。<br><img src="http://img.blog.csdn.net/20160404144950948" alt="这里写图片描述"></p>
</li>
<li><p>联系列表的更新（ An update of the contact list） ——由于不再是新的注册，消息中已经包含了摘要（ digest），那么不会返回 401 消息。为了改变联系列表，用户代理仅仅需要发送一条在CONTACT 头中带有新的联系信息的注册信息即可。<br><img src="http://img.blog.csdn.net/20160404145137199" alt="这里写图片描述"></p>
</li>
<li><p>请求获得当前的联系列表——在这种情况下，用户代理将把发送消息中的 CONTACT 头置空，表明用户希望向服务器询问当前的联系列表。在回复的 200OK 消息中， SIP 服务器将把当前的联系列表放在其 CONTACT 的头中。<br><img src="http://img.blog.csdn.net/20160404145247027" alt="这里写图片描述"> </p>
</li>
<li><p>取消注册（ Cancellation of a registration） ——用户代理在发送的消息中将 EXPIRES 头置成 0，并且将 CONTACT 头设置为*表示将此过程应用到所有存在的联系信息。<br><img src="http://img.blog.csdn.net/20160404145408590" alt="这里写图片描述"> </p>
</li>
<li><p>不成功的注册（ Unsuccessful Registration） ——用户代理客户端（ UAC）发送一条 Register请求消息，收到一条―401 Unauthorized‖消息，事实上，这个过程同成功注册过程相同。但是接下来，它进行哈希运算尝试进行认证。而服务器检测到的是一个无效的密码，继续发送401Unauthorized消息。这个过程一直重复直到重复次数超过在 UAC 设置的最大值。<br><img src="http://img.blog.csdn.net/20160404145522591" alt="这里写图片描述"></p>
</li>
</ol>
<hr>
<p>应用示例：待续(后面在写)</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openSIPS路由类型]]></title>
      <url>http://freeshow.github.io/2016/07/23/openSIPS%E8%B7%AF%E7%94%B1%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>OpenSIPS路由规则使用几种类型的路由。每种路由是被一种特定事件触发，并且允许你处理一种确定类型的消息（请求或者应答）。</p>
<h2 id="1-route-主路由"><a href="#1-route-主路由" class="headerlink" title="1.route(主路由)"></a>1.route(主路由)</h2><p>请求路由块。它包含对SIP请求采取的一些列动作。</p>
<p>触发条件：SIP请求</p>
<p>处理：SIP请求</p>
<p>类型：无状态的初始请求，可以通过TM模块函数变为有状态的。</p>
<p>默认动作：如果请求没有被转发或者应答，路由会在最后把路由简单的丢弃。</p>
<p>主路由块通过代码route{…}或route[0]{…}(route[relay])来定义，用来处理每个SIP请求。</p>
<p>The implicit action after execution of the main route block is to drop the SIP request. To send a reply or forward the request, explicit actions must be called inside the route block.<br>执行完主路由块之后的隐式动作是(drop the SIP request是啥意思？)放弃该SIP请求。为了发送一个应答或者转发该请求，明确的动作（其实就是应答或者转发请求）必须在主路由中被调用。</p>
<p>使用示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">route </div><div class="line">&#123;</div><div class="line">    if(is_method(&quot;OPTIONS&quot;)) </div><div class="line">    &#123;</div><div class="line">        # send reply for each options request</div><div class="line">        sl_send_reply(&quot;200&quot;, &quot;ok&quot;);</div><div class="line">        exit();</div><div class="line">    &#125;</div><div class="line">    route(1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">route[1] </div><div class="line">&#123;</div><div class="line">    # forward according to uri</div><div class="line">    forward();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：如果route(X)在branch_route[Y]中调用，route[X]只是处理每一个单独的分支，而不像发生在主路由中一样，处理所有的分支。</p>
<hr>
<h2 id="2-branch-route-分支路由"><a href="#2-branch-route-分支路由" class="headerlink" title="2.branch_route(分支路由)"></a>2.branch_route(分支路由)</h2><p>请求的分支路由块。它包含对SIP请求的每个分支采取的一些列动作。</p>
<p>触发条件：准备一个请求的新分支，这个分支已经完整但并未被发送出去</p>
<p>处理：带有分支特征的SIP请求，比如requset URI，分支标志等</p>
<p>类型：有状态</p>
<p>默认动作 : if the branch is not dropped (via “drop” statement), the branch will be automatically sent out.</p>
<p>It is executed only by TM module after it was armed<br> via t_on_branch(“branch_route_index”).</p>
<p>使用示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">route </div><div class="line">&#123;</div><div class="line">    lookup(&quot;location&quot;);</div><div class="line">    t_on_branch(&quot;1&quot;);</div><div class="line">    if(!t_relay()) </div><div class="line">    &#123;</div><div class="line">        sl_send_reply(&quot;500&quot;, &quot;relaying failed&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">branch_route[1] </div><div class="line">&#123;</div><div class="line">    if(uri=~&quot;10\.10\.10\.10&quot;) </div><div class="line">    &#123;</div><div class="line">        # discard branches that go to 10.10.10.10</div><div class="line">        drop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="3-failure-route-失败路由"><a href="#3-failure-route-失败路由" class="headerlink" title="3.failure_route(失败路由)"></a>3.failure_route(失败路由)</h2><p>错误处理路由快。它包含对所有分支的每个事务收到错误（&gt;=300）应答时所采取的一系列动作。<br>Triggered by : receiving or generation(internal) of a negative reply that completes the transaction (all branches are terminated with negative replies)<br>触发条件：收到或生成错误(&gt;=300)应答</p>
<p>处理：被发送出去的初始SIP请求</p>
<p>类型：有状态</p>
<p>默认动作：如果里面没有新的分支生成（走新的分支路由），或者没有应答被强制结束，将获得的回复发送回UAC。</p>
<p>The ‘failure_route’ is executed only by TM module after it was armed via t_on_failure(“failure_route_index”).</p>
<p>Note that inside the ‘failure_route’, the request that initiated the transaction is being processed, and not its reply.</p>
<p>使用示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">route </div><div class="line">&#123;</div><div class="line">    lookup(&quot;location&quot;);</div><div class="line">    t_on_failure(&quot;1&quot;);</div><div class="line">    if(!t_relay()) </div><div class="line">    &#123;</div><div class="line">        sl_send_reply(&quot;500&quot;, &quot;relaying failed&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">failure_route[1] </div><div class="line">&#123;</div><div class="line">    if(is_method(&quot;INVITE&quot;)) </div><div class="line">    &#123;</div><div class="line">         # call failed - relay to voice mail</div><div class="line">         t_relay(&quot;udp:voicemail.server.com:5060&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="onreply-route-应答路由"><a href="#onreply-route-应答路由" class="headerlink" title="onreply_route(应答路由)"></a>onreply_route(应答路由)</h2><p>应答路由块，它包含对SIP应答采取的一系列动作。</p>
<p>触发条件：接收到应答。</p>
<p>处理：接收到的应答。</p>
<p>类型：如果绑定到事务就是有状态的，如果是全局应答则是无状态的。</p>
<p>默认动作: 如果应答没有被丢弃（只有临时应答可能会），它将会由事务引擎来处理。</p>
<p>有三种应答路由类型：</p>
<ul>
<li><p>global(全局应答路由)<br>它捕获所有被Opensips接收的应答， 不需要特殊操作（简单定义就行)。<br>使用onreply_route {…}或onreply_route[0] {…}.</p>
</li>
<li><p>per request/transaction(每个请求/事务应答路由)<br>它捕获一个特定事务的应答路由，需要在请求的时候通过t_on_reply(）来武装, 而实际则调用onreply_route[N] {…}。</p>
</li>
<li><p>per branch(每个分支应答路由)<br>它捕获一个特定分支的应答路由，需要在请求的时候通过t_on_reply(）来武装, 而实际则调用onreply_route[N] {…}。</p>
</li>
</ul>
<p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">route </div><div class="line">&#123;</div><div class="line">        seturi(&quot;sip:bob@opensips.org&quot;);  # first branch</div><div class="line">        append_branch(&quot;sip:alice@opensips.org&quot;); # second branch</div><div class="line"></div><div class="line">        t_on_reply(&quot;global&quot;); # the &quot;global&quot; reply route</div><div class="line">                              # is set the whole transaction</div><div class="line">        t_on_branch(&quot;1&quot;);</div><div class="line"></div><div class="line">        t_relay();</div><div class="line">&#125;</div><div class="line"></div><div class="line">branch_route[1] </div><div class="line">&#123;</div><div class="line">        if ($rU==&quot;alice&quot;)</div><div class="line">                t_on_reply(&quot;alice&quot;); # the &quot;alice&quot; reply route</div><div class="line">                                      # is set only for second branch</div><div class="line">&#125;</div><div class="line"></div><div class="line">onreply_route </div><div class="line">&#123;</div><div class="line">        xlog(&quot;OpenSIPS received a reply from $si\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">onreply_route[global] </div><div class="line">&#123;</div><div class="line">        if (t_check_status(&quot;1[0-9][0-9]&quot;)) </div><div class="line">        &#123;</div><div class="line">                setflag(1);</div><div class="line">                log(&quot;provisional reply received\n&quot;);</div><div class="line">                if (t_check_status(&quot;183&quot;))</div><div class="line">                        drop;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">onreply_route[alice] </div><div class="line">&#123;</div><div class="line">        xlog(&quot;received reply on the branch from alice\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="5-error-route-错误路由"><a href="#5-error-route-错误路由" class="headerlink" title="5. error_route(错误路由)"></a>5. error_route(错误路由)</h2><p>当在SIP请求处理过程中发生一个解析错误(parsing error)时，或当一个脚本断言失败时，错误路由会自动执行。在这种错误情况下它允许管理员来决定做什么。</p>
<p>触发条件：解析错误(parsing error)</p>
<p>处理：失败的请求</p>
<p>状态：无状态</p>
<p>默认动作：丢弃请求</p>
<p>在错误路由中，下面的伪变量(pseudo-variables)可以获得错误详情：</p>
<ul>
<li>$(err.class) - 错误的类型 (now is ‘1’ for parsing errors)</li>
<li>$(err.level) - 错误的严重级别</li>
<li>$(err.info) - 错误的信息</li>
<li>$(err.rcode) - recommended reply code</li>
<li>$(err.rreason) - recommended reply reason phrase</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">error_route </div><div class="line">&#123;</div><div class="line">   xlog(&quot;--- error route class=$(err.class) level=$(err.level) info=$(err.info) rcode=$(err.rcode) rreason=$(err.rreason) ---\n&quot;);</div><div class="line">   xlog(&quot;--- error from [$si:$sp]\n+++++\n$mb\n++++\n&quot;);</div><div class="line">   sl_send_reply(&quot;$err.rcode&quot;, &quot;$err.rreason&quot;);</div><div class="line">   exit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="6-local-route-本地路由"><a href="#6-local-route-本地路由" class="headerlink" title="6.local_route(本地路由)"></a>6.local_route(本地路由)</h2><p>当一个新的SIP请求被TM模块(而非UAC)产生时，本地路由会被自动执行。它用来做消息检查，账户认证和更新消息头。路由和信令函数不能在这里面执行。</p>
<p>触发条件：TM模块生成一个分支的新请求</p>
<p>处理：新的请求</p>
<p>类型：有状态</p>
<p>默认动作：发情请求<br>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">local_route </div><div class="line">&#123;</div><div class="line">   if (is_method(&quot;INVITE&quot;) &amp;&amp; $ru=~&quot;@foreign.com&quot;) </div><div class="line">   &#123;</div><div class="line">      append_hf(&quot;P-hint: foreign request\r\n&quot;);</div><div class="line">      exit;</div><div class="line">   &#125;</div><div class="line">   if (is_method(&quot;BYE&quot;) ) </div><div class="line">   &#123;</div><div class="line">      acc_log_request(&quot;internally generated BYE&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="7-startup-route-启动路由"><a href="#7-startup-route-启动路由" class="headerlink" title="7.startup_route(启动路由)"></a>7.startup_route(启动路由)</h2><p>当OpenSIPS启动后并且在处理SIP消息开始前，启动路由只执行一次。这些是有用的，如果需要一些初始化动作，像加载一些数据到内存来缓和未来的处理。</p>
<p>注意：启动路由和其它路由相比，他不是在接收到消息时触发，能在启动路由中调用的函数不能够处理SIP消息。</p>
<p>触发条件：OpenSIPs启动后，监听进程运行前。</p>
<p>处理：初始化函数</p>
<p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">startup_route </div><div class="line">&#123;</div><div class="line">  avp_db_query(&quot;select gwlist where ruleid==1&quot;,$avp(i:100));</div><div class="line">  cache_store(&quot;local&quot;, &quot;rule1&quot;, &quot;$avp(i:100)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="8-timer-route-定时路由"><a href="#8-timer-route-定时路由" class="headerlink" title="8.timer_route(定时路由)"></a>8.timer_route(定时路由)</h2><p>定时路由，顾名思义，在它配置的时间间隔内定时执行。和启动路由一样，它不处理SIP消息。你可以定义多个定时路由。</p>
<p>触发条件：定时器</p>
<p>处理：做刷新动作的函数</p>
<p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">timer_route[gw_update, 300] </div><div class="line">&#123;</div><div class="line">  avp_db_query(&quot;select gwlist where ruleid==1&quot;,$avp(i:100));</div><div class="line">  $shv(i:100) =$avp(i:100);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="9-event-route-事件路由"><a href="#9-event-route-事件路由" class="headerlink" title="9.event_route(事件路由)"></a>9.event_route(事件路由)</h2><p>当一个事件触发时，事件路由被OpenSIPS Event Interface用来执行脚本。路由的名字是被路由处理的事件。路由自动订阅该事件。自动OpenSIPS 2.1开始，事件处理的方法可以从路由定义中指定，就像下面要展示的实例一样。如果没有方法处理指定的事件，将使用默认方法。关键字”sync”和”async”可以被使用。</p>
<p>触发条件：当一个事件被OpenSIPS Event Interface引发时，由event_route模块触发。</p>
<p>处理：该触发的事件</p>
<p>类型：无状态</p>
<p>默认动作： 当事件引发时，不执行任何脚本<br>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">event_route[E_PIKE_BLOCKED] </div><div class="line">&#123;</div><div class="line">   xlog(&quot;The E_PIKE_BLOCKED event was raised\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">event_route[E_PIKE_BLOCKED, async] </div><div class="line">&#123;</div><div class="line">   xlog(&quot;The E_PIKE_BLOCKED event was raised\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[opensips函数]]></title>
      <url>http://freeshow.github.io/2016/07/23/opensips%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="append-branch"><a href="#append-branch" class="headerlink" title="append_branch()"></a>append_branch()</h2><p>Similarly to t_fork_to, it extends destination set by a new entry. The difference is that current URI is taken as new entry.</p>
<p>Without parameter, the function copies the current URI into a new branch. Thus, leaving the main branch (the URI) for further manipulation.(保留主分支（URI）做进行进一步的处理。)</p>
<p>With a parameter, the function copies the URI in the parameter into a new branch（这个函数将函数参数作为URI复制到新的分支）. Thus, the current URI is not manipulated.(当前URI不被操纵。)</p>
<p>Note that it’s not possible to append a new branch in “on_failure_route” block if a 6XX response has been previously received (it would be against RFC 3261).</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">   # if someone calls B, the call should be forwarded to C too.</div><div class="line">   #</div><div class="line">   if (method==&quot;INVITE&quot; &amp;&amp; uri=~&quot;sip:B@xx.xxx.xx &quot;)</div><div class="line">   &#123;</div><div class="line">       # copy the current branch (branches[0]) into</div><div class="line">       # a new branch (branches[1])</div><div class="line">       append_branch();</div><div class="line">       # all URI manipulation functions work on branches[0]</div><div class="line">       # thus, URI manipulation does not touch the </div><div class="line">       # appended branch (branches[1])</div><div class="line">       seturi(&quot;sip:C@domain&quot;);</div><div class="line"></div><div class="line">       # now: branch 0 = C@domain</div><div class="line">       #      branch 1 = B@xx.xx.xx.xx</div><div class="line"></div><div class="line">       # and if you need a third destination ...</div><div class="line"></div><div class="line">       # copy the current branch (branches[0]) into</div><div class="line">       # a new branch (branches[2])</div><div class="line">       append_branch();</div><div class="line"></div><div class="line">       # all URI manipulation functions work on branches[0]</div><div class="line">       # thus, URI manipulation does not touch the </div><div class="line">       # appended branch (branches[1-2])</div><div class="line">       seturi(&quot;sip:D@domain&quot;);</div><div class="line"></div><div class="line">       # now: branch 0 = D@domain</div><div class="line">       #      branch 1 = B@xx.xx.xx.xx</div><div class="line">       #      branch 2 = C@domain</div><div class="line"></div><div class="line">       t_relay();</div><div class="line">       exit;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   # You could also use append_branch(&quot;sip:C@domain&quot;) which adds a branch with the new URI:</div><div class="line"></div><div class="line">   if(method==&quot;INVITE&quot; &amp;&amp; uri=~&quot;sip:B@xx.xxx.xx &quot;) </div><div class="line">   &#123;</div><div class="line">       # append a new branch with the second destination</div><div class="line">       append_branch(&quot;sip:user@domain&quot;);</div><div class="line">       # now: branch 0 = B@xx.xx.xx.xx</div><div class="line">       # now: branch 1 = C@domain</div><div class="line"></div><div class="line">       t_relay();</div><div class="line">       exit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##revert_uri()</p>
<p>Set the R-URI to the value of the R-URI as it was when the request was received by server (undo all changes of R-URI).</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revert_uri();</div></pre></td></tr></table></figure>
<h2 id="prefix-string"><a href="#prefix-string" class="headerlink" title="prefix(string)"></a>prefix(string)</h2><p>Add the string parameter in front of username in R-URI.</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prefix(&quot;00&quot;);</div></pre></td></tr></table></figure>
<h2 id="rewritehost-sethost"><a href="#rewritehost-sethost" class="headerlink" title="rewritehost() / sethost()"></a>rewritehost() / sethost()</h2><p>Rewrite the domain part of the R-URI with the value of function’s parameter. Other parts of the R-URI like username, port and URI parameters remain unchanged.</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewritehost(&quot;1.2.3.4&quot;);</div></pre></td></tr></table></figure>
<h2 id="rewritehostport-sethostport"><a href="#rewritehostport-sethostport" class="headerlink" title="rewritehostport() / sethostport()"></a>rewritehostport() / sethostport()</h2><p>Rewrite the domain part and port of the R-URI with the value of function’s parameter. Other parts of the R-URI like username and URI parameters remain unchanged.</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewritehostport(&quot;1.2.3.4:5080&quot;);</div></pre></td></tr></table></figure>
<h2 id="rewriteuri-str-seturi-str"><a href="#rewriteuri-str-seturi-str" class="headerlink" title="rewriteuri(str) / seturi(str)"></a>rewriteuri(str) / seturi(str)</h2><p>Rewrite the request URI.</p>
<p>Example of usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewriteuri(&quot;sip:test@opensips.org&quot;);</div></pre></td></tr></table></figure>
<h2 id="t-relay"><a href="#t-relay" class="headerlink" title="t_relay()"></a>t_relay()</h2><p>Relay a message statefully to a fixed destination. The destination is specified as “[proto:]host[:port]”. If a destination URI “$du” for this message was set before the function is called then this value will be used as the destination instead of the function parameter.</p>
<p>The function may take as parameter an optional set of flags for controlling the internal behaviour - for details see the above “t_relay([flags])” function.</p>
<p>This functions can be used from REQUEST_ROUTE, FAILURE_ROUTE.</p>
<p>Example 1.20. t_relay usage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">t_relay(&quot;tcp:192.168.1.10:5060&quot;);</div><div class="line">t_relay(&quot;mydomain.com:5070&quot;,&quot;0x1&quot;);</div><div class="line">t_relay(&quot;udp:mydomain.com&quot;);</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SIP路由字段和机理]]></title>
      <url>http://freeshow.github.io/2016/07/23/SIP%E8%B7%AF%E7%94%B1%E5%AD%97%E6%AE%B5%E5%92%8C%E6%9C%BA%E7%90%86/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="From"><a href="#From" class="headerlink" title="From"></a>From</h2><p>如果一个SIP消息中没有Contact或者Record-Route头域，那么callee就会根据From头域产生后续的Request。</p>
<p>比如,如果Alice打一个电话给Bob,From头域的内容是 From:Alice<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#115;&#105;&#x70;&#x3a;&#x61;&#x6c;&#x69;&#99;&#101;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#x6f;&#x72;&#x67;">&#115;&#105;&#x70;&#x3a;&#x61;&#x6c;&#x69;&#99;&#101;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#x6f;&#x72;&#x67;</a>。那么Bob打给Alice时就会使用 sip:alice@example.org作为To头域和Request-URI头域的内容。 </p>
<h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><p>后续Request将根据Contact头域的内容决定目的地的地址，同时将Contact头域的内容放到Request-URI中。它还可以用来指示没有在Record-Route头域中记录的Proxies的地址。同时它还可以被用在Redirect servers和REGISTER requests 和responses。</p>
<h2 id="Record-Route"><a href="#Record-Route" class="headerlink" title="Record-Route"></a>Record-Route</h2><p>Record-Route字段实际上用于帮助UA建立Route Set，当UA发送Request时会用Route Set来设置上面提到的Route字段。当一个Request消息经过Proxy Server时，如果该Proxy Server希望通知UA相关的后续消息都能通过它来转发，此时它就会在消息中添加Record-Route字段，内容为自己的地址信息。当UAS发送Resposne消息时它将复制Request中的Record-Route字段，而UAC在Response消息中检测到Record-Route字段时，它就会用该字段的路由信息更新自己的Route Set 。</p>
<h2 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h2><p>Via头域是被服务器插入request中，用来检查路由环的，并且可以使response根据via找到返回的路。<font color="red">它不会对未来的request 或者是response造成影响。 </font></p>
<p>总的来说，如果有Route，request就应该根据Route发送，如果没有就根据Contact头域发送，如果连Contact都没有，就根据From头域发送。</p>
<h2 id="Service-Route"><a href="#Service-Route" class="headerlink" title="Service-Route"></a>Service-Route</h2><p>Service-Route在S-CSCF向UE发送REGISTER成功应答时设置，作用和Record-Route类似，用于帮助UE建立Route Set，这样UE注册后的消息（例如INVITE）通过设置Route字段无需经过I-CSCF可直接送达S-CSCF。</p>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>只能用于用户向注册服务器发送的Register请求。<br>1.如果某代理服务器希望发往用户的任何后续请求仍能经过自己，就可以在Register请求中插入一个Path字段并赋值为自身的URI。<br>2.如果要求拓扑隐藏，经过I-CSCF的时候要把这个 I 添加到Path字段中.</p>
<h2 id="To"><a href="#To" class="headerlink" title="To"></a>To</h2><p>To 字段总是包含被呼叫方的地址（通过sip代理时是公用地址，点对点时是真实ip），要注意的是区别该标题头和sip消息请求行中的Request-URI。To在信令路径中不会被代理改变，然而Request-URI包含的是信令路径中下一跳的地址，因此在路途中被每个代理改变。</p>
<p>总的来说，SIP中存在两种路由场景：<br>1.请求消息的路由<br>2.响应消息的路由 </p>
<p>其中，响应消息的路由非常简单，就是完全依靠Via来完成的。<br>【说明】一个SIP消息每经过一个Proxy（包括主叫），都会被加上一个Via头域，当消息到达被叫后，Via头域就记录了请求消息经过的完整路径。被叫将这些Via头域原样copy到响应消息中（包括各Via的参数，以及各Via的顺序），然后下发给第一个Via中的URI，每个Proxy转发响应消息前都会把第一个Via（也就是它自己添加的Via）删除，然后将消息转发给新的第一个Via中的URI，直到消息到达主叫。</p>
<p><strong>下面谈SIP请求消息的路由。</strong></p>
<p>首先我们要搞清楚什么是严格路由和松散路由。</p>
<h2 id="严格路由（Strict-Routing）"><a href="#严格路由（Strict-Routing）" class="headerlink" title="严格路由（Strict Routing）"></a>严格路由（Strict Routing）</h2><p>可以理解为比较“死板”的理由机制，这种路由机制在SIP协议的前身RFC 2534中定义，其机制非常简单。<font color="red">要求接收方接收到的消息的request-URI必须是自己的URI(即发送方的Request-URI always contained URI of the next hop)，然后它会把第一个Route头域“弹”出来，并把其中的URI作为新的request-RUI，然后把该消息路由给该URI。</font></p>
<h2 id="松散路由（Louse-Routing，lr）："><a href="#松散路由（Louse-Routing，lr）：" class="headerlink" title="松散路由（Louse Routing，lr）："></a>松散路由（Louse Routing，lr）：</h2><p>该路由机制较为灵活，也是SIP路由机制的灵魂所在，在RFC 3261中定义。<br>下面介绍一下一个松散路由的Proxy的路由决策过程：</p>
<p>1，Proxy首先会检查消息的request-URI是不是自己属于自己所负责的域。如果是，它就会通过定位服务将该地址“翻译”成具体的联系地址并以此替换掉原来的request-URI；否则，它不会动request-URI。</p>
<p>2，Proxy检查第一个Route头域中的URI是不是自己的，如果是，则移除之。</p>
<p>3、Loose Router首先会检查Request URI是否为自己：如果不是，则不作处理；如果是，则取出Route字段的最后一个地址作为Request URI地址，并从Route字段中删去最后一个地址。</p>
<p>4、Loose Router其次会检查下一跳是否为Strict Router：如果不是，则不作处理；如果是，则将Request URI添加为Route的最后一个字段，并用下一跳Strict Router的地址更新Request URI。</p>
<p>可以看到步骤3、4其实是Loose Router为了兼容Strict Router而做的额外工作。</p>
<p>前面都是准备工作，下面该进行真正的路由了。如果还有Route头域，则Proxy会把消息路由给该头域中的URI，否则就路由给request-URI。</p>
<p>对于前面的规则，可以简单总结为一句话：<font color="red">Route的优先级高于request-URI的。</font></p>
<p>好，了解了两种路由机制，我们再来了解一下Route和Record-Route。</p>
<font color="red">如果说Via是为了给一个请求消息的响应消息留后路，那么Record-Route就是为了给该请求消息之后的请求消息留后路。</font>

<p>而在一个请求消息的传输过程中，Proxy也可能（纯粹自愿，如果它希望还能接收到本次会话的后续请求消息的话）会添加一个Record-Route头域，这样当消息到达被叫后里面就有会有0个或若干个Record-Route头域。被叫会将这些Record-Route头域并入路由集，并并入自己的路由集，随后被叫在发送请求消息时就会使用该路由集构造一系列Route头域，以便对消息进行路由。然后，被叫会像上面对待Via头域一样，将Record-Route头域全部原样copy到响应消息中返回给主叫。</p>
<p>主叫收到响应消息后也会将这些Record-Route头域并入路由集，只是它会将其反序。该会话中的后续请求消息的Route头域就会通过路由集构造。</p>
<font color="red">【注意】</font>Record-Route头域不用来路由，而只是起到传递信息的作用。<br>Record-Route头域不是路由集的唯一来源，路由集还可以通过手工配置等方式得到。<br><br><br>只是描述还是比较抽象，下面就以RFC 3261中的两个实例来解释一下。<br><br>路由示例1：<br><br>场景：<br>两个UE间有两个Proxy，U1 -&gt; P1 -&gt; P2 -&gt; U2，并且两个Proxy都乐意添加Record-Route头域。<br>U1( u1.example.com)<br>P1(p1.example.com)<br>P2(p2.domain.com)<br>U2(u2.domain.com)<br> 　　　　　　　　　　　 　　　<br>消息流：<br>【说明】由于我们在此只关心SIP路由机制，因此下面消息中跟路由机制无关的头域都省略了。<br><br>U1发出一个INVITE请求给P1（P1是U1的外拨代理服务器）：<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(U1--&gt;P1)</div><div class="line">INVITE sip:callee@domain.com SIP/2.0</div><div class="line">Contact: sip:caller@u1.example.com</div></pre></td></tr></table></figure><br><br><br>P1不负责域domain.com，消息中也没有Route头域，因此通过DNS查询得到负责该域的Proxy的地址并且把消息转发过去。这里P1在转发前就添加了一个Record-Route头域，里面有一个lr参数，说明P1是一个松散路由器，遵循RFC3261中的路由机制。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(P1---&gt;P2)</div><div class="line">INVITE sip:callee@domain.com SIP/2.0</div><div class="line">Contact: sip:caller@u1.example.com</div><div class="line">Record-Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure><br><br><font color="red">P2负责域domain.com，因此它通过定位服务得到callee@domain.com 对应的设备地址是callee@u2.domain.com ，因此用新的URI重写request-URI。</font>消息中没有Route头域，因此它就把该消息转发给request-URI中的URI，转发前它也增加了一个Record-Route头域，并且也有lr参数。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(P2--&gt;U2)</div><div class="line">INVITE sip:callee@u2.domain.com SIP/2.0</div><div class="line">Contact: sip:caller@u1.example.com</div><div class="line">Record-Route: &lt;sip:p2.domain.com;lr&gt;</div><div class="line">Record-Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure><br><br>位于u2.domain.com的被叫收到了该INVITE消息，并且返回一个200 OK响应。其中就包括了INVITE中的Record-Route头域。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SIP/2.0 200 OK</div><div class="line">Contact: sip:callee@u2.domain.com</div><div class="line">Record-Route: &lt;sip:p2.domain.com;lr&gt;</div><div class="line">Record-Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure><br><br>被叫此时也就有了自己的路由集：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&lt;sip:p2.domain.com;lr&gt;,&lt;sip:p1.example.com;lr&gt;)</div></pre></td></tr></table></figure><br><br><font color="red">并且它本次会话的远端目的地址设置为INVITE中Contact中URI：caller@u1.example.com，此后被叫在该会话中的请求消息就发到这个URI。同样，被叫在200 OK响应中也携带了自己的联系地址，主叫收到该响应消息后也会把本次会话的远端目的地址设置为：callee@u2.domain.com，此后主机在该会话中的请求消息就发到这个URI。</font><br>同样，主叫也有了自己的路由集，只是跟被叫的是反序的：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&lt;sip:p1.example.com;lr&gt;,&lt;sip:p2.domain.com;lr&gt;)</div></pre></td></tr></table></figure><br><br>通话完毕后，我们架设主叫先挂机，则主叫发出BYE请求：<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BYE sip:callee@u2.domain.com SIP/2.0</div><div class="line">Route: &lt;sip:p1.example.com;lr&gt;,&lt;sip:p2.domain.com;lr&gt;</div></pre></td></tr></table></figure><br><br>可以看到，BYE的Route头域正是主机的路由集构造来的。<br>由于p1在第一个Route中，因此BYE首先发给P1。<br><br>P1收到该消息后，发现request-URI中的URI不属于自己负责的域，而消息有Route头域，并且第一个Route头域中的URI正是自己，因此删除之，并且把消息转发给新的第一个Route头域中的URI，也就是P2：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BYE sip:callee@u2.domain.com SIP/2.0</div><div class="line">Route: &lt;sip:p2.domain.com;lr&gt;</div></pre></td></tr></table></figure><br><br>P2收到该消息后，发现request-URI中的URI不属于自己负责的域（P2负责的是domain.com，而不是u2.domain.com），第一个Route头域中的URI正是自己，因此删除之，此时已经没有Route头域了，因此就转发给了request-URI中的URI。<br><br>被叫就会收到BYE消息：<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BYE sip:callee@u2.domain.com SIP/2.0</div></pre></td></tr></table></figure><br><br>———-<br>路由示例2：<br>如果说上面的示例主要关注的是路由流程，那么本示例关注的则是严格路由与松散路由的区别。<br><br>场景：<br>U1-&gt;P1-&gt;P2-&gt;P3-&gt;P4-&gt;U2<br>其中，P3是严格路由的，其余Proxy都是松散路由的，并且4个Proxy都很乐意增加Record-Route头域。<br><br>消息流：<br>我们直接给出了到达被叫的INVITE消息：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INVITE sip:callee@u2.domain.com SIP/2.0</div><div class="line">Contact: sip:caller@u1.example.com</div><div class="line">Record-Route: &lt;sip:p4.domain.com;lr&gt;</div><div class="line">Record-Route: &lt;sip:p3.middle.com&gt;</div><div class="line">Record-Route: &lt;sip:p2.example.com;lr&gt;</div><div class="line">Record-Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure><br><br><br>这中间的其他消息我们就不过问了，直接看一下被叫最后发出的BYE消息大概是什么样子：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BYE sip:caller@u1.example.com SIP/2.0</div><div class="line">Route: &lt;sip:p4.domain.com;lr&gt;</div><div class="line">Route: &lt;sip:p3.middle.com&gt;</div><div class="line">Route: &lt;sip:p2.example.com;lr&gt;</div><div class="line">Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure><br><br><br>因为P4在第一个Route里，因此被叫将BYE消息发给了P4。<br><br>P4收到该消息后，发现自己不负责域u1.example.com，但是第一个Route头域中的URI正是自己，因此删除之。<font color="red">P4还发现新的第一个Route头域中的URI是一个严格路由器，因此它把request-URI中的URI添加到最后一个Route的位置，并且将第一个Route“弹出”并且覆盖原来的request-URI。然后将消息转发给当前的request-URI，也就是P3。</font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BYE sip:p3.middle.com SIP/2.0</div><div class="line">Route: &lt;sip:p2.example.com;lr&gt;</div><div class="line">Route: &lt;sip:p1.example.com;lr&gt;</div><div class="line">Route: &lt;sip:caller@u1.example.com&gt;</div></pre></td></tr></table></figure>
<p>P3收到该消息后，直接把消息作出如下变换并且发给P2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BYE sip:p2.example.com;lr SIP/2.0</div><div class="line">Route: &lt;sip:p1.example.com;lr&gt;</div><div class="line">Route: &lt;sip:caller@u1.example.com&gt;</div></pre></td></tr></table></figure>
<p>P2收到该消息后，发现消息中的request-URI是自己的，因此在进一步处理先首先对消息做如下变换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BYE sip:caller@u1.example.com SIP/2.0</div><div class="line">Route: &lt;sip:p1.example.com;lr&gt;</div></pre></td></tr></table></figure>
<p>然后，P2发现自己不负责域u1.example.com，第一个Route中的URI也不是自己的，因此将消息转发给该URI，也就是P1。</p>
<p>P1收到该消息后，发现自己不负责域u1.example.com，但是第一个Route头域中的URI正是自己，因此删除之。消息变成下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BYE sip:caller@u1.example.com SIP/2.0</div></pre></td></tr></table></figure>
<p> 转载自：<a href="http://blog.csdn.net/dingpeng1978/article/details/2652380" target="_blank" rel="external">SIP路由字段和机理</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[opensips+csipsimple出现的各种问题]]></title>
      <url>http://freeshow.github.io/2016/07/23/opensips-csipsimple%E5%87%BA%E7%8E%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="1-同一路由后，无法打通电话。"><a href="#1-同一路由后，无法打通电话。" class="headerlink" title="1.同一路由后，无法打通电话。"></a>1.同一路由后，无法打通电话。</h3><p>经过抓包分析研究，出现这个问题，是因为由于客户端启用了ICE和stun，导致ICE候选中的列表过长，超过了标准SIP信令的长度。<br>解决办法：<br>打开csipsimple中的Use compact SIP选项。<br>这样客户端发出了SIP消息就会使用简称，c，m这种格式，不过可能不支持老的sip服务器。</p>
<h3 id="2-穿越各种NAT。"><a href="#2-穿越各种NAT。" class="headerlink" title="2.穿越各种NAT。"></a>2.穿越各种NAT。</h3><p>有几点需要注意：</p>
<ul>
<li>客户端要同时开启stun和ICE；</li>
<li>opensips配置好mediaproxy模块，启动mediaproxy服务（包括dispatcher和relay）；</li>
<li>opensips.cfg中添加use_media_proxy()和end_media_session()。(在invite请求时开启media proxy即可，一般不用end)</li>
</ul>
<p>转载自：<a href="http://blog.csdn.net/zaker139/article/details/24311887" target="_blank" rel="external">opensips+csipsimple出现的各种问题</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[opensips介绍]]></title>
      <url>http://freeshow.github.io/2016/07/23/opensips%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、OpenSIPS简介"><a href="#一、OpenSIPS简介" class="headerlink" title="一、OpenSIPS简介"></a>一、OpenSIPS简介</h2><p>OpenSIPS是一个成熟的开源SIP服务器，除了提供基本的SIP代理及SIP路由功能外，还提供了一些应用级的功能。OpenSIPS的结构非常灵活，其核心路由功能完全通过脚本来实现，可灵活定制各种路由策略，可灵活应用于语音、视频通信、IM以及Presence等多种应用。同时OpenSIPS性能上是目前最快的SIP服务器之一，可用于电信级产品构建。凭借其可扩展、模块化的系统架构，OpenSIPS提供了一个高度灵活的、用户可配置的路由引擎，可以为voice、video、IM和 presence等服务提供强大高效的路由、鉴权、NAT、网关协议转化等功能。由于其稳定高效等特点，OpenSIPS已经被诸多电信运营商应用在自己的网络体系中。其 主要功能如下：</p>
<ul>
<li>SIP注册服务器/代理服务器（lcr、dynamic routing、dialplan）/重定向服务器</li>
<li>SIP presence agent</li>
<li>SIP B2BUA</li>
<li>SIP IM Server</li>
<li>SIP to SMS/XMPP网关</li>
<li>SIP to XMPP网关</li>
<li>SIP 负载均衡</li>
<li>SIP NAT traversal</li>
</ul>
<h2 id="二、OpenSIPS开源官网"><a href="#二、OpenSIPS开源官网" class="headerlink" title="二、OpenSIPS开源官网"></a>二、OpenSIPS开源官网</h2><p>OpenSIPS开源网址：<a href="http://www.opensips.org/" target="_blank" rel="external">http://www.opensips.org/</a></p>
<h2 id="三、OpenSIPS系统架构"><a href="#三、OpenSIPS系统架构" class="headerlink" title="三、OpenSIPS系统架构"></a>三、OpenSIPS系统架构</h2><p>OpenSIPS的架构开放灵活，其核心功能控制均可通过脚本控制实现，各个功能也通过模块加载的方式来构建。采用lex和yacc工具构建的配置文件分析器是其架构设计中的重要部分之一。通过这个分析器，opensips设计了自己的语法规则，使得我们可以适合SIP规范的语言来进行配置文件中的脚本编写，从而达到简化程序以及方便代码阅读的目的。同时这样的设计也使opensips.cfg配置文件的执行速度达到了C语言的级别。其体系结构大体如下图：</p>
<p><img src="http://img.blog.csdn.net/20160325102421018" alt="这里写图片描述"></p>
<p>OpenSIPS框架的最上层是用于实现sip消息路由逻辑的opensips.cfg脚本配置，在配置文件中，可以使用Core提供的Parameter和Function，也可以使用众多Modules提供的Function。比如在之前的负载均衡示例中，is_method(“INVITE”)就属于textops模块提供的功能，src_ip和src_port都属于Core提供的参数。</p>
<p>下层，提供了网络传输、sip消息解析等基本功能。</p>
<p>在左侧，通过相应的数据库适配器，可是使用多种数据库存取数据。</p>
<p>在这样的体系结构下，我们就可以方便地通过增加功能module来添加我们需要的功能，而不会对原有系统造成影响。</p>
<p>除了以上所述的OpenSIPS的优点，OpenSIPS还提供了一系列的管理维护命令的接口。我们可以通过Core和Module提供的MI管理接口，方便的监控系统以及模块的状态。比如，通过Core的fifo ps命令，可以获取当前进程的状态；通过Core的fifo get_statistics命令，可以获得当前共享内存以及各进程私有内存的使用情况等等。通过MI管理接口，我们还可以方便地在运行时修改部分参数，比如，对于load_balancer模块，我们可以通过fifo lb_reload命令，更新目标组的配置信息，可以通过fifo lb_status命令激活或关闭某个目标，这些命令在实际应用中都非常实用。</p>
<p>转载自：<a href="http://m.blog.csdn.net/article/details?id=48177299" target="_blank" rel="external">opensips</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（八）---输入输出重定向、文件包含]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E3%80%81%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">30分钟玩转Shell脚本编程</a>，仅供笔者学习使用。</p>
<h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><p>Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。</p>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>命令的输出不仅可以是显示器，还可以很容易的转移向到文件，这被称为输出重定向。</p>
<p>命令输出重定向的语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command &gt; file</div></pre></td></tr></table></figure>
<p>这样，输出到显示器的内容就可以被重定向到文件。</p>
<p>例如，下面的命令在显示器上不会看到任何输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ who &gt; users</div></pre></td></tr></table></figure>
<p>打开 users 文件，可以看到下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat users</div><div class="line">oko         tty01   Sep 12 07:30</div><div class="line">ai          tty15   Sep 12 13:32</div><div class="line">ruth        tty21   Sep 12 10:10</div><div class="line">pat         tty24   Sep 12 13:07</div><div class="line">steve       tty25   Sep 12 13:03</div><div class="line">$</div></pre></td></tr></table></figure>
<p>输出重定向会覆盖文件内容，请看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ echo line 1 &gt; users</div><div class="line">$ cat users</div><div class="line">line 1</div><div class="line">$</div></pre></td></tr></table></figure>
<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ echo line 2 &gt;&gt; users</div><div class="line">$ cat users</div><div class="line">line 1</div><div class="line">line 2</div><div class="line">$</div></pre></td></tr></table></figure>
<hr>
<h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command &lt; file</div></pre></td></tr></table></figure>
<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p>
<p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p>
<p>例如，计算 users 文件中的行数，可以使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wc -l users</div><div class="line">2 users</div><div class="line">$</div></pre></td></tr></table></figure>
<p>也可以将输入重定向到 users 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wc -l &lt; users</div><div class="line">2</div><div class="line">$</div></pre></td></tr></table></figure>
<p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p>
<hr>
<h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>
<ul>
<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>
<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>
<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>
</ul>
<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>
<p>如果希望 stderr 重定向到 file，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$command 2 &gt; file</div></pre></td></tr></table></figure>
<p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$command 2 &gt;&gt; file</div></pre></td></tr></table></figure>
<p>2 表示标准错误文件(stderr)。</p>
<p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$command &gt; file 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$command &gt;&gt; file 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$command &lt; file1 &gt;file2</div></pre></td></tr></table></figure>
<p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p>
<p><img src="http://img.blog.csdn.net/20160323163251150" alt="这里写图片描述"></p>
<hr>
<h3 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h3><p>Here Document 目前没有统一的翻译，这里暂译为”嵌入文档“。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command &lt;&lt; delimiter</div><div class="line">    document</div><div class="line">delimiter</div></pre></td></tr></table></figure>
<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>
<p>注意：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>
<li>开始的delimiter前后的空格会被忽略掉。</li>
<li>delimiter可以是自己随便起的字符串。</li>
</ul>
<p>下面的例子，通过 wc -l 命令计算 document 的行数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$wc -l &lt;&lt; EOF</div><div class="line">    This is a simple lookup program</div><div class="line">    for good (and bad) restaurants</div><div class="line">    in Cape Town.</div><div class="line">EOF</div><div class="line">3</div><div class="line">$</div></pre></td></tr></table></figure>
<p>也可以 将 Here Document 用在脚本中，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">cat &lt;&lt; EOF</div><div class="line">This is a simple lookup program</div><div class="line">for good (and bad) restaurants</div><div class="line">in Cape Town.</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is a simple lookup program</div><div class="line">for good (and bad) restaurants</div><div class="line">in Cape Town.</div></pre></td></tr></table></figure>
<p>下面的脚本通过 vi 编辑器将 document 保存到 test.txt 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">filename=test.txt</div><div class="line">vi $filename &lt;&lt;EndOfCommands</div><div class="line">i</div><div class="line">This file was created automatically from</div><div class="line">a shell script</div><div class="line">^[</div><div class="line">ZZ</div><div class="line">EndOfCommands</div></pre></td></tr></table></figure>
<p>运行脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sh test.sh</div><div class="line">Vim: Warning: Input is not from a terminal</div><div class="line">$</div></pre></td></tr></table></figure>
<p>打开 test.txt，可以看到下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat test.txt</div><div class="line">This file was created automatically from</div><div class="line">a shell script</div><div class="line">$</div></pre></td></tr></table></figure>
<hr>
<h3 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h3><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command &gt; /dev/null</div></pre></td></tr></table></figure>
<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出“的效果。</p>
<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ command &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<hr>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本。</p>
<p>Shell 中包含脚本可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. filename</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source filename</div></pre></td></tr></table></figure>
<p>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</p>
<p>例如，创建两个脚本，一个是被调用脚本 subscript.sh，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url=&quot;http://www.baidu.com&quot;</div></pre></td></tr></table></figure>
<p>一个是主文件 main.sh，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">. ./subscript.sh</div><div class="line">echo $url</div></pre></td></tr></table></figure>
<p>执行脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$chomd +x main.sh</div><div class="line">./main.sh</div><div class="line">http://www.baidu.com</div><div class="line">$</div></pre></td></tr></table></figure>
<p>注意：被包含脚本不需要有执行权限。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（七）---函数]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89-%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">30分钟玩转Shell脚本编程</a>，仅供笔者自己学习使用。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。像其他编程语言一样，Shell 也支持函数。Shell 函数必须先定义后使用。</p>
<p>Shell 函数的定义格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你愿意，也可以在函数名前加上关键字 function：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function function_name () &#123;</div><div class="line">    list of commands</div><div class="line">    [ return value ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</p>
<p><font color="red">Shell 函数返回值只能是整数</font>，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：“numeric argument required”。</p>
<p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</p>
<p>先来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># Define your function here</div><div class="line">Hello () &#123;</div><div class="line">   echo &quot;Hello Shell!&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Invoke your function</div><div class="line">Hello</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello Shell!</div></pre></td></tr></table></figure>
<p>调用函数只需要给出函数名，不需要加括号。</p>
<p>再来看一个带有return语句的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">funWithReturn()&#123;</div><div class="line">    echo &quot;The function is to get the sum of two numbers...&quot;</div><div class="line">    echo -n &quot;Input first number: &quot;</div><div class="line">    read aNum</div><div class="line">    echo -n &quot;Input another number: &quot;</div><div class="line">    read anotherNum</div><div class="line">    echo &quot;The two numbers are $aNum and $anotherNum !&quot;</div><div class="line">    return $(($aNum+$anotherNum))</div><div class="line">&#125;</div><div class="line">funWithReturn</div><div class="line"># Capture value returnd by last command</div><div class="line">ret=$?</div><div class="line">echo &quot;The sum of two numbers is $ret !&quot;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The function is to get the sum of two numbers...</div><div class="line">Input first number: 25</div><div class="line">Input another number: 50</div><div class="line">The two numbers are 25 and 50 !</div><div class="line">The sum of two numbers is 75 !</div></pre></td></tr></table></figure>
<p>函数返回值在调用该函数后通过 $? 来获得。</p>
<p>再来看一个函数嵌套的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># Calling one function from another</div><div class="line">number_one () &#123;</div><div class="line">   echo &quot;Url_1 is http://www.google.com&quot;</div><div class="line">   number_two</div><div class="line">&#125;</div><div class="line"></div><div class="line">number_two () &#123;</div><div class="line">   echo &quot;Url_2 is www.baidu.com&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">number_one</div></pre></td></tr></table></figure>
<p>运行结果：<br>Url_1 is www.google.com<br>Url_2 is www.baidu.com<br>像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$unset .f function_name</div></pre></td></tr></table></figure>
<p>如果你希望直接从终端调用函数，可以将函数定义在主目录下的 .profile 文件，这样每次登录后，在命令提示符后面输入函数名字就可以立即调用。</p>
<hr>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>
<p>带参数的函数示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">funWithParam()&#123;</div><div class="line">    echo &quot;The value of the first parameter is $1 !&quot;</div><div class="line">    echo &quot;The value of the second parameter is $2 !&quot;</div><div class="line">    echo &quot;The value of the tenth parameter is $10 !&quot;</div><div class="line">    echo &quot;The value of the tenth parameter is $&#123;10&#125; !&quot;</div><div class="line">    echo &quot;The value of the eleventh parameter is $&#123;11&#125; !&quot;</div><div class="line">    echo &quot;The amount of the parameters is $# !&quot;  # 参数个数</div><div class="line">    echo &quot;The string of the parameters is $* !&quot;  # 传递给函数的所有参数</div><div class="line">&#125;</div><div class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">The value of the first parameter is 1 !</div><div class="line">The value of the second parameter is 2 !</div><div class="line">The value of the tenth parameter is 10 !</div><div class="line">The value of the tenth parameter is 34 !</div><div class="line">The value of the eleventh parameter is 73 !</div><div class="line">The amount of the parameters is 12 !</div><div class="line">The string of the parameters is 1 2 3 4 5 6 7 8 9 34 73 !&quot;</div></pre></td></tr></table></figure></p>
<p>注意，\$10 不能获取第十个参数，获取第十个参数需要\${10}。当n&gt;=10时，需要使用${n}来获取参数。</p>
<p>另外，还有几个特殊变量用来处理参数，前面已经提到：</p>
<p><img src="http://img.blog.csdn.net/20160323162026598" alt="这里写图片描述"></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（六）---循环]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89-%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">30分钟玩转Shell脚本编程</a>，仅供笔者学习使用。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环一般格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for 变量 in 列表</div><div class="line">do</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line">done</div></pre></td></tr></table></figure>
<p>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量。</p>
<p>in 列表是可选的，如果不用它，for 循环使用命令行的位置参数。</p>
<p>例如，顺序输出当前列表中的数字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for loop in 1 2 3 4 5</div><div class="line">do</div><div class="line">    echo &quot;The value is: $loop&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The value is: 1</div><div class="line">The value is: 2</div><div class="line">The value is: 3</div><div class="line">The value is: 4</div><div class="line">The value is: 5</div></pre></td></tr></table></figure>
<p>顺序输出字符串中的字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for str in &apos;This is a string&apos;</div><div class="line">do</div><div class="line">    echo $str</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is a string</div></pre></td></tr></table></figure>
<p>显示主目录下以 .bash 开头的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">for FILE in $HOME/.bash*</div><div class="line">do</div><div class="line">   echo $FILE</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/root/.bash_history</div><div class="line">/root/.bash_logout</div><div class="line">/root/.bash_profile</div><div class="line">/root/.bashrc</div></pre></td></tr></table></figure>
<hr>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while command</div><div class="line">do</div><div class="line">   Statement(s) to be executed if command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假。</p>
<p>以下是一个基本的while循环，测试条件是：如果COUNTER小于5，那么返回 true。COUNTER从0开始，每次循环处理时，COUNTER加1。运行上述脚本，返回数字1到5，然后终止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">COUNTER=0</div><div class="line">while [ $COUNTER -lt 5 ]</div><div class="line">do</div><div class="line">    COUNTER=&apos;expr $COUNTER+1&apos;</div><div class="line">    echo $COUNTER</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure>
<p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按&lt; Ctrl-D &gt;结束循环。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo &apos;type &lt;CTRL-D&gt; to terminate&apos;</div><div class="line">echo -n &apos;enter your most liked film: &apos;</div><div class="line">while read FILM</div><div class="line">do</div><div class="line">    echo &quot;Yeah! great film the $FILM&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行脚本，输出类似下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type &lt;CTRL-D&gt; to terminate</div><div class="line">enter your most liked film: Sound of Music</div><div class="line">Yeah! great film the Sound of Music</div></pre></td></tr></table></figure>
<hr>
<h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。</p>
<p>until 循环格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">until command</div><div class="line">do</div><div class="line">   Statement(s) to be executed until command is true</div><div class="line">done</div></pre></td></tr></table></figure>
<p>command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p>
<p>例如，使用 until 命令输出 0 ~ 9 的数字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">a=0</div><div class="line"></div><div class="line">until [ ! $a -lt 10 ]</div><div class="line">do</div><div class="line">   echo $a</div><div class="line">   a=`expr $a + 1`</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td></tr></table></figure>
<hr>
<p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，像大多数编程语言一样，Shell也使用 break 和 continue 来跳出循环。</p>
<h2 id="breake命令"><a href="#breake命令" class="headerlink" title="breake命令"></a>breake命令</h2><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p>
<p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，就要使用break命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">while :</div><div class="line">do</div><div class="line">    echo -n &quot;Input a number between 1 to 5: &quot;</div><div class="line">    read aNum</div><div class="line">    case $aNum in</div><div class="line">        1|2|3|4|5) echo &quot;Your number is $aNum!&quot;</div><div class="line">        ;;</div><div class="line">        *) echo &quot;You do not select a number between 1 to 5, game is over!&quot;</div><div class="line">            break</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">done</div></pre></td></tr></table></figure>
<p>在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">break n</div></pre></td></tr></table></figure>
<p>表示跳出第 n 层循环。</p>
<p>下面是一个嵌套循环的例子，如果 var1 等于 2，并且 var2 等于 0，就跳出循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">for var1 in 1 2 3</div><div class="line">do</div><div class="line">   for var2 in 0 5</div><div class="line">   do</div><div class="line">      if [ $var1 -eq 2 -a $var2 -eq 0 ]</div><div class="line">      then</div><div class="line">         break 2</div><div class="line">      else</div><div class="line">         echo &quot;$var1 $var2&quot;</div><div class="line">      fi</div><div class="line">   done</div><div class="line">done</div></pre></td></tr></table></figure>
<p>如上，break 2 表示直接跳出外层循环。运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 0</div><div class="line">1 5</div></pre></td></tr></table></figure>
<hr>
<h2 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h2><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>
<p>对上面的例子进行修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">while :</div><div class="line">do</div><div class="line">    echo -n &quot;Input a number between 1 to 5: &quot;</div><div class="line">    read aNum</div><div class="line">    case $aNum in</div><div class="line">        1|2|3|4|5) echo &quot;Your number is $aNum!&quot;</div><div class="line">        ;;</div><div class="line">        *) echo &quot;You do not select a number between 1 to 5!&quot;</div><div class="line">            continue</div><div class="line">            echo &quot;Game is over!&quot;</div><div class="line">        ;;</div><div class="line">    esac</div><div class="line">done</div></pre></td></tr></table></figure>
<p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;Game is over!&quot;</div></pre></td></tr></table></figure>
<p>永远不会被执行。</p>
<font color="red">同样，continue 后面也可以跟一个数字，表示跳出第几层循环。</font>


</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（五）---if、case]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89-if%E3%80%81case/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a>，仅供笔者学习使用。</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。</p>
<p>Shell 有三种 if … else 语句：<br>if … fi 语句；<br>if … else … fi 语句；<br>if … elif … else … fi 语句。</p>
<hr>
<h3 id="1-if-…-fi-语句"><a href="#1-if-…-fi-语句" class="headerlink" title="1.if … fi 语句"></a>1.if … fi 语句</h3><p>if … else 语句的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>如果 expression 返回 true，then 后边的语句将会被执行；如果返回 false，不会执行任何语句。</p>
<p>最后必须以 fi 来结尾闭合 if，fi 就是 if 倒过来拼写，后面也会遇见。</p>
<p>注意：expression 和方括号([ ])之间必须有空格，否则会有语法错误。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is not equal to b&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<hr>
<h3 id="2-if-…-else-…-fi-语句"><a href="#2-if-…-else-…-fi-语句" class="headerlink" title="2.if … else … fi 语句"></a>2.if … else … fi 语句</h3><p>if … else … fi 语句的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [ expression ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if expression is not true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>如果 expression 返回 true，那么 then 后边的语句将会被执行；否则，执行 else 后边的语句。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;a is not equal to b&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-if-…-elif-…-fi-语句"><a href="#3-if-…-elif-…-fi-语句" class="headerlink" title="3. if … elif … fi 语句"></a>3. if … elif … fi 语句</h3><p>if … elif … fi 语句可以对多个条件进行判断，语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if [ expression 1 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 1 is true</div><div class="line">elif [ expression 2 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 2 is true</div><div class="line">elif [ expression 3 ]</div><div class="line">then</div><div class="line">   Statement(s) to be executed if expression 3 is true</div><div class="line">else</div><div class="line">   Statement(s) to be executed if no expression is true</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，则会执行else后面的语句。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is equal to b&quot;</div><div class="line">elif [ $a -gt $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is greater than b&quot;</div><div class="line">elif [ $a -lt $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is less than b&quot;</div><div class="line">else</div><div class="line">   echo &quot;None of the condition met&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a is less than b</div></pre></td></tr></table></figure>
<p>if … else 语句也可以写成一行，以命令的方式来运行，像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if test $[2*3] -eq $[1+5]; then echo &apos;The two numbers are equal!&apos;; fi;</div></pre></td></tr></table></figure>
<p>if … else 语句也经常与 test 命令结合使用，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">num1=$[2*3]</div><div class="line">num2=$[1+5]</div><div class="line">if test $[num1] -eq $[num2]</div><div class="line">then</div><div class="line">    echo &apos;The two numbers are equal!&apos;</div><div class="line">else</div><div class="line">    echo &apos;The two numbers are not equal!&apos;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The two numbers are equal!</div></pre></td></tr></table></figure>
<p>test 命令用于检查某个条件是否成立，与方括号([ ])类似。</p>
<hr>
<h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>case … esac 与其他语言中的 switch … case 语句类似，是一种多分枝选择结构。</p>
<p>case 语句匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">case 值 in</div><div class="line">模式1)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">模式2）</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">*)</div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    command3</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>case工作方式如上所示。取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后。</p>
<p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p>
<p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">echo &apos;Input a number between 1 to 4&apos;</div><div class="line">echo &apos;Your number is:\c&apos;</div><div class="line">read aNum</div><div class="line">case $aNum in</div><div class="line">    1)  echo &apos;You select 1&apos;</div><div class="line">    ;;</div><div class="line">    2)  echo &apos;You select 2&apos;</div><div class="line">    ;;</div><div class="line">    3)  echo &apos;You select 3&apos;</div><div class="line">    ;;</div><div class="line">    4)  echo &apos;You select 4&apos;</div><div class="line">    ;;</div><div class="line">    *)  echo &apos;You do not select a number between 1 to 4&apos;</div><div class="line">    ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>输入不同的内容，会有不同的结果，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Input a number between 1 to 4</div><div class="line">Your number is:3</div><div class="line">You select 3</div></pre></td></tr></table></figure>
<p>再举一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">option=&quot;$&#123;1&#125;&quot;</div><div class="line">case $&#123;option&#125; in</div><div class="line">   -f) FILE=&quot;$&#123;2&#125;&quot;</div><div class="line">      echo &quot;File name is $FILE&quot;</div><div class="line">      ;;</div><div class="line">   -d) DIR=&quot;$&#123;2&#125;&quot;</div><div class="line">      echo &quot;Dir name is $DIR&quot;</div><div class="line">      ;;</div><div class="line">   *) </div><div class="line">      echo &quot;`basename $&#123;0&#125;`:usage: [-f file] | [-d directory]&quot;</div><div class="line">      exit 1 # Command to come out of the program with status 1</div><div class="line">      ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$./test.sh</div><div class="line">test.sh: usage: [ -f filename ] | [ -d directory ]</div><div class="line">$ ./test.sh -f index.htm</div><div class="line">File name is index.htm</div><div class="line">$ ./test.sh -d unix</div><div class="line">Dir name is unix</div><div class="line">$</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（四）---echo、printf]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89-echo%E3%80%81printf/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a>，仅供笔者学习使用。</p>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>echo是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo arg</div></pre></td></tr></table></figure>
<p>您可以使用echo实现更复杂的输出格式控制。</p>
<h3 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;\&quot;It is a test\&quot;&quot;</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;It is a test&quot;</div></pre></td></tr></table></figure>
<p>双引号也可以省略。</p>
<h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name=&quot;OK&quot;</div><div class="line">echo &quot;$name It is a test&quot;</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK It is a test</div></pre></td></tr></table></figure>
<p>同样双引号也可以省略。</p>
<p>如果变量与其它字符相连的话，需要使用大括号（{ }）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mouth=8</div><div class="line">echo &quot;$&#123;mouth&#125;-1-2009&quot;</div></pre></td></tr></table></figure>
<p>结果将是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8-1-2009</div></pre></td></tr></table></figure>
<h3 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;OK!\n&quot;</div><div class="line">echo &quot;It is a test&quot;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OK!</div><div class="line">It is a test</div></pre></td></tr></table></figure>
<h3 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;OK!\c&quot;</div><div class="line">echo &quot;It is a test&quot;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK!It si a test</div></pre></td></tr></table></figure>
<h3 id="显示结果重定向至文件"><a href="#显示结果重定向至文件" class="headerlink" title="显示结果重定向至文件"></a>显示结果重定向至文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;It is a test&quot; &gt; myfile</div></pre></td></tr></table></figure>
<h3 id="原样输出字符串"><a href="#原样输出字符串" class="headerlink" title="原样输出字符串"></a>原样输出字符串</h3><p>若需要原样输出字符串（不进行转义），请使用单引号。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;$name\&quot;&apos;</div></pre></td></tr></table></figure>
<h3 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果"></a>显示命令执行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo `date`</div></pre></td></tr></table></figure>
<p>结果将显示当前日期</p>
<hr>
<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>printf 命令用于格式化输出， 是echo命令的增强版。它是C语言printf()库函数的一个有限的变形，并且在语法上有些不同。</p>
<p>注意：printf 由 POSIX 标准所定义，移植性要比 echo 好。</p>
<p>如同 echo 命令，printf 命令也可以输出简单的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$printf &quot;Hello, Shell\n&quot;</div><div class="line">Hello, Shell</div><div class="line">$</div></pre></td></tr></table></figure>
<p>printf 不像 echo 那样会自动换行，必须显式添加换行符(\n)。</p>
<p>printf 命令的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf  format-string  [arguments...]</div></pre></td></tr></table></figure>
<p>format-string 为格式控制字符串，arguments 为参数列表。</p>
<p>printf()在C语言入门教程中已经讲到，功能和用法与 printf 命令类似。</p>
<p>这里仅说明与C语言printf()函数的不同：</p>
<ul>
<li>printf 命令不用加括号</li>
<li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li>
<li>参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。</li>
<li>arguments 使用空格分隔，不用逗号。</li>
</ul>
<p>请看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># format-string为双引号</div><div class="line">$ printf &quot;%d %s\n&quot; 1 &quot;abc&quot;</div><div class="line">1 abc</div><div class="line"># 单引号与双引号效果一样 </div><div class="line">$ printf &apos;%d %s\n&apos; 1 &quot;abc&quot; </div><div class="line">1 abc</div><div class="line"># 没有引号也可以输出</div><div class="line">$ printf %s abcdef</div><div class="line">abcdef</div><div class="line"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</div><div class="line">$ printf %s abc def</div><div class="line">abcdef</div><div class="line">$ printf &quot;%s\n&quot; abc def</div><div class="line">abc</div><div class="line">def</div><div class="line">$ printf &quot;%s %s %s\n&quot; a b c d e f g h i j</div><div class="line">a b c</div><div class="line">d e f</div><div class="line">g h i</div><div class="line">j</div><div class="line"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</div><div class="line">$ printf &quot;%s and %d \n&quot; </div><div class="line">	and 0</div><div class="line"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</div><div class="line">$ printf &quot;The first program always prints&apos;%s,%d\n&apos;&quot; Hello Shell</div><div class="line">-bash: printf: Shell: invalid number</div><div class="line">The first program always prints &apos;Hello,0&apos;</div><div class="line">$</div></pre></td></tr></table></figure>
<p>注意，根据POSIX标准，浮点格式%e、%E、%f、%g与%G是“不需要被支持”。这是因为awk支持浮点预算，且有它自己的printf语句。这样Shell程序中需要将浮点数值进行格式化的打印时，可使用小型的awk程序实现。然而，内建于bash、ksh93和zsh中的printf命令都支持浮点格式。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（三）---字符串、数组]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89-%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a>，只用于自己学习Shell编程。</p>
<h2 id="Shell字符串"><a href="#Shell字符串" class="headerlink" title="Shell字符串"></a>Shell字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p>
<h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str=&apos;this is a string&apos;</div></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li>
</ul>
<h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">your_name=&apos;qinjx&apos;</div><div class="line">str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, I know your are &quot;qinjx&quot;!</div></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">your_name=&quot;qinjx&quot;</div><div class="line">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</div><div class="line">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</div><div class="line"></div><div class="line">echo $greeting $greeting_1</div></pre></td></tr></table></figure>
<p>输入结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello, qinjx ! hello, qinjx !</div></pre></td></tr></table></figure>
<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=&quot;abcd&quot;</div><div class="line">echo $&#123;#string&#125; #输出 4</div></pre></td></tr></table></figure>
<h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=&quot;alibaba is a great company&quot;</div><div class="line">echo $&#123;string:1:4&#125; #输出liba</div></pre></td></tr></table></figure>
<h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=&quot;alibaba is a great company&quot;</div><div class="line">echo `expr index &quot;$string&quot; y`</div></pre></td></tr></table></figure>
<p>输出结果为：26<br>即字符串从1开始，y字符在第26位置上。</p>
<hr>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Shell在编程方面比Windows批处理强大很多，无论是在循环、运算。</p>
<p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p>
<h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：<br>    array_name=(value1 … valuen)</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_name=(value0 value1 value2 value3)</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">array_name=(</div><div class="line">value0</div><div class="line">value1</div><div class="line">value2</div><div class="line">value3</div><div class="line">)</div></pre></td></tr></table></figure>
<p>还可以单独定义数组的各个分量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array_name[0]=value0</div><div class="line">array_name[1]=value1</div><div class="line">array_name[2]=value2</div></pre></td></tr></table></figure>
<font color="red">可以不使用连续的下标，而且下标的范围没有限制。</font>


<hr>
<h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：<br>    ${array_name[index]}</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">valuen=$&#123;array_name[2]&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">NAME[0]=&quot;Zara&quot;</div><div class="line">NAME[1]=&quot;Qadir&quot;</div><div class="line">NAME[2]=&quot;Mahnaz&quot;</div><div class="line">NAME[3]=&quot;Ayan&quot;</div><div class="line">NAME[4]=&quot;Daisy&quot;</div><div class="line">echo &quot;First Index: $&#123;NAME[0]&#125;&quot;</div><div class="line">echo &quot;Second Index: $&#123;NAME[1]&#125;&quot;</div></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$./test.sh</div><div class="line">First Index: Zara</div><div class="line">Second Index: Qadir</div></pre></td></tr></table></figure>
<p>使用@ 或 * 可以获取数组中的所有元素，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&#123;array_name[*]&#125;</div><div class="line">$&#123;array_name[@]&#125;</div></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">NAME[0]=&quot;Zara&quot;</div><div class="line">NAME[1]=&quot;Qadir&quot;</div><div class="line">NAME[2]=&quot;Mahnaz&quot;</div><div class="line">NAME[3]=&quot;Ayan&quot;</div><div class="line">NAME[4]=&quot;Daisy&quot;</div><div class="line">echo &quot;First Method: $&#123;NAME[*]&#125;&quot;</div><div class="line">echo &quot;Second Method: $&#123;NAME[@]&#125;&quot;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">First Method: Zara Qadir Mahnaz Ayan Daisy</div><div class="line">Second Method: Zara Qadir Mahnaz Ayan Daisy</div></pre></td></tr></table></figure>
<hr>
<h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 取得数组元素的个数</div><div class="line">length=$&#123;#array_name[@]&#125;</div><div class="line"># 或者</div><div class="line">length=$&#123;#array_name[*]&#125;</div><div class="line"># 取得数组单个元素的长度</div><div class="line">lengthn=$&#123;#array_name[n]&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（二）---替换、运算符、注释]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E6%9B%BF%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>转载自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a>，仅作为自己的学习笔记用。</p>
<h2 id="Shell变量替换，命令替换，转义字符"><a href="#Shell变量替换，命令替换，转义字符" class="headerlink" title="Shell变量替换，命令替换，转义字符"></a>Shell变量替换，命令替换，转义字符</h2><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1.转义字符"></a>1.转义字符</h3><p>如果表达式中包含特殊字符，Shell 将会进行替换。例如，在双引号中使用变量就是一种替换，转义字符也是一种替换。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">a=10</div><div class="line">echo -e &quot;Value of a is $a \n&quot;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>Value of a is 10</p>
</blockquote>
<p>这里 -e 表示对转义字符进行替换。如果不使用 -e 选项，将会原样输出：</p>
<blockquote>
<p>Value of a is 10\n</p>
</blockquote>
<p>下面的转义字符都可以用在 echo 中：</p>
<p><img src="http://img.blog.csdn.net/20160323083505618" alt="这里写图片描述"></p>
<p>可以使用 echo 命令的 -E 选项开启转义，默认也是不转义的；<br>使用 -n 选项可以禁止插入换行符。</p>
<hr>
<h3 id="2-命令替换"><a href="#2-命令替换" class="headerlink" title="2.命令替换"></a>2.命令替换</h3><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。</p>
<p>命令替换的语法：</p>
<blockquote>
<p>`command`</p>
</blockquote>
<p>注意是反引号，不是单引号，这个键位于 Esc 键下方。</p>
<p>下面的例子中，将命令执行结果保存在变量中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">DATE=`date`</div><div class="line">echo &quot;Date is $DATE&quot;</div><div class="line"></div><div class="line">USERS=`who | wc -l`</div><div class="line">echo &quot;Logged in user are $USERS&quot;</div><div class="line"></div><div class="line">UP=`date ; uptime`</div><div class="line">echo &quot;Uptime is $UP&quot;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>Date is Thu Jul  2 03:59:57 MST 2009<br>Logged in user are 1<br>Uptime is Thu Jul  2 03:59:57 MST 2009<br>03:59:57 up 20 days, 14:03,  1 user,  load avg: 0.13, 0.07, 0.15</p>
</blockquote>
<hr>
<h3 id="3-变量替换"><a href="#3-变量替换" class="headerlink" title="3.变量替换"></a>3.变量替换</h3><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>
<p>可以使用的变量替换形式：</p>
<p><img src="http://img.blog.csdn.net/20160323084307355" alt="这里写图片描述"></p>
<p>请看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">echo $&#123;var:-&quot;Variable is not set&quot;&#125;</div><div class="line">echo &quot;1 - Value of var is $&#123;var&#125;&quot;</div><div class="line"></div><div class="line">echo $&#123;var:=&quot;Variable is not set&quot;&#125;</div><div class="line">echo &quot;2 - Value of var is $&#123;var&#125;&quot;</div><div class="line"></div><div class="line">unset var</div><div class="line">echo $&#123;var:+&quot;This is default value&quot;&#125;</div><div class="line">echo &quot;3 - Value of var is $var&quot;</div><div class="line"></div><div class="line">var=&quot;Prefix&quot;</div><div class="line">echo $&#123;var:+&quot;This is default value&quot;&#125;</div><div class="line">echo &quot;4 - Value of var is $var&quot;</div><div class="line"></div><div class="line">echo $&#123;var:?&quot;Print this message&quot;&#125;</div><div class="line">echo &quot;5 - Value of var is $&#123;var&#125;&quot;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Variable is not set</div><div class="line">1 - Value of var is</div><div class="line">Variable is not set</div><div class="line">2 - Value of var is Variable is not set</div><div class="line"></div><div class="line">3 - Value of var is</div><div class="line">This is default value</div><div class="line">4 - Value of var is Prefix</div><div class="line">Prefix</div><div class="line">5 - Value of var is Prefix</div></pre></td></tr></table></figure>
<hr>
<h2 id="Shell运算符"><a href="#Shell运算符" class="headerlink" title="Shell运算符"></a>Shell运算符</h2><p>Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。</p>
<p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>
<p>例如，两个数相加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">val=`expr 2 + 2`</div><div class="line">echo &quot;Total value : $val&quot;</div></pre></td></tr></table></figure>
<p>运行脚本输出：</p>
<blockquote>
<p>Total value : 4</p>
</blockquote>
<p>两点注意：</p>
<ul>
<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>
<li>完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li>
</ul>
<hr>
<h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h3><p>先来看一个使用算术运算符的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line">val=`expr $a + $b`</div><div class="line">echo &quot;a + b : $val&quot;</div><div class="line"></div><div class="line">val=`expr $a - $b`</div><div class="line">echo &quot;a - b : $val&quot;</div><div class="line"></div><div class="line">val=`expr $a \* $b`</div><div class="line">echo &quot;a * b : $val&quot;</div><div class="line"></div><div class="line">val=`expr $b / $a`</div><div class="line">echo &quot;b / a : $val&quot;</div><div class="line"></div><div class="line">val=`expr $b % $a`</div><div class="line">echo &quot;b % a : $val&quot;</div><div class="line"></div><div class="line">if [ $a == $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo &quot;a is not equal to b&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a + b : 30</div><div class="line">a - b : -10</div><div class="line">a * b : 200</div><div class="line">b / a : 2</div><div class="line">b % a : 0</div><div class="line">a is not equal to b</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>乘号(*)前边必须加反斜杠(\)才能实现乘法运算；<br>if…then…fi 是条件语句，后续将会讲解。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160323085740923" alt="这里写图片描述"></p>
<p>注意：条件表达式要放在方括号之间，并且要有空格，例如 [\$a==\$b] 是错误的，必须写成 [ \$a == \$b ]。</p>
<hr>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
<p>先来看一个关系运算符的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line">if [ $a -eq $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -eq $b : a is equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -eq $b: a is not equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -ne $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -ne $b: a is not equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -ne $b : a is equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -gt $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -gt $b: a is greater than b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -gt $b: a is not greater than b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -lt $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -lt $b: a is less than b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -lt $b: a is not less than b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -ge $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -ge $b: a is greater or  equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -ge $b: a is not greater or equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -le $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a -le $b: a is less or  equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -le $b: a is not less or equal to b&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">10 -eq 20: a is not equal to b</div><div class="line">10 -ne 20: a is not equal to b</div><div class="line">10 -gt 20: a is not greater than b</div><div class="line">10 -lt 20: a is less than b</div><div class="line">10 -ge 20: a is not greater or equal to b</div><div class="line">10 -le 20: a is less or  equal to b</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160323090317185" alt="这里写图片描述"></p>
<hr>
<h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p>先来看一个布尔运算符的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=10</div><div class="line">b=20</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a != $b : a is not equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a != $b: a is equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -lt 100 -a $b -gt 15 ]</div><div class="line">then</div><div class="line">   echo &quot;$a -lt 100 -a $b -gt 15 : returns true&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -lt 100 -a $b -gt 15 : returns false&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -lt 100 -o $b -gt 100 ]</div><div class="line">then</div><div class="line">   echo &quot;$a -lt 100 -o $b -gt 100 : returns true&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -lt 100 -o $b -gt 100 : returns false&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a -lt 5 -o $b -gt 100 ]</div><div class="line">then</div><div class="line">   echo &quot;$a -lt 100 -o $b -gt 100 : returns true&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a -lt 100 -o $b -gt 100 : returns false&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">10 != 20 : a is not equal to b</div><div class="line">10 -lt 100 -a 20 -gt 15 : returns true</div><div class="line">10 -lt 100 -o 20 -gt 100 : returns true</div><div class="line">10 -lt 5 -o 20 -gt 100 : returns false</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160323090604516" alt="这里写图片描述"></p>
<hr>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>先来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">a=&quot;abc&quot;</div><div class="line">b=&quot;efg&quot;</div><div class="line"></div><div class="line">if [ $a = $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a = $b : a is equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a = $b: a is not equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a != $b ]</div><div class="line">then</div><div class="line">   echo &quot;$a != $b : a is not equal to b&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a != $b: a is equal to b&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -z $a ]</div><div class="line">then</div><div class="line">   echo &quot;-z $a : string length is zero&quot;</div><div class="line">else</div><div class="line">   echo &quot;-z $a : string length is not zero&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -n $a ]</div><div class="line">then</div><div class="line">   echo &quot;-n $a : string length is not zero&quot;</div><div class="line">else</div><div class="line">   echo &quot;-n $a : string length is zero&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $a ]</div><div class="line">then</div><div class="line">   echo &quot;$a : string is not empty&quot;</div><div class="line">else</div><div class="line">   echo &quot;$a : string is empty&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">abc = efg: a is not equal to b</div><div class="line">abc != efg : a is not equal to b</div><div class="line">-z abc : string length is not zero</div><div class="line">-n abc : string length is not zero</div><div class="line">abc : string is not empty</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160323090909349" alt="这里写图片描述"></p>
<hr>
<h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>
<p>例如，变量 file 表示文件“/var/www/tutorialspoint/unix/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">file=&quot;/var/www/tutorialspoint/unix/test.sh&quot;</div><div class="line"></div><div class="line">if [ -r $file ]</div><div class="line">then</div><div class="line">   echo &quot;File has read access&quot;</div><div class="line">else</div><div class="line">   echo &quot;File does not have read access&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -w $file ]</div><div class="line">then</div><div class="line">   echo &quot;File has write permission&quot;</div><div class="line">else</div><div class="line">   echo &quot;File does not have write permission&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -x $file ]</div><div class="line">then</div><div class="line">   echo &quot;File has execute permission&quot;</div><div class="line">else</div><div class="line">   echo &quot;File does not have execute permission&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -f $file ]</div><div class="line">then</div><div class="line">   echo &quot;File is an ordinary file&quot;</div><div class="line">else</div><div class="line">   echo &quot;This is sepcial file&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -d $file ]</div><div class="line">then</div><div class="line">   echo &quot;File is a directory&quot;</div><div class="line">else</div><div class="line">   echo &quot;This is not a directory&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -s $file ]</div><div class="line">then</div><div class="line">   echo &quot;File size is zero&quot;</div><div class="line">else</div><div class="line">   echo &quot;File size is not zero&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -e $file ]</div><div class="line">then</div><div class="line">   echo &quot;File exists&quot;</div><div class="line">else</div><div class="line">   echo &quot;File does not exist&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">File has read access</div><div class="line">File has write permission</div><div class="line">File has execute permission</div><div class="line">File is an ordinary file</div><div class="line">This is not a directory</div><div class="line">File size is zero</div><div class="line">File exists</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160323091058148" alt="这里写图片描述"></p>
<hr>
<h2 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h2><p>以“#”开头的行就是注释，会被解释器忽略。</p>
<p>sh里没有多行注释，只能每一行加一个#号。只能像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#--------------------------------------------</div><div class="line"># 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：</div><div class="line"># https://github.com/webfrogs/xcode_shell/blob/master/ipa-build</div><div class="line"></div><div class="line"># 功能：自动为etao ios app打包，产出物为14个渠道的ipa包</div><div class="line"># 特色：全自动打包，不需要输入任何参数</div><div class="line">#--------------------------------------------</div><div class="line"></div><div class="line">##### 用户配置区 开始 #####</div><div class="line">#</div><div class="line">#</div><div class="line"># 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了</div><div class="line"># 应用名，确保和Xcode里Product下的target_name.app名字一致</div><div class="line">#</div><div class="line">##### 用户配置区 结束  #####</div></pre></td></tr></table></figure>
<p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程（一）]]></title>
      <url>http://freeshow.github.io/2016/07/23/Shell%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>参考自：<a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">Linux Shell脚本教程：30分钟玩转Shell脚本编程</a></p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Shell编程的特点"><a href="#Shell编程的特点" class="headerlink" title="Shell编程的特点"></a>Shell编程的特点</h2><h3 id="Shell有两种执行命令的方式："><a href="#Shell有两种执行命令的方式：" class="headerlink" title="Shell有两种执行命令的方式："></a>Shell有两种执行命令的方式：</h3><ul>
<li>交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。</li>
<li>批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令。</li>
</ul>
<p>Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行的，不需要编译，Shell程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行。</p>
<h3 id="脚本语言的特点："><a href="#脚本语言的特点：" class="headerlink" title="脚本语言的特点："></a>脚本语言的特点：</h3><p>脚本语言又被称为扩建的语言，或者动态语言，是一种编程语言。</p>
<p>脚本语言是为了缩短传统的编写-编译-链接-运行过程而创建的计算机编程语言。</p>
<p>一个脚本通常是解释运行而非编译。</p>
<p>1.脚本语言是一种解释性的语言,例如Python、Shell等等,它不象c\c++等可以编译成二进制代码,以可执行文件的形式存在，脚本语言不需要编译，可以直接用，由解释器来负责解释。</p>
<p>2.脚本语言一般都是以文本形式存在,类似于一种命令。</p>
<p>3.相对于编译型计算机编程语言：用脚本语言开发的程序在执行时，由其所对应的解释器（或称虚拟机）解释执行。系统程序设计语言是被预先编译成机器语言而执行的。脚本语言的主要特征是：程序代码即是脚本程序，亦是最终可执行文件。脚本语言可分为独立型和嵌入型，独立型脚本语言在其执行时完全依赖于解释器，而嵌入型脚本语言通常在编程语言中（如C，C++，VB，Java等）被嵌入使用。</p>
<p>4.和系统程序设计语言相比：不同是脚本语言是被解释而系统程序设计语言是被编译。被解释的语言由于没有编译时间而提供快速的转换，通过允许用户运行时编写应用程序，而不需要耗时的编译/打包过程。解释器使应用程序更加灵活，脚本语言的代码能够被实时生成和执行。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序设计师快速完成程序的编写工作。</p>
<hr>
<h2 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本"></a>第一个Shell脚本</h2><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。</p>
<p>输入一些代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;Hello World !&quot;</div></pre></td></tr></table></figure>
<p>“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。echo命令用于向窗口输出文本。</p>
<h3 id="运行Shell脚本有两种方法："><a href="#运行Shell脚本有两种方法：" class="headerlink" title="运行Shell脚本有两种方法："></a>运行Shell脚本有两种方法：</h3><p><strong>1.作为可执行程序</strong></p>
<p>将上面的代码保存为test.sh，并 cd 到相应目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x ./test.sh  #使脚本具有执行权限</div><div class="line">./test.sh  #执行脚本</div></pre></td></tr></table></figure>
<font color="red">注意，一定要写成./test.sh，而不是test.sh。</font>运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。<br><br>通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。<br><br>这里的”系统”，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。<br><br><strong>2.作为解释器参数</strong><br><br>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh test.sh</div></pre></td></tr></table></figure><br><br>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。<br><br>再看一个例子。下面的脚本使用 read 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># Author : mozhiyan</div><div class="line"># Copyright (c) http://see.xidian.edu.cn/cpp/linux/</div><div class="line"># Script follows here:</div><div class="line"></div><div class="line">echo &quot;What is your name?&quot;</div><div class="line">read PERSON</div><div class="line">echo &quot;Hello, $PERSON&quot;</div></pre></td></tr></table></figure><br><br>运行脚本：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chmod +x ./test.sh</div><div class="line">$./test.sh</div><div class="line">What is your name?</div><div class="line">mozhiyan</div><div class="line">Hello, mozhiyan</div><div class="line">$</div></pre></td></tr></table></figure><br><br>———-<br><br><br>## Shell变量<br><br>Shell支持自定义变量。<br><br><br>———-<br><br><br>### 变量定义<br><br><strong>格式：</strong>变量名=变量值<br><br>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：<br><br>- 首个字符必须为字母（a-z，A-Z）。<br>- 中间不能有空格，可以使用下划线（_）。<br>- 不能使用标点符号。<br>- 不能使用bash里的关键字（可用help命令查看保留关键字）。<br><br>eg:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myName=&quot;ZhangSan&quot;</div><div class="line">myNum=100</div></pre></td></tr></table></figure><br><br>———-<br><br><br>### 使用变量<br><br>使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">your_name=&quot;ZhangSan&quot;</div><div class="line">echo $your_name</div><div class="line">echo $&#123;your_name&#125;</div></pre></td></tr></table></figure><br><br>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for skill in Ada Coffe Action Java </div><div class="line">do</div><div class="line">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</div><div class="line">done</div></pre></td></tr></table></figure><br><br>如果不给skill变量加花括号，写成echo “I am good at \$skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。<br><br><font color="red">推荐给所有变量加上花括号，这是个好的编程习惯。</font>


<hr>
<h3 id="重新定义变量"><a href="#重新定义变量" class="headerlink" title="重新定义变量"></a>重新定义变量</h3><p>已定义的变量，可以被重新定义，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myName=&quot;ZhangSan&quot;</div><div class="line">echo $&#123;myName&#125;</div><div class="line"></div><div class="line">myName=&quot;LiSi&quot;</div><div class="line">echo $&#123;myName&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<p>下面的例子尝试更改只读变量，结果报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">myName=&quot;ZhangSan&quot;</div><div class="line">readonly myName</div><div class="line">myName=&quot;LiSi&quot;</div></pre></td></tr></table></figure>
<p>运行脚本，结果如下：</p>
<blockquote>
<p>./test.sh: line 5: myName: readonly variable</p>
</blockquote>
<hr>
<h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用 unset 命令可以删除变量。语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unset variable_name</div></pre></td></tr></table></figure>
<p>变量被删除后不能再次使用；unset 命令不能删除只读变量。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">myName=&quot;ZhangSan&quot;</div><div class="line">unset myName</div><div class="line">echo $&#123;myName&#125;</div></pre></td></tr></table></figure>
<p>上面的脚本没有任何输出。</p>
<hr>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：</p>
<h4 id="1-用户变量-局部变量"><a href="#1-用户变量-局部变量" class="headerlink" title="1.用户变量(局部变量)"></a>1.用户变量(局部变量)</h4><p>用户自己定义的变量。<br>定义格式： 变量名=变量值</p>
<p>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p>
<h4 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h4><p>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p>
<p>修改shell环境变量的方法大致分为两种，一种是使用export命令，一种是修改配置文件。</p>
<p>(1)export命令，该方式只对该次交互式非登录shell有效，退出shell再次进入后修改的内容丢失。</p>
<p>格式：export 变量名=变量值</p>
<p>例如将/home/xxxx/bin添加到PATH中，可以使用命令：<br>export PATH=$PATH:/home/xxxx/bin。</p>
<p>这条命令可以直接在shell中执行，也可以放在脚本中，但放在脚本中需要使用source命令来执行脚本。</p>
<p>修改后可以使用命令：<br>echo $PATH或者export<br>查看是否修改成功。如果输出的PATH中含有/home/xxxx/bin则表明修改成功。</p>
<p>(2)修改配置文件<br>如果想在两个交互式非登录shell中都访问到变量，则可以将变量添加到~/.bashrc中，因为每打开一个交互式非登录shell都会重新加载~/.bashrc文件，故都会访问到。<br>当然，如果把变量加载到/etc/profile ，所有登陆shell都更能访问的到了。</p>
<h4 id="3-shell变量"><a href="#3-shell变量" class="headerlink" title="3.shell变量"></a>3.shell变量</h4><p>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。</p>
<p><strong>常用的shell变量</strong><br>HOME  ：保存注册目录<br>TERM  ：终端类型（xterm 图形终端 ，linux 文本终端）<br>UID  ：当前用户的标识符，取值是由数字构成的字符串<br>PWD  ：当前工作目录的绝对路径名，该变量的取值随 cd 命令的使用而<br>变化<br>PS1  ：主提示符，“  # ”    “ $ ”<br>PS2:    辅助提示符，在输入行末尾“ \”  ，输出该提示符<br>IFS  ：  shell 指定的缺省域分隔符（空格  table   ）<br>LOGNAME  ：此变量保存登录名<br>SHELL  ：保存缺省 shell<br>RANDOM  ：产生随机数<br>PATH  ：保存用冒号分隔的目录路径名 </p>
<p>echo $PATH<br>/usr/local/sbin:/usr/local/bin/:/usr/sbin:/usr/bin:/sbin:/bin/:/usr/games<br>在shell中执行命令 ls等于执行/bin/ls 即当在shell中执行命令ls时，会在PATH变量的目录中寻找有没有ls这个文件，当找到/bin/ls就执行文件/bin/ls.</p>
<hr>
<h3 id="Shell特殊变量"><a href="#Shell特殊变量" class="headerlink" title="Shell特殊变量"></a>Shell特殊变量</h3><p>前面已经讲到，变量名只能包含数字、字母和下划线，因为某些包含其他字符的变量有特殊含义，这样的变量被称为特殊变量。</p>
<p>例如，$ 表示当前Shell进程的ID，即pid，看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo $$</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>29949</p>
</blockquote>
<hr>
<h4 id="特殊变量列表"><a href="#特殊变量列表" class="headerlink" title="特殊变量列表:"></a><strong>特殊变量列表:</strong></h4><table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\$0</td>
<td style="text-align:left">当前脚本的文件名</td>
</tr>
<tr>
<td style="text-align:center">\$n</td>
<td style="text-align:left">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td>
</tr>
<tr>
<td style="text-align:center">$#</td>
<td style="text-align:left">传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td style="text-align:center">\$*</td>
<td style="text-align:left">传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td style="text-align:center">\$@</td>
<td style="text-align:left">传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td style="text-align:center">\$?</td>
<td style="text-align:left">上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td style="text-align:center">\$$</td>
<td style="text-align:left">当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
</tbody>
</table>
<h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><strong>命令行参数</strong></h4><p>运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。</p>
<p>请看下面的脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">echo &quot;File Name: $0&quot;</div><div class="line">echo &quot;First Parameter : $1&quot;</div><div class="line">echo &quot;First Parameter : $2&quot;</div><div class="line">echo &quot;Quoted Values: $@&quot;</div><div class="line">echo &quot;Quoted Values: $*&quot;</div><div class="line">echo &quot;Total Number of Parameters : $#&quot;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>$./test.sh Zara Ali<br>File Name : ./test.sh<br>First Parameter : Zara<br>Second Parameter : Ali<br>Quoted Values: Zara Ali<br>Quoted Values: Zara Ali<br>Total Number of Parameters : 2</p>
</blockquote>
<hr>
<h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="\$* 和 \$@ 的区别"></a>\$* 和 \$@ 的区别</h4><p>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</p>
<p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p>
<p>下面的例子可以清楚的看到 $* 和 $@ 的区别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;\$*=&quot; $*</div><div class="line">echo &quot;\&quot;\$*\&quot;=&quot; &quot;$*&quot;</div><div class="line"></div><div class="line">echo &quot;\$@=&quot; $@</div><div class="line">echo &quot;\&quot;\$@\&quot;=&quot; &quot;$@&quot;</div><div class="line"></div><div class="line">echo &quot;print each param from \$*&quot;</div><div class="line">for var in $*</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \$@&quot;</div><div class="line">for var in $@</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \&quot;\$*\&quot;&quot;</div><div class="line">for var in &quot;$*&quot;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;print each param from \&quot;\$@\&quot;&quot;</div><div class="line">for var in &quot;$@&quot;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p>执行 ./test.sh “a” “b” “c” “d”，看到下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$*=  a b c d</div><div class="line">&quot;$*&quot;= a b c d  #&quot;a b c d&quot; 是一个整体</div><div class="line">$@=  a b c d</div><div class="line">&quot;$@&quot;= a b c d</div><div class="line">print each param from $*</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from $@</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">print each param from &quot;$*&quot; #&quot;$*&quot;是一个整体输出参数。</div><div class="line">a b c d</div><div class="line">print each param from &quot;$@&quot;</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure>
<hr>
<h4 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h4><p>$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。</p>
<p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p>
<p>不过，也有一些命令返回其他值，表示不同类型的错误。</p>
<p>下面例子中，命令成功执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$./test.sh Zara Ali</div><div class="line">File Name : ./test.sh</div><div class="line">First Parameter : Zara</div><div class="line">Second Parameter : Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Quoted Values: Zara Ali</div><div class="line">Total Number of Parameters : 2</div><div class="line">$echo $?</div><div class="line">0</div><div class="line">$</div></pre></td></tr></table></figure>
<p>$? 也可以表示函数的返回值，后续将会讲解。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用WebRTC搭建前端视频聊天室——入门篇]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E4%BD%BF%E7%94%A8WebRTC%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%A7%86%E9%A2%91%E8%81%8A%E5%A4%A9%E5%AE%A4%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<h2 id="什么是WebRTC？"><a href="#什么是WebRTC？" class="headerlink" title="什么是WebRTC？"></a>什么是WebRTC？</h2><p>众所周知，浏览器本身不支持相互之间直接建立信道进行通信，都是通过服务器进行中转。比如现在有两个客户端，甲和乙，他们俩想要通信，首先需要甲和服务器、乙和服务器之间建立信道。甲给乙发送消息时，甲先将消息发送到服务器上，服务器对甲的消息进行中转，发送到乙处，反过来也是一样。这样甲与乙之间的一次消息要通过两段信道，通信的效率同时受制于这两段信道的带宽。同时这样的信道并不适合数据流的传输，如何建立浏览器之间的点对点传输，一直困扰着开发者。WebRTC应运而生</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p>WebRTC是一个开源项目，旨在使得浏览器能为实时通信（RTC）提供简单的JavaScript接口。说的简单明了一点就是让浏览器提供JS的即时通信接口。这个接口所创立的信道并不是像WebSocket一样，打通一个浏览器与WebSocket服务器之间的通信，而是通过一系列的信令，建立一个浏览器与浏览器之间（peer-to-peer）的信道，这个信道可以发送任何数据，而不需要经过服务器。并且WebRTC通过实现MediaStream，通过浏览器调用设备的摄像头、话筒，使得浏览器之间可以传递音频和视频</p>
<h2 id="WebRTC已经在我们的浏览器中"><a href="#WebRTC已经在我们的浏览器中" class="headerlink" title="WebRTC已经在我们的浏览器中"></a>WebRTC已经在我们的浏览器中</h2><p>这么好的功能，各大浏览器厂商自然不会置之不理。现在WebRTC已经可以在较新版的Chrome、Opera和Firefox中使用了，著名的浏览器兼容性查询网站caniuse上给出了一份详尽的浏览器兼容情况</p>
<p><img src="http://img.blog.csdn.net/20160125105410161" alt="这里写图片描述"></p>
<p>另外根据36Kr前段时间的新闻<a href="http://36kr.com/p/205614.html" target="_blank" rel="external">Google 推出支持 WebRTC 及 Web Audio 的 Android 版 Chrome 29</a>和<a href="http://36kr.com/p/210209.html" target="_blank" rel="external">Android 版 Opera 开始支持 WebRTC，允许用户在没有任何插件的情况下实现语音和视频聊天</a></p>
<h2 id="三个接口"><a href="#三个接口" class="headerlink" title="三个接口"></a>三个接口</h2><hr>
<p>WebRTC实现了三个API，分别是:</p>
<ul>
<li>MediaStream：通过MediaStream的API能够通过设备的摄像头及话筒获得视频、音频的同步流</li>
<li>RTCPeerConnection：RTCPeerConnection是WebRTC用于构建点对点之间稳定、高效的流传输的组件</li>
<li>RTCDataChannel：RTCDataChannel使得浏览器之间（点对点）建立一个高吞吐量、低延时的信道，用于传输任意数据</li>
</ul>
<p>这里大致上介绍一下这三个API</p>
<h2 id="MediaStream（getUserMedia）"><a href="#MediaStream（getUserMedia）" class="headerlink" title="MediaStream（getUserMedia）"></a>MediaStream（getUserMedia）</h2><p>MediaStream API为WebRTC提供了从设备的摄像头、话筒获取视频、音频流数据的功能</p>
<h2 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h2><p><a href="http://w3c.github.io/mediacapture-main/getusermedia.html" target="_blank" rel="external">W3C标准传送门</a></p>
<h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p>同门可以通过调用navigator.getUserMedia()，这个方法接受三个参数：</p>
<ol>
<li>一个约束对象（constraints object），这个后面会单独讲</li>
<li>一个调用成功的回调函数，如果调用成功，传递给它一个流对象</li>
<li>一个调用失败的回调函数，如果调用失败，传递给它一个错误对象</li>
</ol>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>由于浏览器实现不同，他们经常会在实现标准版本之前，在方法前面加上前缀，所以一个兼容版本就像这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var getUserMedia = (navigator.getUserMedia || </div><div class="line">                    navigator.webkitGetUserMedia || </div><div class="line">                    navigator.mozGetUserMedia || </div><div class="line">                    navigator.msGetUserMedia);</div></pre></td></tr></table></figure>
<h2 id="一个超级简单的例子"><a href="#一个超级简单的例子" class="headerlink" title="一个超级简单的例子"></a>一个超级简单的例子</h2><hr>
<p>这里写一个超级简单的例子，用来展现getUserMedia的效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;GetUserMedia实例&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;video id=&quot;video&quot; autoplay&gt;&lt;/video&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);</div><div class="line"></div><div class="line">    getUserMedia.call(navigator, &#123;</div><div class="line">        video: true,</div><div class="line">        audio: true</div><div class="line">    &#125;, function(localMediaStream) &#123;</div><div class="line">        var video = document.getElementById(&apos;video&apos;);</div><div class="line">        video.src = window.URL.createObjectURL(localMediaStream);</div><div class="line">        video.onloadedmetadata = function(e) &#123;</div><div class="line">            console.log(&quot;Label: &quot; + localMediaStream.label);</div><div class="line">            console.log(&quot;AudioTracks&quot; , localMediaStream.getAudioTracks());</div><div class="line">            console.log(&quot;VideoTracks&quot; , localMediaStream.getVideoTracks());</div><div class="line">        &#125;;</div><div class="line">    &#125;, function(e) &#123;</div><div class="line">        console.log(&apos;Reeeejected!&apos;, e);</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>将这段内容保存在一个HTML文件中，放在服务器上。用较新版本的Opera、Firefox、Chrome打开，在浏览器弹出询问是否允许访问摄像头和话筒，选同意，浏览器上就会出现摄像头所拍摄到的画面了</p>
<p>注意，HTML文件要放在服务器上，否则会得到一个NavigatorUserMediaError的错误，显示PermissionDeniedError，最简单方法就是cd到HTML文件所在目录下，然后python -m SimpleHTTPServer（装了python的话），然后在浏览器中输入<a href="http://localhost:8000/{文件名称}.html" target="_blank" rel="external">http://localhost:8000/{文件名称}.html</a></p>
<p>这里使用<strong>getUserMedia</strong>获得流之后，需要将其输出，一般是绑定到<strong>video</strong>标签上输出，需要使用<strong>window.URL.createObjectURL(localMediaStream)</strong>来创造能在video中使用src属性播放的Blob URL，注意在video上加入autoplay属性，否则只能捕获到一张图片</p>
<p>流创建完毕后可以通过label属性来获得其唯一的标识，还可以通过<strong>getAudioTracks()</strong>和<strong>getVideoTracks()</strong>方法来获得流的追踪对象数组（如果没有开启某种流，它的追踪对象数组将是一个空数组）</p>
<h2 id="约束对象（Constraints）"><a href="#约束对象（Constraints）" class="headerlink" title="约束对象（Constraints）"></a>约束对象（Constraints）</h2><p>约束对象可以被设置在getUserMedia()和RTCPeerConnection的addStream方法中，这个约束对象是WebRTC用来指定接受什么样的流的，其中可以定义如下属性：</p>
<ul>
<li>video: 是否接受视频流</li>
<li>audio：是否接受音频流</li>
<li>MinWidth: 视频流的最小宽度</li>
<li>MaxWidth：视频流的最大宽度</li>
<li>MinHeight：视频流的最小高度</li>
<li>MaxHiehgt：视频流的最大高度</li>
<li>MinAspectRatio：视频流的最小宽高比</li>
<li>MaxAspectRatio：视频流的最大宽高比</li>
<li>MinFramerate：视频流的最小帧速率</li>
<li>MaxFramerate：视频流的最大帧速率</li>
</ul>
<p>详情见<a href="http://tools.ietf.org/html/draft-alvestrand-constraints-resolution-00" target="_blank" rel="external">这里写链接内容</a></p>
<h2 id="RTCPeerConnection"><a href="#RTCPeerConnection" class="headerlink" title="RTCPeerConnection"></a>RTCPeerConnection</h2><hr>
<p>WebRTC使用RTCPeerConnection来在浏览器之间传递流数据，这个流数据通道是点对点的，不需要经过服务器进行中转。但是这并不意味着我们能抛弃服务器，我们仍然需要它来为我们传递信令（signaling）来建立这个信道。WebRTC没有定义用于建立信道的信令的协议：信令并不是RTCPeerConnection API的一部分</p>
<h3 id="信令"><a href="#信令" class="headerlink" title="信令"></a>信令</h3><p>既然没有定义具体的信令的协议，我们就可以选择任意方式（AJAX、WebSocket），采用任意的协议（SIP、XMPP）来传递信令，建立信道，比如我写的<a href="https://github.com/LingyuCoder/SkyRTC-demo" target="_blank" rel="external">demo</a>，就是用的node的ws模块，在WebSocket上传递信令</p>
<p>需要信令来交换的信息有三种：</p>
<ul>
<li>session的信息：用来初始化通信还有报错</li>
<li>网络配置：比如IP地址和端口啥的</li>
<li>媒体适配：发送方和接收方的浏览器能够接受什么样的编码器和分辨率</li>
</ul>
<p>这些信息的交换应该在点对点的流传输之前就全部完成，一个大致的架构图如下：<br><img src="http://img.blog.csdn.net/20160125142625278" alt="这里写图片描述"></p>
<h3 id="通过服务器建立信道"><a href="#通过服务器建立信道" class="headerlink" title="通过服务器建立信道"></a>通过服务器建立信道</h3><p>这里再次重申，就算WebRTC提供浏览器之间的点对点信道进行数据传输，但是建立这个信道，必须有服务器的参与。WebRTC需要服务器对其进行四方面的功能支持：</p>
<ol>
<li>用户发现以及通信</li>
<li>信令传输</li>
<li>NAT/防火墙穿越</li>
<li>如果点对点通信建立失败，可以作为中转服务器</li>
</ol>
<h3 id="NAT-防火墙穿越技术"><a href="#NAT-防火墙穿越技术" class="headerlink" title="NAT/防火墙穿越技术"></a>NAT/防火墙穿越技术</h3><p>建立点对点信道的一个常见问题，就是NAT穿越技术。在处于使用了NAT设备的私有TCP/IP网络中的主机之间需要建立连接时需要使用NAT穿越技术。以往在VoIP领域经常会遇到这个问题。目前已经有很多NAT穿越技术，但没有一项是完美的，因为NAT的行为是非标准化的。这些技术中大多使用了一个公共服务器，这个服务使用了一个从全球任何地方都能访问得到的IP地址。在RTCPeeConnection中，使用ICE框架来保证RTCPeerConnection能实现NAT穿越</p>
<p>ICE，全名叫交互式连接建立（Interactive Connectivity Establishment）,一种综合性的NAT穿越技术，它是一种框架，可以整合各种NAT穿越技术如STUN、TURN（Traversal Using Relay NAT 中继NAT实现的穿透）。ICE会先使用STUN，尝试建立一个基于UDP的连接，如果失败了，就会去TCP（先尝试HTTP，然后尝试HTTPS），如果依旧失败ICE就会使用一个中继的TURN服务器。</p>
<p>我们可以使用Google的STUN服器：<strong>stun:stun.l.google.com:19302</strong>，于是乎，一个整合了ICE框架的架构应该长这个样子<br><img src="http://img.blog.csdn.net/20160125142926731" alt="这里写图片描述"></p>
<h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><p>还是前缀不同的问题，采用和上面类似的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var PeerConnection = (window.PeerConnection ||</div><div class="line">                    window.webkitPeerConnection00 || </div><div class="line">                    window.webkitRTCPeerConnection || </div><div class="line">                    window.mozRTCPeerConnection);</div></pre></td></tr></table></figure>
<h3 id="创建和使用"><a href="#创建和使用" class="headerlink" title="创建和使用"></a>创建和使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">//使用Google的stun服务器</div><div class="line">var iceServer = &#123;</div><div class="line">    &quot;iceServers&quot;: [&#123;</div><div class="line">        &quot;url&quot;: &quot;stun:stun.l.google.com:19302&quot;</div><div class="line">    &#125;]</div><div class="line">&#125;;</div><div class="line">//兼容浏览器的getUserMedia写法</div><div class="line">var getUserMedia = (navigator.getUserMedia ||</div><div class="line">                    navigator.webkitGetUserMedia || </div><div class="line">                    navigator.mozGetUserMedia || </div><div class="line">                    navigator.msGetUserMedia);</div><div class="line">//兼容浏览器的PeerConnection写法</div><div class="line">var PeerConnection = (window.PeerConnection ||</div><div class="line">                    window.webkitPeerConnection00 || </div><div class="line">                    window.webkitRTCPeerConnection || </div><div class="line">                    window.mozRTCPeerConnection);</div><div class="line">//与后台服务器的WebSocket连接</div><div class="line">var socket = __createWebSocketChannel();</div><div class="line">//创建PeerConnection实例</div><div class="line">var pc = new PeerConnection(iceServer);</div><div class="line">//发送ICE候选到其他客户端</div><div class="line">pc.onicecandidate = function(event)&#123;</div><div class="line">    socket.send(JSON.stringify(&#123;</div><div class="line">        &quot;event&quot;: &quot;__ice_candidate&quot;,</div><div class="line">        &quot;data&quot;: &#123;</div><div class="line">            &quot;candidate&quot;: event.candidate</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">&#125;;</div><div class="line">//如果检测到媒体流连接到本地，将其绑定到一个video标签上输出</div><div class="line">pc.onaddstream = function(event)&#123;</div><div class="line">    someVideoElement.src = URL.createObjectURL(event.stream);</div><div class="line">&#125;;</div><div class="line">//获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端</div><div class="line">getUserMedia.call(navigator, &#123;</div><div class="line">    &quot;audio&quot;: true,</div><div class="line">    &quot;video&quot;: true</div><div class="line">&#125;, function(stream)&#123;</div><div class="line">    //发送offer和answer的函数，发送本地session描述</div><div class="line">    var sendOfferFn = function(desc)&#123;</div><div class="line">            pc.setLocalDescription(desc);</div><div class="line">            socket.send(JSON.stringify(&#123; </div><div class="line">                &quot;event&quot;: &quot;__offer&quot;,</div><div class="line">                &quot;data&quot;: &#123;</div><div class="line">                    &quot;sdp&quot;: desc</div><div class="line">                &#125;</div><div class="line">            &#125;));</div><div class="line">        &#125;,</div><div class="line">        sendAnswerFn = function(desc)&#123;</div><div class="line">            pc.setLocalDescription(desc);</div><div class="line">            socket.send(JSON.stringify(&#123; </div><div class="line">                &quot;event&quot;: &quot;__answer&quot;,</div><div class="line">                &quot;data&quot;: &#123;</div><div class="line">                    &quot;sdp&quot;: desc</div><div class="line">                &#125;</div><div class="line">            &#125;));</div><div class="line">        &#125;;</div><div class="line">    //绑定本地媒体流到video标签用于输出</div><div class="line">    myselfVideoElement.src = URL.createObjectURL(stream);</div><div class="line">    //向PeerConnection中加入需要发送的流</div><div class="line">    pc.addStream(stream);</div><div class="line">    //如果是发送方则发送一个offer信令，否则发送一个answer信令</div><div class="line">    if(isCaller)&#123;</div><div class="line">        pc.createOffer(sendOfferFn);</div><div class="line">    &#125; else &#123;</div><div class="line">        pc.createAnswer(sendAnswerFn);</div><div class="line">    &#125;</div><div class="line">&#125;, function(error)&#123;</div><div class="line">    //处理媒体流创建失败错误</div><div class="line">&#125;);</div><div class="line">//处理到来的信令</div><div class="line">socket.onmessage = function(event)&#123;</div><div class="line">    var json = JSON.parse(event.data);</div><div class="line">    //如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述</div><div class="line">    if( json.event === &quot;__ice_candidate&quot; )&#123;</div><div class="line">        pc.addIceCandidate(new RTCIceCandidate(json.data.candidate));</div><div class="line">    &#125; else &#123;</div><div class="line">         pc.setRemoteDescription(new RTCSessionDescription(json.data.sdp));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>由于涉及较为复杂灵活的信令传输，故这里不做简短的实例，可以直接移步到最后</p>
<h2 id="RTCDataChannel"><a href="#RTCDataChannel" class="headerlink" title="RTCDataChannel"></a>RTCDataChannel</h2><hr>
<p>既然能建立点对点的信道来传递实时的视频、音频数据流，为什么不能用这个信道传一点其他数据呢？RTCDataChannel API就是用来干这个的，基于它我们可以在浏览器之间传输任意数据。DataChannel是建立在PeerConnection上的，不能单独使用</p>
<h3 id="使用DataChannel"><a href="#使用DataChannel" class="headerlink" title="使用DataChannel"></a>使用DataChannel</h3><p>我们可以使用channel = pc.createDataCHannel(“someLabel”);来在PeerConnection的实例上创建Data Channel，并给与它一个标签</p>
<p>DataChannel使用方式几乎和WebSocket一样，有几个事件：</p>
<ul>
<li>onopen</li>
<li>onclose</li>
<li>onmessage</li>
<li>onerror</li>
</ul>
<p>同时它有几个状态，可以通过readyState获取：</p>
<ul>
<li>connecting: 浏览器之间正在试图建立channel</li>
<li>open：建立成功，可以使用send方法发送数据了</li>
<li>closing：浏览器正在关闭channel</li>
<li>closed：channel已经被关闭了</li>
</ul>
<p>两个暴露的方法:</p>
<ul>
<li>close(): 用于关闭channel</li>
<li>send()：用于通过channel向对方发送数据</li>
</ul>
<h3 id="通过Data-Channel发送文件大致思路"><a href="#通过Data-Channel发送文件大致思路" class="headerlink" title="通过Data Channel发送文件大致思路"></a>通过Data Channel发送文件大致思路</h3><p>JavaScript已经提供了File API从input[ type= ‘file’]的元素中提取文件，并通过FileReader来将文件的转换成DataURL，这也意味着我们可以将DataURL分成多个碎片来通过Channel来进行文件传输</p>
<h2 id="一个综合的Demo"><a href="#一个综合的Demo" class="headerlink" title="一个综合的Demo"></a>一个综合的Demo</h2><hr>
<p><a href="https://github.com/LingyuCoder/SkyRTC-demo" target="_blank" rel="external">SkyRTC-demo</a>，这是我写的一个Demo。建立一个视频聊天室，并能够广播文件，当然也支持单对单文件传输，写得还很粗糙，后期会继续完善</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol>
<li>下载解压并cd到目录下</li>
<li>运行npm install安装依赖的库（express, ws, node-uuid）</li>
<li>运行node server.js，访问localhost:3000，允许摄像头访问</li>
<li>打开另一台电脑，在浏览器（Chrome和Opera，还未兼容Firefox）打开{server所在IP}:3000，允许摄像头和话筒访问</li>
<li>广播文件：在左下角选定一个文件，点击“发送文件”按钮</li>
<li>广播信息：左下角input框输入信息，点击发送</li>
<li>可能会出错，注意F12对话框，一般F5能解决</li>
</ol>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>视频音频聊天（连接了摄像头和话筒，至少要有摄像头），广播文件（可单独传播，提供API，广播就是基于单独传播实现的，可同时传播多个，小文件还好说，大文件坐等内存吃光），广播聊天信息</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://webrtc.org/" target="_blank" rel="external">WebRTC官方网站</a></li>
<li><a href="http://w3c.github.io/mediacapture-main/getusermedia.html" target="_blank" rel="external">W3C-GetUserMedia</a></li>
<li><a href="http://w3c.github.io/webrtc-pc/" target="_blank" rel="external">W3C-WebRTC</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/" target="_blank" rel="external">Capturing Audio &amp; Video in HTML5@html5rocks</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">Getting Started with WebRTC@html5rocks</a></li>
<li><a href="http://caniuse.com/" target="_blank" rel="external">caniuse</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E4%BA%92%E5%8B%95%E5%BC%8F%E9%80%A3%E6%8E%A5%E5%BB%BA%E7%AB%8B" target="_blank" rel="external">ICE交互式连接建立</a></li>
</ul>
<p>转载自：<a href="http://segmentfault.com/a/1190000000436544" target="_blank" rel="external">使用WebRTC搭建前端视频聊天室——入门篇</a></p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更改Yelee主题标签云为球形标签云]]></title>
      <url>http://freeshow.github.io/2016/07/23/%E6%9B%B4%E6%94%B9Yelee%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E4%BA%91%E4%B8%BA%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/</url>
      <content type="html"><![CDATA[<p>首先介绍球形标签云官方js插件地址：<a href="http://www.goat1000.com/tagcanvas.php" target="_blank" rel="external">http://www.goat1000.com/tagcanvas.php</a><br>里面包含了详细说明，看例子应该很容易明白，利用html5的Canvas绘图。</p>
<p>这里我使用的是独立版本的 <a href="http://www.goat1000.com/tagcanvas.js?2.8" target="_blank" rel="external">tagcanvas.js</a>，不知道为什么jquery版本不行- -</p>
<a id="more"></a>
<h2 id="第一步-下载tagcanvas-js"><a href="#第一步-下载tagcanvas-js" class="headerlink" title="第一步 下载tagcanvas.js"></a>第一步 下载tagcanvas.js</h2><p>下载上述 <a href="http://www.goat1000.com/tagcanvas.js?2.8" target="_blank" rel="external">tagcanvas.js</a>，放到主题文件夹<code>\...\themes\yelee\source\js</code>下</p>
<h2 id="第二步-修改配置文件"><a href="#第二步-修改配置文件" class="headerlink" title="第二步 修改配置文件"></a>第二步 修改配置文件</h2><p>修改主题布局文件 <code>\themes\yelee\layout\_partial\tag-cloud-page.ejs</code>，参考如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">&lt;hr&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>() %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/tagcanvas.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span> <span class="attr">id</span>=<span class="string">"myTags"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">height</span>=<span class="string">"350"</span> <span class="attr">id</span>=<span class="string">"my3DTags"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Anything in here will be replaced on browsers that support the canvas element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span> <span class="attr">id</span>=<span class="string">"tags"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</span></div><div class="line">      <span class="attr">min_font:</span> <span class="attr">16</span>,</div><div class="line">      <span class="attr">max_font:</span> <span class="attr">35</span>,</div><div class="line">      <span class="attr">amount:</span> <span class="attr">999</span>,</div><div class="line">      <span class="attr">color:</span> <span class="attr">true</span>,</div><div class="line">      <span class="attr">start_color:</span> '<span class="attr">blue</span>',</div><div class="line">      <span class="attr">end_color:</span> '<span class="attr">red</span>',</div><div class="line">  &#125;) %&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .category-list li, .tags li&#123;</div><div class="line">        display: inline;</div><div class="line">        font-size: 1.2em;</div><div class="line">        margin-right: 1em;</div><div class="line">        line-height: 60px;</div><div class="line">        border: 1px solid lightgray;</div><div class="line">        padding: 6px;</div><div class="line">    &#125;</div><div class="line">    .category-list a &#123;</div><div class="line">        color: gray;</div><div class="line">    &#125;</div><div class="line">    .category-list:hover a &#123;</div><div class="line">        color: gray;</div><div class="line">        text-decoration: none;</div><div class="line">        font-weight: bold;</div><div class="line">    &#125;</div><div class="line">    .category-list-count &#123;</div><div class="line">        margin-left: 2px;</div><div class="line">        font-size: .9em;</div><div class="line">    &#125;</div><div class="line">    .article-entry ul li:before&#123;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line">    .article-inner  &#123;</div><div class="line">        text-align: center;</div><div class="line">    &#125;</div><div class="line">    .article-meta &#123;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line">    .article-header &#123;</div><div class="line">        padding-right: 35px;</div><div class="line">    &#125;</div><div class="line">    #container .article .article-title &#123;</div><div class="line">        padding-right: 0;</div><div class="line">    &#125;</div><div class="line">    .tags &#123;</div><div class="line">        max-width: 40em;</div><div class="line">        margin: 2em auto;</div><div class="line">        margin-top: 0em;</div><div class="line">    &#125;</div><div class="line">    .tags a &#123;</div><div class="line">        margin-right: 1em;</div><div class="line">        line-height: 65px;</div><div class="line">        border-bottom: 1px solid gray;</div><div class="line">    &#125;</div><div class="line">    .tags a:hover &#123;</div><div class="line">        font-weight: bold;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    .category-list-child &#123;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          TagCanvas.Start(<span class="string">'my3DTags'</span>,<span class="string">'tags'</span>,&#123;</div><div class="line">            <span class="attr">textFont</span>: <span class="string">'Georgia,Optima'</span>,</div><div class="line">            <span class="attr">textColour</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">outlineColour</span>: <span class="string">'#ff00ff'</span>,</div><div class="line">            <span class="attr">weight</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">reverse</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">depth</span>: <span class="number">0.8</span>,</div><div class="line">            <span class="attr">maxSpeed</span>: <span class="number">0.05</span>,</div><div class="line">            <span class="attr">bgRadius</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">freezeDecel</span>: <span class="literal">true</span></div><div class="line">          &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">          <span class="comment">// something went wrong, hide the canvas container</span></div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">'myTags'</span>).style.display = <span class="string">'none'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置参数在TagCanvas.Start();参数表中，这里有具体配置选项：<a href="http://www.goat1000.com/tagcanvas-options.php" target="_blank" rel="external">Options</a></p>
<h2 id="第三步-修改-tagcloud-js"><a href="#第三步-修改-tagcloud-js" class="headerlink" title="第三步 修改 tagcloud.js"></a>第三步 修改 tagcloud.js</h2><p>接着到博客根目录下，找到/node_modules/hexo/lib/plugins/helper，修改tagcloud.js，找到如下代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result.push(</div><div class="line"><span class="string">'&lt;a href="'</span> + self.url_for(tag.path) + <span class="string">'" style="'</span> + style + <span class="string">'"&gt;'</span> +</div><div class="line">(transform ? transform(tag.name) : tag.name) +</div><div class="line"><span class="string">'&lt;/a&gt;'</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>加上<code>&lt;li&gt;&lt;/li&gt;</code>标签，如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result.push(</div><div class="line">  <span class="string">'&lt;li&gt;&lt;a href="'</span> + self.url_for(tag.path) + <span class="string">'" style="'</span> + style + <span class="string">'"&gt;'</span> +</div><div class="line">  (transform ? transform(tag.name) : tag.name) +</div><div class="line">  <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>大功告成，剩下的就是部署了。</p>
<p>转载自：<a href="http://www.netcan666.com/2015/12/15/Hexo个性化球形标签云/" target="_blank" rel="external">http://www.netcan666.com/2015/12/15/Hexo个性化球形标签云/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeSwitch安装文档]]></title>
      <url>http://freeshow.github.io/2016/07/23/FreeSwitch%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="编译安装FreeSWITCH所依赖的Linux软件包"><a href="#编译安装FreeSWITCH所依赖的Linux软件包" class="headerlink" title="编译安装FreeSWITCH所依赖的Linux软件包"></a>编译安装FreeSWITCH所依赖的Linux软件包</h2><pre><code>apt-get -y install build-essential automake autoconf git-core wget libtool  
apt-get -y install libncurses5-dev libtiff-dev libjpeg-dev zlib1g-dev libssl-dev libsqlite3-dev  
apt-get -y install libpcre3-dev libspeexdsp-dev libspeex-dev libcurl4-openssl-dev libopus-dev 
</code></pre><a id="more"></a>
<h2 id="解压FreeSwitch源码包安装"><a href="#解压FreeSwitch源码包安装" class="headerlink" title="解压FreeSwitch源码包安装"></a>解压FreeSwitch源码包安装</h2><pre><code>//下载
wget http://files.freeswitch.org/freeswitch-1.4.0.beta6.tar.bz2
//解压  
tar xvjf freeswitch-1.4.0.beta6.tar.bz2
//安装  
cd freeswitch-1.4.0 
./configure  
make install
</code></pre><h2 id="安装声音文件"><a href="#安装声音文件" class="headerlink" title="安装声音文件"></a>安装声音文件</h2><p>在源代码目录中执行：</p>
<blockquote>
<p>make sounds-install<br>make moh-install</p>
</blockquote>
<h2 id="建立符号链接"><a href="#建立符号链接" class="headerlink" title="建立符号链接"></a>建立符号链接</h2><p>为了便于使用，建议将这两个命令做符号链接放到你的搜索路径中，如：</p>
<blockquote>
<p>ln -sf /usr/local/freeswitch/bin/freeswitch /usr/bin/<br>ln -sf /usr/local/freeswitch/bin/fs_cli /usr/bin/</p>
</blockquote>
<p>这样启动FreeSWITCH时，就可以使用如下命令：</p>
<blockquote>
<p>sudo freeswitch</p>
</blockquote>
<p>连接FreeSWITCH控制台：</p>
<blockquote>
<p>sudo fs_cli</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo主题Yelee介绍]]></title>
      <url>http://freeshow.github.io/2016/07/23/Hexo%E4%B8%BB%E9%A2%98Yelee%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="Yelee-——-简而不减-Hexo-双栏博客主题"><a href="#Yelee-——-简而不减-Hexo-双栏博客主题" class="headerlink" title="Yelee —— 简而不减 Hexo 双栏博客主题"></a>Yelee —— 简而不减 Hexo 双栏博客主题</h1><p>本主题基于主题 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Hexo-Theme-Yilia</a> 修改而来，在此再次感谢原作者 Litten。修复了一些 bugs，改变了大量的样式，添加了不少特性。对原主题百般折腾后，发觉变动越来越大，索性就发布个新主题了，主题随我微博名 “夜Yelee” 。个人喜欢简洁的样式，重视内容的浏览，同时希望作为个人网站的博客，能稍微凸显出博主个性。各种修改折腾大抵基于以上考虑。</p>
<a id="more"></a>
<h2 id="GitHub链接"><a href="#GitHub链接" class="headerlink" title="GitHub链接"></a>GitHub链接</h2><p>GitHub: <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee</a></p>
<h2 id="Yelee主题使用说明"><a href="#Yelee主题使用说明" class="headerlink" title="Yelee主题使用说明"></a>Yelee主题使用说明</h2><p>Yelee主题使用说明: <a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">http://moxfive.coding.me/yelee/</a></p>
<h2 id="我的Blog简单使用介绍"><a href="#我的Blog简单使用介绍" class="headerlink" title="我的Blog简单使用介绍"></a>我的Blog简单使用介绍</h2><p>按照上面的<code>Yelee主题使用说明</code>配置。</p>
<h3 id="主菜单设置"><a href="#主菜单设置" class="headerlink" title="主菜单设置"></a>主菜单设置</h3><p>1.标签云设置：<br>使用 Hexo 命令新建一个名为 tags 的页面即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure></p>
<p>2.关于我页面</p>
<p>使用 Hexo 命令新建一个名为 about 的页面即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure></p>
<blockquote>
<p>该页面内容在文件 \hexo\source\about\index.md 中修改</p>
</blockquote>
<p>然后，将上面两个在下面配置中建立链接关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  所有文章: /archives/</div><div class="line">  标签云: /tags/</div><div class="line">  关于我: /about/</div></pre></td></tr></table></figure>
<p>注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">上面标签云设置，已经包含了tags和cataloges了，</div><div class="line">如果你在使用hexo new page catalages创建一个catalages分类，会和about页面一样，只显示一个网页。</div></pre></td></tr></table></figure></p>
<h2 id="写新的Blog"><a href="#写新的Blog" class="headerlink" title="写新的Blog"></a>写新的Blog</h2><p>将<code>\freeshow.github.io\scaffolds</code>下的post.md模板文件修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>当写文件时，就可以填写所属tags或categories了。<br>但是，tags和categories都会显示在 <code>标签云</code> 中.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04安装JDK与配置环境变量]]></title>
      <url>http://freeshow.github.io/2016/07/23/Ubuntu14-04%E5%AE%89%E8%A3%85JDK%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>先从Oracle官网下载JDK。先选择同意按钮，然后根据自己的系统下载相应版本。我的系统是Ubuntu14.04 64位的，所以我下载的是<code>jdk-8u91-linux-x64.tar.gz</code></p>
<a id="more"></a>
<h1 id="二、解压到合适的目录下"><a href="#二、解压到合适的目录下" class="headerlink" title="二、解压到合适的目录下"></a>二、解压到合适的目录下</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf jdk-8u91-linux-x64.tar.gz -C /opt/  #解压到/opt目录下</div><div class="line">cd /opt</div><div class="line">sudo mv jdk1.8.0_91 java	#将解压后的文件夹重命名为java,方便配置环境变量。</div></pre></td></tr></table></figure>
<p>故，jdk解压的文件现在在<code>/opt/java</code>文件夹下。</p>
<h1 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h1><p>有两种配置方式：</p>
<ol>
<li>修改/etc/profile(对所有用户有效)</li>
<li>修改~/.bashrc(对当前用户有效)</li>
</ol>
<p>此处以修改<code>/etc/profile</code>文件为例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/profile</div></pre></td></tr></table></figure>
<p>在文件末尾添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># set java env</div><div class="line">export JAVA_HOME=/opt/java</div><div class="line">export JRE_HOME=$JAVA_HOME/jre</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>
<p>最后一定要执行，下面命令（要不然，配置文件不生效）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<p>显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_91&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)</div></pre></td></tr></table></figure></p>
<p>则证明配置成功。</p>
]]></content>
    </entry>
    
  
  
</search>
